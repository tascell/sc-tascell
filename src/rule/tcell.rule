;;; Copyright (c) 2008-2017 Tasuku Hiraishi <tasuku@media.kyoto-u.ac.jp>
;;; All rights reserved.

;;; Redistribution and use in source and binary forms, with or without
;;; modification, are permitted provided that the following conditions
;;; are met:
;;; 1. Redistributions of source code must retain the above copyright
;;;    notice, this list of conditions and the following disclaimer.
;;; 2. Redistributions in binary form must reproduce the above copyright
;;;    notice, this list of conditions and the following disclaimer in the
;;;    documentation and/or other materials provided with the distribution.

;;; THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND
;;; ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;;; ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE
;;; FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
;;; DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
;;; OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
;;; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
;;; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
;;; OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
;;; SUCH DAMAGE.

;;; Tascell --> LW-SC

(define-ruleset tcell (sc0t-to-sc0t)
  (ignore-cfunc t)
  (nestfunc-tag ~fn)
  (no-nestfunc nil)                     ; 入れ子関数を持たないコードを生成（比較評価用）
  (no-exception nil)                    ; If t, invalidate exception support.
  (padding-size 1000)
  )

(scr:require "TCELL-DEFS")

(defrule sc-program tcell
  ((#?(,@decl-list))
   (tcell:with-environment-bound
       (let ((pg (mapcar #'external-declaration decl-list)))
         (append
          (list ~(%include "rule/tcell.sh")
		~(c-exp "#include \"sendrecv.h\"")
		~(c-exp "#include <stdlib.h>")
                ~(decl (handle-reqs) (fn void
					 (ptr ,(tcell:nestfunc-type))
					 (ptr (struct thread-data))))
		~(decl (handle-exception) (fn void
					      (ptr ,(tcell:nestfunc-type))
					      (ptr (struct thread-data))
					      long))
		)
          pg
          ;; sender/receiver関数およびその配列
          (tcell:sender-and-receiver-functions-all)
          (tcell:task-maps)
          ;; worker local storage
          (tcell:make-dummy-worker-data-if-needed)
          ))))
  )

(extendrule inlined-declaration tcell
  ;; 定義・宣言された関数名を記憶（判定は適当だが）
  (#?(,scs[storage-class-specifier] (,id[identifier] ,@id-list) ,@rest)
   (tcell:add-defined-func-name id)
   (next-pattern))
  ;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;; def task
  ;; * task-data -> struct
  (#?(def (task ,id) ,@rest)
   (tcell:add-task id)
   (tcell:with-task id
     (let ((task-mems (mapcar #'task-member! rest)))
        ~(def (struct ,(tcell:task-struct-id))
             ,@task-mems
           (def -dummy- (array char ,(ruleset-param 'padding-size))) )
        )))
  ;; * do_task_body
  (#?(def (task-body ,id) ,@body)
   (tcell:with-task id
     (tcell:task-body-function
      (tcell:with-new-bk ~-bk (function-body! body))) ))
  ;;; 以下はtaskに登録しておくだけ．最後にまとめてコードを作る
  ;; * send_task_body
  (#?(def (task-sender ,id) ,@body)
   (tcell:with-task id
     (tcell:set-task-send (function-body! body))
     (list ~%splice) ))
  ;; * send_rslt_body
  (#?(def (task-receiver ,id) ,@body)
   (tcell:with-task id
     (tcell:set-task-recv (function-body! body))
     (list ~%splice) ))
  ;; * recv_task_body
  (#?(def (rslt-sender ,id) ,@body)
   (tcell:with-task id
     (tcell:set-rslt-send (function-body! body))
     (list ~%splice) ))
  ;; * recv_rslt_body
  (#?(def (rslt-receiver ,id) ,@body)
   (tcell:with-task id
     (tcell:set-rslt-recv (function-body! body))
     (list ~%splice) ))
  ;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; worker local storage
  (#?(def worker-data ,@sdecl)
   (tcell:entry-worker-data)
   ~(def (struct worker-data)
        ,@(mapcar #'struct-declaration! sdecl)
        (def -dummy- (array char ,(ruleset-param 'padding-size)))) )
  ;; initializer of worker local storage
  (#?(def worker-init ,@body)
   (tcell:entry-worker-init)
   (tcell:with-worker-data
       ~(def (csym::worker-init ,@tcell:*worker-init-args*) ,tcell:*worker-init-type*
          ,@(function-body! body))))
  ;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; task-work用の関数定義/宣言
  (#?(,scs[storage-class-specifier] (,@id-list[identifier])
          (wfn ,@texp-list) ,@body)
   (tcell:with-worker-data
       ~(,scs ,(wfn-add-argids-decl id-list)
              ,(type-expression! ~(wfn ,@texp-list))
              ,@(tcell:with-new-bk ~-bk (function-body! body))) ))
  ;; 通常の関数定義/宣言
  (#?(,scs[storage-class-specifier] (,fid[identifier] ,@id-list[identifier])
          (,fn-tag[function-tag] ,@texp-list) ,@body)
   (if (and (ruleset-param 'ignore-cfunc)
            (or (cid-p fid) (eq ~csym::fn fn-tag)))
       x
     ~(,scs (,fid ,@id-list) ,(type-expression! ~(,fn-tag ,@texp-list))
            ,@(function-body body)) ))
  )

(defvar *tm-id*)
(defvar *tm-texp*)

(defrule task-member tcell
  (#?(,dd[def-or-decl] ,id[identifier] ,texp ,@options)
   (let ((*tm-id* id) (*tm-texp* texp))
     (mapc #'task-member-option! options))
   (tcell:task-add-field id texp)
   ~(,dd ,id ,texp)))

(defrule task-member-option tcell
  ((#?:in #?(:in ,@tsize))
   (tcell:task-add-input-var
    *tm-id* *tm-texp*
    (if-pattern-variable tsize
        (mapcar #'transfer-size-specifier tsize))) )
  ((#?:out #?(:out ,@tsize))
   (tcell:task-add-output-var
    *tm-id* *tm-texp*
    (if-pattern-variable tsize
        (mapcar #'transfer-size-specifier tsize))) )
  (#?() (values))
  )

;; 送受信サイズの指定．定数またはそれまでに定義されているメンバ名を指定可能
(defrule transfer-size-specifier tcell
  (#?,num[sc-number]
   x)
  (#?,id[identifier]
   (unless (tcell:task-field-p id)
     (ierror "~S is not defined as a field of task ~A" id (tcell:task-id)))
   ~(fref (mref pthis) ,id) ))

;;; 関数定義の仮引数追加
(defrule wfn-add-argids-decl tcell
  (#?(,@id-list)                        ; id-listには関数名も含む
   (if (ruleset-param 'no-nestfunc) id-list
     (insert (list ~-bk ~-thr) id-list 1) ))
  )
;;; 関数呼出の実引数追加
(defrule wfn-add-argids tcell
  (#?(,@id-list)                        ; id-listには関数名も含む
   (if (ruleset-param 'no-nestfunc) id-list
     (insert (list (tcell:latest-bk) ~-thr) id-list 1) ))
  )

;;; wfn関数型の仮引数の型追加
(extendrule type-expression tcell
  (#?(wfn ,@texp-list)
   (let ((texp-rets (mapcar #'type-expression! texp-list)))
     (if (ruleset-param 'no-nestfunc) ~(fn ,@texp-rets)
       ~(fn ,@(insert (list ~(ptr ,(tcell:nestfunc-type))
                            ~(ptr (struct thread-data)))
                      texp-rets 1)) )))
  )

(extendrule statement tcell
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; Explicitly check task/exception/cancel request
  (#?TCELL-CHECK-REQ
   ~(if (or -thr->req-cncl
            -thr->task-top->cancellation
            -thr->req)
        ,(wfn-add-argids ~(handle-reqs))) )
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; do-two
  ;; * stat1->stat2 の順に実行
  ;; * stat2 実行中に仕事の要求がきたら，:put以下を実行してsendする．
  ;;   <stat1>が終わり，sendした仕事の結果が返ってきたら，:get 以下を実行．
  (#?(do-two ,stat1 ,stat2 ({handles} ,id 
                            {(:guard ,@guard-body ,guard-exp)}
                            (:put ,@put-body) (:get ,@get-body)))
   (when (ruleset-param 'no-nestfunc)
     (return-from statement ~(begin ,(block-item stat1)
                                    ,(block-item stat2)) ))
   (tcell:with-task id
     (let* ((spn-id  (generate-id "spawned"))
            (tdat-id (generate-id "st"))
            (bk-id (generate-id "do_two_bk"))
            (b-stat1 (tcell:with-new-bk bk-id  (block-item stat1)))
            (b-stat2 (block-item stat2))
            (b-put-body (function-body put-body))
            (b-get-body (function-body get-body)))
       ~(begin
	  #+comment 
	  (def ,tdat-id (struct ,(tcell:task-struct-id))) ; 送信用 task-body
	  (def pthis (ptr (struct ,(tcell:task-struct-id)))
	    #+comment (ptr ,tdat-id))
	  (def ,spn-id int 0)            ; すでに仕事をsendしていたら '1'
	  (begin
	    ;; <-- Nestfunc start ---
	    ;; Called for backtracking to handle a task request or an exception
	    (def (,bk-id) ,(tcell:nestfunc-type)
	      ;; If this nested function is called for abnormal exit:
	      (if (or (== -thr->exiting EXITING-EXCEPTION)
		      (== -thr->exiting EXITING-CANCEL))
		  (begin
		    ;; Wait for spawned tasks to be completed
		    (while (> (dec ,spn-id) 0)
		      (wait-rslt -thr 0))
		    ;; Continue backtracking (never returns)
		    (,(tcell:latest-bk))))
	      ;; If this do-two has spawned a task:
            (if ,spn-id  (return 0))
	    ;; Try further backtracking
            (,(tcell:latest-bk))        ; より根元での分割を試みる
            (while -thr->treq-top       ; タスク作成待ちスタックに要素があれば
	      (begin
		,@(if-pattern-variable guard-exp
		    (list
		     ~(begin 
			,@guard-body
			(if (csym::guard-task-request-prob -thr ,guard-exp)
			    (continue)))))
		(= pthis
		   (cast (ptr (struct ,(tcell:task-struct-id)))
		     (csym::malloc (sizeof (struct ,(tcell:task-struct-id))))))
		(begin ,@b-put-body)
		(= ,spn-id 1)
		(csym::make-and-send-task -thr ,(tcell:task-no) pthis 1)
		(return 1)))
            (return 0))
	    ;; --- Nestfunc End -->
	    ;; Polling for cancel message requests, cancellation flags,
	    ;; and task requests.
	    (if (or -thr->req-cncl
		    -thr->task-top->cancellation
		    -thr->req)
		,(tcell:with-new-bk bk-id
		   (wfn-add-argids ~(handle-reqs))))
	    ,b-stat1)
	  (if ,spn-id
	      ;; If a subtask is spawned, wait for the result.
	      (if (= pthis (wait-rslt -thr 1))
		  (begin
		    (begin ,@b-get-body)
		    (csym::free pthis))
		;; If the subtask has thrown an exception, propagate it.
		(if (== -thr->exiting EXITING-EXCEPTION)
		    ,(wfn-add-argids ~(handle-exception -thr->exception-tag))))
	    (begin ,b-stat2))
	  ) )))
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; do-many
  ;; * ,var を制御変数として，,fromから ,toまでについて ,@bodyを実行
  ;; * body実行中に仕事の要求がきたら，残り範囲の半分を渡す
  ;; * 渡し方は :put 中で指定，渡す仕事の範囲の先頭は ,put-from，,put-to
  ;;   に渡され，:put 中の文で使用することができる．
  ;; * 受け取ったtaskの結果の結合は:getで指定
  (#?(do-many for ,var[identifier] from ,from to ,to
              ,@body
              ({handles} ,id
               {(:guard ,@guard-body ,guard-exp)}
               {(:spawn-from  ,@spn-from-body ,spn-from-exp)}
               (:put from ,put-from to ,put-to ,@put-body)
               (:get ,@get-body)))
   (when (ruleset-param 'no-nestfunc)
     ;; When no-nestfunc, translated to a sequential "for" statement
     (return-from statement
       (let ((var2 (generate-id (string+ (get-retval var) "_end"))))
         ~(begin
           (def ,var int ,(expression from))
           (def ,var2 int ,(expression to))
           (for ((< ,var ,var2) (inc ,var))
             ,@(function-body body))) )))
   (let ((spn-id (generate-id "spawned"))
         (bk-id (generate-id "do_many_bk"))
         (var2 (generate-id (string+ (get-retval var) "_end"))))
     (tcell:with-task id
       ~(begin
         (def ,var  int ,(expression from))
         (def ,var2 int ,(expression to)) ; ,var <= i < ,var2 が未処理
         (def pthis (ptr (struct ,(tcell:task-struct-id)))) ; 送信用 task-body
         (def ,spn-id int 0)            ; 仕事を他所にsendしている数
	 ;; <-- Nestfunc start ---
	 ;; Called for backtracking to handle a task request or an exception
         (def (,bk-id) ,(tcell:nestfunc-type)
	   ;; If this nested function is called for abnormal exit
	   (if (or (== -thr->exiting EXITING-EXCEPTION)
		   (== -thr->exiting EXITING-CANCEL))
	       (begin
		 ;; Wait for spawned tasks to be completed
		 (while (> (dec ,spn-id) 0)
		   (= pthis (cast (ptr (struct ,(tcell:task-struct-id)))
			      (wait-rslt -thr 0)))
		   (csym::free pthis))
		 ;; Continue backtracking (never returns)
		 (,(tcell:latest-bk))))
           ;; If this do-many has not spawned any tasks, continue backtracking
           (if (not ,spn-id) (,(tcell:latest-bk)))
           (while (and -thr->treq-top              ; there remains a treq?
                       (<= 2 (- ,var2 ,var)))      ; there remains any spawnable iterations?
             (def ,put-to int ,var2)
             (def ,put-from int)
             ,@(if-pattern-variable guard-exp
                   (list
                    ~(begin 
                       ,@guard-body
                       (if (csym::guard-task-request-prob -thr ,guard-exp)
                           (continue)))))
             ,(if-pattern-variable spn-from-exp
                                   ~(begin
                                     ,@spn-from-body
                                     (= ,put-from ,spn-from-exp)
                                     ;; Check the range
                                     (if (<= ,put-from ,var)
                                         (= ,put-from (+ ,var 1)))
                                     (if (>= ,put-from ,put-to)
                                         (break)))
                                   ~(= ,put-from (/ (+ 1 ,var ,var2) 2)))
             (= ,var2 ,put-from)
             (= pthis
                (cast (ptr (struct ,(tcell:task-struct-id)))
                  (csym::malloc (sizeof (struct ,(tcell:task-struct-id))))))
             (begin ,@(function-body put-body))
             (inc ,spn-id)
             (csym::make-and-send-task -thr ,(tcell:task-no) pthis (== ,spn-id 1)))
           (return 0))
	 ;; --- Nestfunc End -->
	 ;; Polling for cancel message requests, cancellation flags,
	 ;; and task requests.
	 (if (or -thr->req-cncl
		 -thr->task-top->cancellation
		 -thr->req)
	     ,(tcell:with-new-bk bk-id
	        (wfn-add-argids ~(handle-reqs))))
	 ;; Loop body
         (for ((< ,var ,var2) (inc ,var))
           ,@(tcell:with-new-bk bk-id (function-body body)))
	 ;; Collect the results of spawned tasks
         (while (> (dec ,spn-id) 0)
           (= pthis (cast (ptr (struct ,(tcell:task-struct-id)))
                      (wait-rslt -thr 1)))
	   (if pthis (begin
		       ,@(function-body get-body)
		       (csym::free pthis))))
	 ;; If there is a subtask that has thrown an exception, propagate it.
	 (if (== -thr->exiting EXITING-EXCEPTION)
	     ,(wfn-add-argids ~(handle-exception -thr->exception-tag)))
	 ) )))
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; do-many*
  ;; * Space Stealing用のdo-many
  ;; * 通常のfor文と同様に記述することができる
  ;; * ポーリングはイテレーション毎に行う
  ;; !!! does not support non-local exit by "throw" yet
  (#?(do-many* (,init-exp ,cond-exp ,loop-exp)
               ,@body
               ({handles} ,id
                 (:put ,@put-body)
                 (:get ,@get-body)))
    (let ((spn-id (generate-id "spawned"))
          (bk-id (generate-id "do_many_bk")))
      (tcell:with-task id
       ~(begin
          (def pthis (ptr (struct ,(tcell:task-struct-id)))) ; 送信用 task-body
          (def ,spn-id int 0)            ; 仕事を他所にsendしている数
	  ;; <-- Nestfunc start ---
          ;; タスク要求がきたら呼ばれる
          (def (,bk-id) ,(tcell:nestfunc-type)
            (if (not ,spn-id) (,(tcell:latest-bk)))
            (if -thr->treq-top           ; タスク作成待ちスタックに要素があれば
              (begin
                (= pthis (cast (ptr (struct ,(tcell:task-struct-id)))
                         (csym::malloc (sizeof (struct ,(tcell:task-struct-id))))))
                ,@(function-body put-body)
                (inc ,spn-id)
                (csym::make-and-send-task -thr ,(tcell:task-no) pthis)))
            (return 0))
	  ;; --- Nestfunc end -->
          (for (,(expression! init-exp) ,(expression! cond-exp) ,(expression! loop-exp))
            (if -thr->req                   ; （ポーリング）タスク要求がきていたら
             ,(tcell:with-new-bk bk-id  ; 分割を試みる
                (wfn-add-argids ~(handle-req))))
            ,@(function-body body))
          (while (> (dec ,spn-id) 0)
            (= pthis (cast (ptr (struct ,(tcell:task-struct-id)))
                       (wait-rslt -thr 1)))
	    (if pthis
		(begin
		  ,@(function-body get-body)
		  (csym::free pthis))))
	  ;; If there is a subtask that has thrown an exception, propagate it.
	  (if (== -thr->exiting EXITING-EXCEPTION)
	      ,(wfn-add-argids ~(handle-exception -thr->exception-tag)))
	  ) )))
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; tcell-broadcast
  ;; * タスクを全ノードに送りつける
  ;; * 全ノードからのackを待ち合わせる
  ;; * タスクオブジェクトの初期化方法は:putで指定
  (#?(tcell-broadcast ,id (:put ,@put-body))
   (tcell:with-task id
     ~(begin
       (def pthis (ptr (struct ,(tcell:task-struct-id))))
       (= pthis 
          (cast (ptr (struct ,(tcell:task-struct-id)))
                (csym::malloc (sizeof (struct ,(tcell:task-struct-id))))))
       (begin ,@(function-body put-body))
       (csym::broadcast-task -thr ,(tcell:task-no) pthis))))
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; dynamic-wind
  ;; * do-two, do-many の（動的）スコープ内で使用
  ;; * bef-body, body, aft-body の順で実行
  ;; * body実行中に仕事の要求がきたら，aft-bodyを実行してから
  ;;   do-two, do-many の仕事分割を実行する．
  ;;   分割作業が終わったら，再び bef-bodyを実行してから自分の仕事に戻る．
  (#?(dynamic-wind
      (:before ,@bef-body)
      (:body ,@body)
      (:after ,@aft-body))
   (let* ((bk-id (generate-id "dwind_bk"))
          (b-bef-body (function-body bef-body))
          (b-body (tcell:with-new-bk bk-id (function-body body)))
          (b-aft-body (function-body aft-body)))
     ;; The local variable BACKTARCKING can be referred to
     ;; by Tascell programmers to know whether a worker is
     ;; executing/resuming from a (temporary) backtracking.
     ~(begin
       (begin
	(def BACKTRACKING (const int) 0)
	,@b-bef-body)
       (begin
        ,.(unless (ruleset-param 'no-nestfunc)
            (list
	     ;; nestfunc: execute after-body (undo), take a further
	     ;; backtracking step, then execute before-body (redo)
             ~(def (,bk-id) ,(tcell:nestfunc-type)
                (begin
		 (def BACKTRACKING (const int) 1)
		 ,@b-aft-body)
                (,(tcell:latest-bk))
                (begin
		 (def BACKTRACKING (const int) 1)
		 ,@b-bef-body)) ))
        (begin ,@b-body)
        (begin
	 (def BACKTRACKING (const int) 0)
	 ,@b-aft-body))) ))
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; throw: Common Lisp-like throw but no evaluation value (of catch)
  ;; is specified.
  (#?(throw ,exp)
   (wfn-add-argids ~(handle-exception ,(expression! exp))))
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; catch: Lisp-like catch
  (#?(catch ,exp ,@body)
   (let* ((bk-id (generate-id "catch_bk"))
	  (catchval-id (generate-id "catchval"))
	  (label-id (generate-id "catch_exit"))
	  (e-exp (expression! exp))
          (b-body (tcell:with-new-bk bk-id (function-body body))))
     ~(begin
	,.(unless (ruleset-param 'no-exception)
            (list ~(def ,label-id __label__)))
	(def ,catchval-id int)
        ,.(unless (ruleset-param 'no-nestfunc)
            (list
	     ;; nestfunc: If worker is handling an exception and
	     ;; the thrown value equals to the catch value,
	     ;; exit from the catch block. Otherwise, continue
	     ;; backtracking.
             ~(def (,bk-id) ,(tcell:nestfunc-type)
		(if (and (== -thr->exiting EXITING-EXCEPTION)
			 (== ,e-exp -thr->exception-tag))
		    (begin 
		      (= -thr->exiting EXITING-NORMAL)
		      (PROF-CODE
		       (csym::tcounter-change-state -thr TCOUNTER-EXEC OBJ-NULL 0))
                      ,(tcell:nonlocal-goto label-id)
                      )
                    (,(tcell:latest-bk))))))
	(= ,catchval-id ,e-exp)	
        (begin ,@b-body)
	(label ,label-id ())
	)))
  )

(extendrule expression tcell
  ;; dreq, data関連
  (#?(the ,texp (call (the ,ftexp setup-data) ,@exp-list))
   ~(the ,texp (call (the ,ftexp csym::-setup-data) ,@(mapcar #'expression exp-list))) )
  (#?(the ,texp (call (the ,ftexp request-data) ,@exp-list))
   ~(the ,texp (call (the ,ftexp csym::-request-data) -thr ,@(mapcar #'expression exp-list))) )
  (#?(the ,texp (call (the ,ftexp wait-data) ,@exp-list))
   ~(the ,texp (call (the ,ftexp csym::-wait-data) ,@(mapcar #'expression exp-list))) )
  (#?(the ,texp (call (the ,ftexp set-exist-flag) ,@exp-list))
   ~(the ,texp (call (the ,ftexp csym::-set-exist-flag) ,@(mapcar #'expression exp-list))) )
  ;; wfn関数呼び出し
  ;; * 引数の追加 
  (#?(the ,texp (call (the (ptr (wfn ,@texp-list)) ,exp-f) ,@exp-list))
   ~(the ,texp (call ,@(wfn-add-argids ~((the (ptr ,(type-expression! ~(wfn ,@texp-list))) ,exp-f)
                                         ,@(mapcar #'expression! exp-list))))) )
  ;; get acceptance probability
  (#?(the ,texp PROBABILITY)
   (if (tcell:wdata-accessible-p)
       ~-thr->probability
     x))
  ;; access to worker local storage
  (#?(the ,texp WDATA)
   (if (tcell:wdata-accessible-p)
       ~(mref (cast (ptr (struct worker-data)) -thr->wdptr))
       x))
  ;; get WORKER-ID
  (#?(the ,texp WORKER-ID)
   (if (tcell:wdata-accessible-p)
       ~-thr->id
       -1))
  ;; get whether propagating an exception
  (#?(the ,texp EXITING)
   (if (tcell:wdata-accessible-p)
       ~-thr->exiting
       0))
  ;; this -> (mref pthis)
  (#?(the ,texp this)
   (if (tcell:current-task)
       ~(the ,texp (mref (the (ptr ,texp) pthis)))
     x))
  )
