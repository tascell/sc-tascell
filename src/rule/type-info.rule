;;; Copyright (c) 2008 Tasuku Hiraishi <hiraisi@kuis.kyoto-u.ac.jp>
;;; All rights reserved.

;;; Redistribution and use in source and binary forms, with or without
;;; modification, are permitted provided that the following conditions
;;; are met:
;;; 1. Redistributions of source code must retain the above copyright
;;;    notice, this list of conditions and the following disclaimer.
;;; 2. Redistributions in binary form must reproduce the above copyright
;;;    notice, this list of conditions and the following disclaimer in the
;;;    documentation and/or other materials provided with the distribution.

;;; THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND
;;; ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;;; ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE
;;; FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
;;; DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
;;; OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
;;; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
;;; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
;;; OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
;;; SUCH DAMAGE.

;;; sc0 => sc0-with-type-information (the <type> <expression>)

;;; 全てのexpressionを (the <type-expression> <expression>) の形にする。
;;; 関数呼び出し式の先頭に'call'を付ける。

(define-ruleset type-info (sc0-to-sc0)
  ;; (ignore-cfunc t)                      ; csym::fn の内部を無視（関数型情報の登録はする）
  (print-flow nil))

(scr:require "TYPE-DEFS")

(defrule sc-program type-info
  ((#?(,@declaration-list) )
   (splice
    (type:with-typerule-environment
        (mapcar #'declaration declaration-list))) )
  )

;;;;;; declaration ;;;;;;
(defrule inlined-declaration type-info
  ;; variable (length of init is 0 or 1)
  ((#?(,scs[storage-class-specifier] ,id[#'atom] ,texp ,@init))
   (let ((texp-ret (type-expression texp)))
     (type:add-variable id texp-ret)
     ~(,scs ,id ,texp-ret ,@(mapcar #'initializer init)) ))
  ;; function
  (#?(,scs[storage-class-specifier] (,@id-list)
          (,fn-tag[function-tag] ,@texp-list {,va-arg[vaarg-tag]}) ,@body)
     (type:with-function (car id-list)
       (let ((texp-ret-list (nconc (mapcar #'type-expression! texp-list)
                                   (if-pattern-variable va-arg
                                       (list (get-retval va-arg)))) ))
         (type:add-variable (first id-list) ~(ptr (,fn-tag ,@texp-ret-list)))
         (type:with-new-environment
             (mapc #'type:add-variable (cdr id-list) (cdr texp-ret-list))
           ~(,scs (,@id-list) (,fn-tag ,@texp-ret-list)
                  ,@(function-body body)) ))))
  ;; struct, union
  ((#?(,dd[def-or-decl] (,soru[struct-or-union] ,id) ,@sdeclist) )
   (multiple-value-bind (member-alist sdecl-with-type)
       (type:get-struct-member-info sdeclist)
     (type:add-struct id member-alist)
     ~(,dd (,soru ,id) ,@sdecl-with-type)) )
  ;; enum
  ((#?(def (enum ,id) ,@enum-list) )
   (let ((new-enum-list ()))
     (dolist (en enum-list)
       (if (consp en)
           (progn
             (type:add-variable (car en) ~(enum ,id))
             (push (list (car en) (expression (second en)))
                   new-enum-list))
         (progn
           (type:add-variable en ~(enum ,id))
           (push en new-enum-list))))
     ~(def (enum ,id) ,@(nreverse new-enum-list))))
  ;; ; 変換でtypedef-nameは展開してしまうため，
  ;; ; deftypeそのものは削除する
  ;; deftype (struct)
  ((#?(deftype ,id struct ,@sdeclist) )
   (multiple-value-bind (member-alist sdecl-with-type)
       (type:get-struct-member-info sdeclist)
     (declare (ignorable sdecl-with-type))
     (let ((s-id (generate-id (identifier0 id :sc2c))))
       (type:add-struct s-id member-alist)
       (type:add-typename id ~(struct ,s-id))
       ~(def (struct ,s-id) ,@sdecl-with-type) )))
  ;; deftype (enum)
  ((#?(deftype ,id enum ,@enum-list) )
   (let ((new-enum-list ())
         (enumid (generate-id (identifier0 id :sc2c))))
     (dolist (en enum-list)
       (if (consp en)
           (progn
             (type:add-variable (car en) id)
             (push (list (car en) (expression (second en)))
                   new-enum-list))
         (progn
           (type:add-variable en id)
           (push en new-enum-list))))
     (type:add-typename id ~(enum ,enumid))
     ~(def (enum ,enumid) ,@(nreverse new-enum-list))))
  ;; deftype
  ((#?(deftype ,id ,texp) )
   (type:add-typename id (type-expression texp))
   ;;~(deftype ,id ,texp)
   '(splice) )
  ;; c-exp
  ((#?(c-exp ,str ,@exprs))
   ~(c-exp ,str ,@(mapcar #'expression exprs)))
  )

(defrule type-expression type-info
  ((#?,type-name[identifier])
   (type:assoc-vartype type-name :typename) )
  ((#?,ret[call-next-rule])
   (get-retval ret))
  )

;;;;;;; body ;;;;;;;
(defrule statement type-info
  ;; begin
  (#?(begin ,@body)
   (type:with-new-environment
       ~(begin ,@(function-body body)) ))
  ;; label
  (#?(label ,id ,stat)
   ~(label ,id ,(statement stat)) )
  ;; case
  (#?(case ,exp)
   ~(case ,(expression exp)) )
  ;; default
  (#?(default)
   ~(default) ) 
  ;; if
  (#?(if ,exp ,stat1 {,stat2})
   (if-pattern-variable stat2
       ~(if ,(expression exp) ,(statement stat1) ,(statement stat2))
     ~(if ,(expression exp) ,(statement stat1))) )
  ;; switch
  (#?(switch ,exp ,@body)
   (type:with-new-environment
       ~(switch ,(expression exp) ,@(function-body body))) )
  ;; do-while
  (#?(do-while ,exp ,@body)
   (type:with-new-environment
       ~(do-while ,(expression exp) ,@(function-body body))) )
  ;; goto, continue, break
  ((#?(goto ,id) #?(continue) #?(break) )
   x)
  ;; return
  (#?(return {,exp})
   (if-pattern-variable exp
       ~(return ,(expression exp))
     ~(return)) )
  ;; null statement
  (#?()
   ~() )
  ;; expression-statement
  (#?,expr[expression]
   (get-retval expr))
  )

;;;;;;; expression ;;;;;;;
;; operator
;; SC0-to-SC0の返り値
;; argsを処理するための関数
;; 式全体の型を得るための関数

(defrule int-oparator type-info
  ((#?,op[~(and or < > <= >= == !=)])
   op)
  )

(defrule expression type-info
  ;; identifier
  ((#?,id[identifier])
   ~(the ,(type-expression (type:assoc-vartype id :variable)) ,id) )
  ;; constant
  ((#?,num[#'integerp])
   ~(the int ,num) )
  ((#?,ch[sc-character])
   ~(the int ,ch) )
  ((#?,num[sc-number])
   ~(the double ,num) )
  ;; string-literal
  ((#?,str[sc-string])
   ~(the (ptr char) ,str) )
  ;; aref
  ((#?(aref ,@expr-list))
   (type:handle-exp-args
    ~aref
    (compose (compose-n (length (cdr expr-list)) #'deref-type)
             #'car)                     ; 先頭の型にderef n-1回
    expr-list))
  ;; fref
  ((#?(fref ,exp1 ,@id-list) )
   (let* ((exp1-with-type (expression! exp1))
          (exp1-type (cadr exp1-with-type))
          (ret-type exp1-type))
     (loop
         for id-rem on id-list
         do
           (cond
            ((eq 'type::undefined ret-type)
             (loop-finish))
            ((struct-or-union-specifier ret-type)
             (type:with-field-information (cadr ret-type)
               (setq ret-type
                 (type:assoc-vartype (car id-rem) :variable))))
            (t
             (ierror "~S: ~S is not struct or union"
                     x ~(fref ,exp1 ,@(ldiff id-list id-rem))))))
     ~(the ,(type-expression ret-type)
           (fref ,exp1-with-type ,@id-list))))
  ;; compound literal
  ((#?(init ,texp ,cmpd-init))
   (let ((texp-ret (type-expression! texp)))
     ~(the ,texp-ret (init ,texp-ret ,(initializer! cmpd-init))) ))
  ;; inc, dec, ++, --, bit-not
  ((#?(,op[~(inc dec ++ -- bit-not)] ,exp) )
   (type:handle-exp-1arg op #'identity exp))
  ;; ptr
  ((#?(ptr ,exp))
   (type:handle-exp-1arg ~ptr (tagger ~ptr) exp))
  ;; mref
  ((#?(mref ,exp))
   (type:handle-exp-1arg ~mref #'deref-type exp))
  ;; not
  ((#?(not ,exp))
   (type:handle-exp-1arg ~not (const-f ~int) exp))
  ;; sizeof
  (#?(sizeof ,id[identifier])
   (multiple-value-bind (datum kind) (type:assoc-vartype id)
     ~(the int (sizeof ,(if (eq :typename kind)
                            (type-expression! id)
                          ~(the ,(type-expression datum) ,id))))) )
  (#?(sizeof ,texp[type-expression])
   ~(the int (sizeof ,(get-retval texp))) )
  (#?(sizeof ,exp[expression])
   (type:handle-exp-1arg ~sizeof (const-f ~int) exp))
  ;; cast
  ((#?(cast ,texp ,exp))
   (let ((texp-ret (type-expression! texp)))
     ~(the ,texp-ret (cast ,texp-ret ,(expression! exp))) ))
  ;; if-exp
  ((#?(if-exp ,exp1 ,exp2 ,exp3))
   (type:handle-exp-args 
    ~if-exp
    #'(lambda (type-list)
        (apply #'type-conversion (cdr type-list)))
    (list exp1 exp2 exp3)))
  ;; apply type conversion
  ((#?(,op[arithmetic-operator] ,@expr-list)
    #?(,op[bitwise-operator] ,@expr-list))
   (type:handle-exp-args
    op
    #'(lambda (type-list)
        (if (endp type-list)
            ~int
          (reduce #'type-conversion type-list)))
    expr-list))
  ;; lefthand type
  ((#?(,op[bitwise-shift-operator] ,@expr-list)
    #?(,op[assignment-operator] ,@expr-list))
   (assert expr-list)
   (type:handle-exp-args
    op #'car expr-list))
  ;; righthand type
  ((#?(,op[comma-operator] ,@expr-list))
   (assert expr-list)
   (type:handle-exp-args
    op (compose #'car #'last) expr-list))
  ;; int
  ((#?(,op[logical-operator] ,@expr-list)
    #?(,op[comparator] ,@expr-list))
   (type:handle-exp-args
    op (const-f ~int) expr-list))
  ;; c-exp
  ((#?(c-exp ,str ,@exp-list))
   ~(c-exp ,str ,@(mapcar #'expression! exp-list)) )
  ;; function-call
  ((#?(,fexp[expression] ,@arg-list))
   (let* ((fexp-with-type (get-retval fexp))
          (fexp-type (cadr fexp-with-type))
          (fn-type nil))
     (if-match #?(ptr (,fn-tag[function-tag] ,ret-type ,@arg-types))
               fexp-type
               (setq fn-type fexp-type)
       (let ((kari-type ~(ptr (csym::fn int va-arg))))
         (unless (eq 'type::undefined fexp-type)
           (iwarn "~S is not declared as a function.~%~
                   ~AAssume its type as ~S."
                  fexp *error-indent-spaces* kari-type))
         (setq fn-type kari-type)))
     ;; 関数呼出フロー表示
     (when (ruleset-param 'print-flow)
       (unless (type:already-printed fexp)
         (type:add-flow-printed fexp)
         (iformat "-> ~S~%" fexp)))
     ;; これが変換結果
     ~(the ,(type-expression (second (second fn-type)))
           (call (the ,(type-expression fn-type) ,(third fexp-with-type))
                 ,@(mapcar #'expression! arg-list))) ))
  ;;
  )

;;; dereferencing (ex. (ptr int) => int )
(defrule deref-type type-info
  (#?type::undefined
   x)
  (#?(array ,texp ,@size-nums)
   (aif (cdr size-nums)
       ~(array ,texp ,@it)
     texp))
  (#?(ptr (,fntag[function-tag] ,@rest))
   x)
  (#?(ptr ,texp)
   texp)
  (otherwise
   (iwarn "~S is not reference type." x)
   'type::undefined)
  )
