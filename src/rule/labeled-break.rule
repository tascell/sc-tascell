;;; Copyright (c) 2008 Tasuku Hiraishi <hiraisi@kuis.kyoto-u.ac.jp>
;;; All rights reserved.

;;; Redistribution and use in source and binary forms, with or without
;;; modification, are permitted provided that the following conditions
;;; are met:
;;; 1. Redistributions of source code must retain the above copyright
;;;    notice, this list of conditions and the following disclaimer.
;;; 2. Redistributions in binary form must reproduce the above copyright
;;;    notice, this list of conditions and the following disclaimer in the
;;;    documentation and/or other materials provided with the distribution.

;;; THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND
;;; ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;;; ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE
;;; FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
;;; DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
;;; OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
;;; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
;;; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
;;; OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
;;; SUCH DAMAGE.

;;;;; Javaとかで使うlabelつきbreak,continueをSCでも使用できるようにする．
;;; *label-list* = list of (<do-while等についたラベル>
;;;                         <continue用のgoto先ラベル>
;;;                         <break用のgoto先ラベル>) 

(defvar *label-list*)

(define-ruleset labeled-break (sc2c))

(defrule sc-program labeled-break
  ((#?(,@declaration-list))
   (let ((*label-list* '()))
     (iter declaration-list)))
  )

(defrule iter labeled-break
  ((#?(label ,id[identifier] (do-while ,exp ,@body))
    #?(label ,id[identifier] (switch ,exp ,@body)))
   (let* ((ids (identifier! id))
          (*label-list*
           (cons ~(,id
                   ,(generate-id ids)
                   ,(generate-id ids))
                 *label-list*)))
     ~(begin (label ,id
              (,(car (third x)) ,exp ,@(iter body)
               (label ,(second (first *label-list*)) nil)))
       (label ,(third (first *label-list*)) nil))) )
  ((#?(continue ,id[identifier])
    #?(break ,id[identifier]))
   (let ((label-tuple 
          (car (member (identifier! id) *label-list*
                       :key #'(lambda (x) (identifier! (first x)))
                       :test #'string=))))
     (unless label-tuple
       (error "label ~s is undefined." id))
     ~(goto ,(funcall
              (case (car x)
                ((sc::continue) #'second)
                ((sc::break) #'third))
              label-tuple))) )
  ((#?(,@list))
   (mapcar #'iter list))
  (otherwise
   x)
  )
