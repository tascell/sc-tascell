;;; Copyright (c) 2008 Tasuku Hiraishi <hiraisi@kuis.kyoto-u.ac.jp>
;;; All rights reserved.

;;; Redistribution and use in source and binary forms, with or without
;;; modification, are permitted provided that the following conditions
;;; are met:
;;; 1. Redistributions of source code must retain the above copyright
;;;    notice, this list of conditions and the following disclaimer.
;;; 2. Redistributions in binary form must reproduce the above copyright
;;;    notice, this list of conditions and the following disclaimer in the
;;;    documentation and/or other materials provided with the distribution.

;;; THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND
;;; ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;;; ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE
;;; FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
;;; DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
;;; OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
;;; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
;;; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
;;; OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
;;; SUCH DAMAGE.

;;;; SC0-to-SC0 (identity transformation)
(require-ruleset :sc2c)

(define-ruleset sc0-to-sc0 ()
  (entry 'sc-program)
  (default-handler #'return-no-match))

(defvar *typename-list*)

(defrule sc-program sc0-to-sc0
  ((#?(,@list))
   (let ((*typename-list* '()) )
     (translation-unit list)))
  )

(defrule translation-unit sc0-to-sc0
  ((#?(,@ext-decl-list))
   (mapcar #'external-declaration ext-decl-list)))

(defrule external-declaration sc0-to-sc0
  ((#?,decl[declaration])
   (get-retval decl))
  ((#?,cexp[c-expression])
   (get-retval cexp)))

;;;; 2.Declarations
;;; declaration
(defrule declaration sc0-to-sc0
  ((#?,i-decl[inlined-declaration] )
   (get-retval i-decl))
  )

;;; inlined-declaration
(defrule inlined-declaration sc0-to-sc0
  ;; variable definitions/declarations
  ((#?(,scs[storage-class-specifier] ,id[identifier] ,texp {,init}))
   ~(,(get-retval scs)
     ,(get-retval id) ,(type-expression! texp)
     ,@(if-pattern-variable init (list (initializer! init)))))
  ;; function definitions/declarations
  ((#?(,scs[storage-class-specifier]
       ,func-id[function-identifier]
       (,fn-tag[function-tag] ,texp ,@texp-list {,va-arg[vaarg-tag]} )
       ,@fbody)
    )
   ~(,(get-retval scs) ,(get-retval func-id)
                       (,(get-retval fn-tag) ,(type-expression! texp)
                                             ,.(mapcar #'type-expression! texp-list)
                                             ,.(if-pattern-variable va-arg
                                                 (list (get-retval va-arg))))
                       ,@(function-body! fbody))
   )
  ;; struct/union definitions/declarations
  ((#?(,dd[def-or-decl] ,su-spec[struct-or-union-specifier] ,@sdcl-list))
   ~(,(get-retval dd)
     ,(get-retval su-spec)
     ,@(mapcar #'struct-declaration sdcl-list)))
  ;; enum definitions
  ((#?(def ,espec[enum-specifier] ,@en-list))
   ~(def ,(get-retval espec)
         ,@(mapcar #'enumerator en-list)))
  ;; deftype (struct)
  ((#?(,dt-tag[deftype-tag] ,id ,su[struct-or-union] ,@sdcl-list))
   (push id *typename-list*)
   ~(,(get-retval dt-tag) 
     ,(identifier id) ,(get-retval su)
     ,@(mapcar #'struct-declaration sdcl-list)))
  ;; deftype (enum)
  ((#?(,dt-tag[deftype-tag] ,id enum ,@en-list))
   (push (get-retval id) *typename-list*)
   ~(,(get-retval dt-tag)
     ,(identifier id) enum ,@(mapcar #'enumerator en-list)))
  ;; deftype
  ((#?(,dt-tag[deftype-tag] ,id ,texp))
   (push id *typename-list*) 
   ~(,(get-retval dt-tag) ,(identifier! id) ,(type-expression! texp)))
  )

(defrule function-body sc0-to-sc0
  ((#?({:attr ,f-attr} { ,r-decl[register-declarator] } ,@bi-list))
   ~(,.(if-pattern-variable f-attr (list :attr (function-attribute f-attr)))
       ,.(if-pattern-variable r-decl (list (get-retval r-decl)))
       ,@(mapcar #'block-item bi-list))))

(defrule function-attribute sc0-to-sc0
  ((#?inline)   x)
  )

(defrule register-declarator sc0-to-sc0
  ((#?(,reg[register-tag] ,@id-list))
   ~(,(get-retval reg) ,@(mapcar #'identifier id-list)))
  )

(defrule register-tag sc0-to-sc0
  ((#?register) x)
  )

;; funcion-identifier
(defrule function-identifier sc0-to-sc0
  ((#?,id[identifier])
   (list (get-retval id)))
  ((#?(,@id-list[identifier]))
   (get-retval id-list))
  )

;; init-declarator
(defrule init-declarator sc0-to-sc0
  ((#?,id[identifier])
   (list id))
  ((#?(,id[identifier] ,init))
   (list id init))
  )

(defrule declaration-tag sc0-to-sc0
  ((#?,tag[storage-class-specifier]
    #?,tag[deftype-tag])
   (get-retval tag))
  )

(defrule deftype-tag sc0-to-sc0
  ((#?deftype)       x)
  )

;; def-or-decl
(defrule def-or-decl sc0-to-sc0
  ((#?def)   x)
  ((#?decl)  x)
  )

;; storage-class-specifier
(defrule storage-class-specifier sc0-to-sc0
  ((#?,dd[def-or-decl])        (get-retval dd))
  ((#?extern #?extern-def)     x)
  ((#?extern-decl)             x)
  ((#?static #?static-def)     x)
  ((#?auto #?auto-def)         x)
  ((#?register #?register-def) x)
  )

;; struct-declaration
(defrule struct-declaration sc0-to-sc0
  ((#?,decl[declaration]) (get-retval decl))
  ((#?:bit)               x)
  ((#?,exp[expression])    (get-retval exp))
  )

;; enumerator
(defrule enumerator sc0-to-sc0
  ((#?,en-const[enumeration-constant])
   (get-retval en-const))
  ((#?(,en-const[enumeration-constant] ,exp))
   ~(,(get-retval en-const) ,(expression! exp)))
  )

;; enumeration-constant
(defrule enumeration-constant sc0-to-sc0
  ((#?,id[identifier])
   (get-retval id))
  )

;; designator
(defrule designator sc0-to-sc0
  ((#?(aref-this ,@exp-list))
   ~(aref-this ,@(mapcar #'expression! exp-list)))
  ((#?(fref-this ,@id-list))
   ~(fref-this ,@(mapcar #'identifier! id-list)))
  ((#?(aref ,desig ,@exp-list))
   ~(aref ,(designator! desig) ,@(mapcar #'expression! exp-list)))
  ((#?(fref ,desig ,@id-list))
   ~(fref ,(designator! desig) ,@(mapcar #'identifier! id-list)))
  )

(defrule designator-tag sc0-to-sc0
  ((#?aref-this #?fref-this #?aref #?fref) x)
  )

;; designated-initializer
(defrule designated-initializer sc0-to-sc0
  ((#?(,desig[designator] ,init))
   ~(,(get-retval desig) ,(initializer init)))
  ((#?,init[initializer])
   (get-retval init))
  )

;; compound-initializer
(defrule compound-initializer sc0-to-sc0
  ((#?(array ,@init-list[designated-initializer])
    #?(struct ,@init-list[designated-initializer]))
   ~(,(car x)
     ,@(mapcar #'designated-initializer init-list)))
  )

;; initializer
(defrule initializer sc0-to-sc0
  ((#?,cmp-init[compound-initializer])
   (get-retval cmp-init))
  ((#?,exp[expression])
   (get-retval exp))
  )

;;;; 3.Type-expressions
(defrule type-expression sc0-to-sc0
  ((#?,tspec[type-specifier])
   (get-retval tspec))
  ((#?(,ar-tag[array-tag] ,texp ,@exp-list))
   ~(,(get-retval ar-tag) ,(type-expression! texp)
     ,@(mapcar #'expression! exp-list)))
  ((#?(,ptr-tag[pointer-tag] ,texp))
   ~(,(get-retval ptr-tag) ,(type-expression! texp)))
  ((#?(,fn-tag[function-tag] ,texp1 ,@texp-list {,va-arg[vaarg-tag]}))
   ~(,(get-retval fn-tag) ,(type-expression! texp1)
     ,.(mapcar #'type-expression! texp-list)
     ,@(if-pattern-variable va-arg (list (get-retval va-arg))))
   )
  ((#?(,@tq-list[type-qualifier] ,texp))
   ~(,@(get-retval tq-list) ,(type-expression! texp)))
  )

(defrule array-tag sc0-to-sc0
  ((#?array) x)
  )

(defrule pointer-tag sc0-to-sc0
  ((#?ptr) x)
  )

(defrule function-tag sc0-to-sc0
  ((#?fn #?csym::fn) x)
  )

(defrule vaarg-tag sc0-to-sc0
  ((#?va-arg) x)
  )

(defrule type-specifier sc0-to-sc0
  ((#?,tspc[build-in-type]
    #?,tspc[struct-or-union-specifier]
    #?,tspc[enum-specifier]
    #?,tspc[typedef-name])
   (get-retval tspc))
  )

(defrule build-in-type sc0-to-sc0
  (#?,texp[~(void char signed-char unsigned-char
                  short signed-short unsigned-short
                  int signed-int unsigned-int
                  long signed-long unsigned-long
                  long-long signed-long-long unsigned-long-long
                  float double long-double)]
          x)
  )

(defrule struct-or-union-specifier sc0-to-sc0
  ((#?(,s-u[struct-or-union] ,id))
   ~(,(get-retval s-u) ,(identifier id)))
  )

(defrule struct-or-union sc0-to-sc0
  (#?,su[~(struct union)]
   x)
  )

(defrule enum-specifier sc0-to-sc0
  ((#?(,en[enum-tag] ,id))
   ~(,(get-retval en) ,(identifier id)))
  )

(defrule enum-tag sc0-to-sc0
  ((#?enum) x)
  )

(defrule type-qualifier sc0-to-sc0
  (#?,qf[~(const restrict volatile)]
   x)
  )

(defrule typedef-name sc0-to-sc0
  ((#?,id[identifier])
   (get-retval id))
  )

;;;; 4.Statements
(defrule block-item sc0-to-sc0
  ((#?,bi[inlined-declaration]
    #?,bi[statement])
   (get-retval bi))
  )

(defrule statement sc0-to-sc0
  ((#?,stat[compound-statement]
    #?,stat[selection-statement]
    #?,stat[iteration-statement]
    #?,stat[jump-statement]
    #?,stat[labeled-statement]
    #?,stat[expression-statement])
   (get-retval stat))
  (#?()
     ~())
  )

(defrule compound-statement sc0-to-sc0
  (#?(begin ,@bi-list)
   ~(begin ,@(function-body! bi-list)))
  )

(defrule labeled-statement sc0-to-sc0
  ((#?(label ,id ,stat))
   ~(label ,(identifier id) ,(statement! stat)))
  ((#?(case ,exp))
   ~(case ,(expression! exp)))
  ((#?(default))
   ~(default))
  )

(defrule expression-statement sc0-to-sc0
  ((#?,exp-stat[expression])
   (get-retval exp-stat))
  )

(defrule selection-statement sc0-to-sc0
  ((#?(if ,exp ,stat1 {,stat2}))
   ~(if ,(expression! exp)
        ,(statement! stat1)
        ,@(if-pattern-variable stat2
              (list (statement! stat2))))
   )
  ((#?(switch ,exp ,@bi-list))
   ~(switch ,(expression! exp)
            ,@(mapcar #'block-item! bi-list)))
  )

(defrule iteration-statement sc0-to-sc0
  (#?(do-while ,exp ,@bi-list)
   (let ((exp-ret (expression! exp))
         (bis-ret (function-body! bi-list)))
     ~(do-while ,exp-ret ,@bis-ret)) )
  )

(defrule jump-statement sc0-to-sc0
  ((#?(goto ,id[identifier]))
   ~(goto ,(get-retval id)))
  ((#?(continue))   x)
  ((#?(break))      x)
  ((#?(return { ,exp[expression] }))
   ~(return ,@(if-pattern-variable exp
                  (list (get-retval exp)))) )
  )

;;; statement tag
(defrule statement-tag sc0-to-sc0
  ((#?,tag[labeled-statement-tag]
    #?,tag[compound-statement-tag]
    #?,tag[selection-statement-tag]
    #?,tag[iteration-statement-tag]
    #?,tag[jump-statement-tag])
   (get-retval tag))
  )

(defrule labeled-statement-tag sc0-to-sc0
  (#?,stag[~(label case default)]
   x)
  )

(defrule compound-statement-tag sc0-to-sc0
  ((#?begin)        x)
  )

(defrule selection-statement-tag sc0-to-sc0
  (#?,stag[~(if switch)]
   x)
  )

;;; 返り値は今のところ意味なし
(defrule iteration-statement-tag sc0-to-sc0
  ((#?do-while)     x)
  )

(defrule jump-statement-tag sc0-to-sc0
  (#?,stag[~(goto continue break return)]
   x)
  )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;; 5.Expressions

(defrule expression sc0-to-sc0
  ;; number, character, string-literal
  ((#?,id[identifier])
   (get-retval id))
  ((#?,num[sc-number])
   (get-retval num))
  ((#?,char[sc-character])
   (get-retval char))
  ((#?,str[sc-string])
   (get-retval str))
  ;; compound-literal
  ((#?(init ,texp ,cmp-init))
   ~(init ,(type-expression! texp)
          ,(compound-initializer! cmp-init)))
  ;; aref
  ((#?(aref ,exp1 ,@exp-list))
   ~(aref ,(expression! exp1)
          ,@(mapcar #'expression! exp-list)))
  ;; fref
  ((#?(fref ,exp ,@fi-list))
   ~(fref ,(expression! exp)
	  ,@(mapcar #'identifier! fi-list)))
  ;; inc,dec
  ((#?(inc ,exp)
    #?(dec ,exp))
   ~(,(car x) ,(expression! exp)))
  ;; unary-operator
  (#?(sizeof ,texp[type-expression])
   ~(,(car x) ,(get-retval texp)))
  ((#?(,uop[unary-operator] ,exp))  ; includes 'sizeof'
   ~(,(get-retval uop) ,(expression! exp)))
  ((#?(+ ,exp)
    #?(- ,exp)
    #?(/ ,exp))
   ~(,(car x) ,(expression! exp)))
  ;; cast
  ((#?(cast ,texp ,exp))
   ~(cast ,(type-expression! texp) ,(expression! exp)))
  ;; operator
  ((#?(,op[binary-operator] ,@exp-list))
   ~(,(get-retval op) ,@(mapcar #'expression! exp-list)))
  ;; comparator
  ((#?(,comp[comparator] ,exp1 ,exp2))
   ~(,(get-retval comp) ,@(mapcar #'expression! (list exp1 exp2))))
  ;; if-exp
  ((#?(if-exp ,exp1 ,exp2 ,exp3))
   ~(if-exp ,@(mapcar #'expression! (list exp1 exp2 exp3))))
  ;; assignment-operator
  ((#?(,as-op[assignment-operator] ,exp1 ,exp2))
   ~(,(get-retval as-op) ,@(mapcar #'expression! (list exp1 exp2))))
  ;; exps
  ((#?(exps ,@exp-list))
   ~(exps ,@(mapcar #'expression! exp-list)))
  ;;  C-expression
  ((#?,cexp[c-expression])
   (get-retval cexp) )
  ;; funcion-call
  ((#?(,fexp[expression] ,@exp-list))
   ~(,(get-retval fexp) ,@(mapcar #'expression! exp-list)))   
  )

(defrule sc-number sc0-to-sc0
  ((#?,num[#'floatp]
    #?,num[#'integerp])  x)
  )

(defrule sc-character sc0-to-sc0
  ((#?,ch[#'sc2c:char-sc2c])  x)
  )

(defrule sc-string sc0-to-sc0
  ((#?,str[#'sc2c:string-sc2c])  x)
  )

;; utility
(defrule sc-string-length sc0-to-sc0
  (#?,str[sc-string]
   (length (sc2c:sc-format str))))

;;; operator
(defrule operator sc0-to-sc0
  ((#?,op[postfix-operator]
    #?,op[unary-operator]
    #?,op[binary-operator]
    #?,op[cast-operator]
    #?,op[comparator]
    #?,op[conditional-operator]
    #?,op[assignment-operator]
    #?,op[comma-operator]
    #?,op[cexp-operator])
   (get-retval op))
  )

(defrule binary-operator sc0-to-sc0
  ((#?,op[arithmetic-operator]
    #?,op[bitwise-shift-operator]
    #?,op[bitwise-operator]
    #?,op[logical-operator])
   (get-retval op))
  )

(defrule postfix-operator sc0-to-sc0
  (#?,op[~(fref aref inc dec init)] ; init: compound literal
   x)
  )

(defrule unary-operator sc0-to-sc0  
  (#?,op[~(++ -- ptr mref + - bit-not not sizeof)]
   x)
  )

(defrule cast-operator sc0-to-sc0
  ((#?cast)    x)
  )

(defrule arithmetic-operator sc0-to-sc0
  ((#?,op[multiplicative-operator]
    #?,op[additive-operator])
   (get-retval op))
  )

(defrule multiplicative-operator sc0-to-sc0
  (#?,op[~(* / %)]
   x)
  )

(defrule additive-operator sc0-to-sc0
  (#?,op[~(+ - )]
   x)
  )

(defrule bitwise-shift-operator sc0-to-sc0
  (#?,op[~(<< >>)]
   x)
  )

(defrule comparator sc0-to-sc0
  (#?,op[~(< > <= >= == !=)]
   x)
  )

(defrule bitwise-operator sc0-to-sc0
  (#?,op[~(bit-and bit-xor bit-or)]
   x)
  )

(defrule logical-operator sc0-to-sc0
  (#?,op[~(and or)]
   x)
  )

(defrule conditional-operator sc0-to-sc0
  ((#?if-exp)  x)
  )

(defrule assignment-operator sc0-to-sc0
  (#?,op[~(= *= /= %= += -= <<= >>= bit-and= bit-xor= bit-or=)]
   x)
  )

(defrule comma-operator sc0-to-sc0
  ((#?exps)   x)
  )

(defrule cexp-operator sc0-to-sc0
  ((#?c-exp)   x)
  )

;; field-identifier
(defrule field-identifier sc0-to-sc0
  ((#?,id[identifier])
   (get-retval id) )
  )

;; identifier
(defrule identifier sc0-to-sc0
  ((#?,id[#'(lambda (x)
              (and (symbolp x)
                   (not (sc-keyword? x))))])
   (identifier0 id)) )

;; keywordでないチェックを省きたいときはこちら
(defrule identifier0 sc0-to-sc0
  ((#?,id[#'sc2c:identifier-sc2c])
   id)
  )

(defrule (sc-keyword :memoize) sc0-to-sc0
  ((#?,sym[function-tag]
    #?,sym[function-attribute]
    #?,sym[vaarg-tag]
    #?,sym[deftype-tag]
    #?,sym[enum-tag]
    #?,sym[struct-or-union]
    #?,sym[array-tag]
    #?,sym[pointer-tag]
    #?,sym[storage-class-specifier]
    #?,sym[build-in-type]
    #?,sym[type-qualifier]
    #?,sym[statement-tag]
    #?,sym[designator-tag]
    #?,sym[operator])
   (get-retval sym))
  )

;;;; 6.C-expressions
(defrule c-expression sc0-to-sc0
  ((#?(,c-op[cexp-operator] ,str ,@exp-list))
   ~(,(get-retval c-op) ,str ,@(mapcar #'expression! exp-list)))
  )
