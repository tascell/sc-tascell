;;; Copyright (c) 2008 Tasuku Hiraishi <hiraisi@kuis.kyoto-u.ac.jp>
;;; All rights reserved.

;;; Redistribution and use in source and binary forms, with or without
;;; modification, are permitted provided that the following conditions
;;; are met:
;;; 1. Redistributions of source code must retain the above copyright
;;;    notice, this list of conditions and the following disclaimer.
;;; 2. Redistributions in binary form must reproduce the above copyright
;;;    notice, this list of conditions and the following disclaimer in the
;;;    documentation and/or other materials provided with the distribution.

;;; THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND
;;; ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;;; ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE
;;; FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
;;; DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
;;; OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
;;; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
;;; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
;;; OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
;;; SUCH DAMAGE.

;;; Translates SC-0/1 code with nested functions into XC-Cube
;;; (C with closure or lightweight nested functions)

(define-ruleset sxcc2c (sc2c)
  (closure-keyword "lightweight"))      ; "lightweight" or "closure"

(extendrule function-tag sxcc2c
            (#?lightweight x))


(extendrule inlined-declaration sxcc2c
            ((#?(,scs[storage-class-specifier] ; almost copy from sc2c.rule
                 ,func-id[function-identifier]
                 (lightweight ,texp[type-expression] ,@texp-list[type-expression]
                              { ,va-arg[vaarg-tag] } )
                 { :attr ,f-attr[function-attribute] }
                 { ,r-decl[register-declarator] }
                 ,@bi-list[block-item]))
             (let ((scs-retval (multiple-value-list (get-retval scs)))
                   (fid-str (car (get-retval func-id)))
                   (texp-fun (get-retval texp))
                   (arg-list (combine-each-nth ; list of (<texp> "<id>")
                              (list 
                               (get-retval texp-list)
                               (cdr (get-retval func-id)))
                              :n (max (length texp-list) 
                                      (length (cdr (get-retval func-id))))))
                   (inline-str  (if-pattern-variable f-attr
                                    (list (get-retval f-attr) " ")
                                  ""))
                   (register-list (if-pattern-variable r-decl
                                      (get-retval r-decl)
                                    nil))
                   (vaarg-str (if-pattern-variable va-arg
                                  ", ..."
                                "")))
               (let ((scs-str (first scs-retval))
                     (arg-str 
                      (list
                       (separate-list (mapcar 
                                       #'(lambda (xx)
                                           (list
                                            (if (member (second xx) register-list
                                                        :test #'string=)
                                                "register "
                                              "")
                                            (if (first xx)
                                                (funcall (first xx)
                                                         (if (second xx) (second xx) ""))
                                              (second xx))))
                                       arg-list)
                                      ", ")
                       vaarg-str))      
                     (body-str (if (and (eq 'decl (second scs-retval))
                                        (null bi-list))
                                   ";"
                                 (list #\Newline "{" #\Newline 
                                       (get-retval bi-list)
                                       "}"))))
                 (list #\Newline
                       inline-str scs-str " "
                       (funcall texp-fun
                                (list fid-str " "
                                      (ruleset-param 'closure-keyword) ;addition
                                      " (" arg-str ")"))
                       body-str
                       #\Newline
                       )))
             ))

(extendrule type-expression sxcc2c
            ;; almost copy from sc2c.rule
            (#?(lightweight ,texp1[type-expression] ,@texp-list[type-expression]
                            {,va-arg[vaarg-tag]})
               (let ((retval-texp1 (multiple-value-list (get-retval texp1)))
                     (assoc 1))
                 (values
                  #'(lambda (cid)
                      (funcall
                       (first retval-texp1)
                       (sc2c:parenthesize-t (list cid " "
                                                  (ruleset-param 'closure-keyword) ; addition
                                                  " ( "
                                                  ;; 引数リスト
                                                  (separate-list (mapcar #'(lambda (xx)
                                                                             (funcall xx ""))
                                                                         (get-retval texp-list))
                                                                 ", ")
                                                  ;; "..."
                                                  (if-pattern-variable va-arg
                                                      (list ", " (get-retval va-arg))
                                                    "")
                                                  " )")
                                            (second retval-texp1)
                                            assoc)))
                  assoc)))
            )
