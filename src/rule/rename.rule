;;; Copyright (c) 2008-2018 Tasuku Hiraishi <tasuku@media.kyoto-u.ac.jp>
;;; All rights reserved.

;;; Redistribution and use in source and binary forms, with or without
;;; modification, are permitted provided that the following conditions
;;; are met:
;;; 1. Redistributions of source code must retain the above copyright
;;;    notice, this list of conditions and the following disclaimer.
;;; 2. Redistributions in binary form must reproduce the above copyright
;;;    notice, this list of conditions and the following disclaimer in the
;;;    documentation and/or other materials provided with the distribution.

;;; THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND
;;; ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;;; ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE
;;; FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
;;; DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
;;; OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
;;; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
;;; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
;;; OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
;;; SUCH DAMAGE.

;;;; sc0 => sc0
;;;; Replaces local variables' (parameters') name such that each name is unique in a funciton.
(define-ruleset rename (sc0-to-sc0))

(scr:require "RENAME-DEFS")

(defrule sc-program rename
  ((#?(,@declaration-list) )
   (ren:with-rename-environment
       (mapcar #'declaration declaration-list)))
  )

;;;;;; declaration ;;;;;;
(defrule declaration rename
  ;;variable (length of init is probably 1)
  ((#?(,scs[storage-class-specifier] ,id[identifier] ,texp ,@init) )
   (let ((id-repl (ren:bind-id id)))
     ~(,scs ,id-repl ,texp ,@(ren:repl-id init))) )
  ;;function
  ((#?(,scs[storage-class-specifier]
           (,@id-list[identifier]) (,fntag[function-tag] ,@texp-list) ,@body))
   (let ((funcid-repl (ren:bind-id (car id-list))))
     (ren:begin-function
      (let* ((arg-list-repl (ren:bind-id (cdr id-list)))
             (body-repl (function-body body)))
        ~(,scs (,funcid-repl ,@arg-list-repl) (,fntag ,@texp-list)
               ,@body-repl)))) )
  ;;struct, union
  ((#?(,dd[def-or-decl] (,soru[struct-or-union] ,id[identifier]) ,@sdeclist) )
   (let ((id-repl (ren:bind-id id)))
     ~(,dd (,soru ,id-repl) ,@sdeclist)) )
  ;;enum
  ((#?(def (enum ,id[identifier]) ,@enum-list) )
   (let ((id-repl (ren:bind-id id))
         (enum-list-repl
          (mapcar #'(lambda (en)
                      (if (listp en)
                          (cons (ren:bind-id (car en)) (cdr en))
                        (ren:bind-id en)))
                  enum-list)))
     ~(def (enum ,id-repl) ,@enum-list-repl)) )
  ;;deftype (struct)
  ((#?(deftype ,id[identifier] struct ,@sdecllist) )
   (let ((id-repl (ren:bind-id id)))
     ~(deftype ,id-repl struct ,@sdecllist)) )
  ;;deftype (enum)
  ((#?(deftype ,id[identifier] enum ,@enum-list) )
   (let ((id-repl (ren:bind-id id))
         (enum-list-repl
          (mapcar #'(lambda (en)
                      (if (listp en)
                          (cons (ren:bind-id (car en)) (cdr en))
                        (ren:bind-id en)))
                  enum-list)))
     ~(deftype ,id-repl enum ,@enum-list-repl)) )
  ;;deftype
  ((#?(deftype ,id[identifier] ,texp) )
   (let ((id-repl (ren:bind-id id)))
     ~(deftype ,id-repl ,texp)))
  ;;c-exp
  ((#?(c-exp ,@rem))
   ~(c-exp ,@rem))
  ;;
  (otherwise nil)
  )

;;;;;;; body + alpha ;;;;;;
(defrule function-body rename
  ;; function-attribute & register-decl
  ((#?(:attr ,atr   ,@body) )
   ~(:attr ,atr ,@(function-body body)) )
  ((#?((register ,@regarg)   ,@body) )
   ~((register ,@(ren:repl-id regarg)) ,@(function-body body)) )
  ((#?(,@body))
   (mapcar #'block-item body) ))

(defrule block-item rename
  ;;begin
  ((#?(begin ,@body) )
   (ren:inc-block-level
    ~(begin ,@(function-body body))) )
  ;;label
  ((#?(label ,id ,stat) )
   ~(label ,id ,(block-item stat)) )
  ;;case
  ((#?(case ,exp) )
   ~(case ,(ren:repl-id exp)) )
  ;;default
  ((#?(default) )
   ~(default) )
  ;;if
  ((#?(if ,exp ,stat1 {,stat2}) )
   (if-pattern-variable stat2
       ~(if ,(ren:repl-id exp) ,(block-item stat1) ,(block-item stat2))
     ~(if ,(ren:repl-id exp) ,(block-item stat1))) )
  ;;switch
  ((#?(switch ,exp ,@body) )
   ~(switch ,(ren:repl-id exp)
            ,@(ren:inc-block-level (function-body body))) )
  ;;do-while
  ((#?(do-while ,exp ,@body) )
   ~(do-while ,(ren:repl-id exp)
              ,@(ren:inc-block-level (function-body body))) )
  ;;goto, continue, break
  ((#?(goto ,id) #?(continue) #?(break) )
   x)
  ;;return
  ((#?(return {,exp}) )
   (if-pattern-variable exp
       ~(return ,(ren:repl-id exp))
     ~(return) ) )
  ;; null-statement
  ((#?() )
   ~() )
  ;; c-expression
  ((#?(c-exp ,str ,@exp-list) )
   ~(c-exp ,str ,@(mapcar #'ren:repl-id exp-list)) )
  ;; expression-statement or declaration
  (otherwise
   (aif (declaration x)
       it
     (ren:repl-id x)) )
  )
