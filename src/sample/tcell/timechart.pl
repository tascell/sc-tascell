#/bin/env perl

# Plot a timechart grah from timechart log files generated by Tascell worker
# with the -T option. Employs gnuplot.

# Usage: perl timechart.pl <prefix> [-k]
# --> Read all <prefix>-<nnnn>.dat files. <nnnn> is a worker id (0000-9999).
#     EPS file <prefix>.eps is generated.
#     When -k option is given, keep all plot files and a gnuplot script after execution.

use strict;
use File::Temp qw/tempfile tempdir/;

### Set parameters
# Prefix of input/output files.
my $prefix=$ARGV[0];
if ($prefix eq '') {
    print "Usage: perl timechart.pl <prefix> [-k]\n";
    exit 99;
}

# Keep plot files and gnuplot script? (-k option)
my $keep_files = 0;
if ($ARGV[1] eq '-k') {
    print "Keep-file option is enabled.\n";
    $keep_files = 1;
}

# States (equivalent to tcounter-strings in worker.sh)
my @Tcounter=("TCOUNTER-INIT","TCOUNTER-EXEC","TCOUNTER-SPWN",
	      "TCOUNTER-WAIT","TCOUNTER-EXCP","TCOUNTER-EXCP-WAIT",
	      "TCOUNTER-ABRT","TCOUNTER-ABRT-WAIT",
	      "TCOUNTER-TREQ-BK","TCOUNTER-TREQ-ANY");
# Plot file name for each state.
my %Plot_file = ();
# Whether there is any plot data for each state?
my %Valid = ();
# Color for each state.
my %Color = ();
$Color{'TCOUNTER-INIT'} = '"black"';
$Color{'TCOUNTER-EXEC'} = '"green"';
$Color{'TCOUNTER-SPWN'} = '"magenta"';
$Color{'TCOUNTER-WAIT'} = '"dark-green"';
$Color{'TCOUNTER-EXCP'} = '"orange"';
$Color{'TCOUNTER-EXCP-WAIT'} = '"dark-orange"';
$Color{'TCOUNTER-ABRT'} = '"red"';
$Color{'TCOUNTER-ABRT-WAIT'} = '"dark-red"';
$Color{'TCOUNTER-TREQ-BK'} = '"dark-khaki"';
$Color{'TCOUNTER-TREQ-ANY'} = '"khaki"';
# Title in legend for each state.
my %Title = ();
foreach my $stat (@Tcounter) {
    my $tit = $stat;
    if ($stat =~ /TCOUNTER-(\S+)/) {
	$tit = $1;
    }
    $Title{$stat} = $tit;
}

# Max of xrange (depends on max number of end time)
my $x_max = 0;
# Max of yrange (depends on the number of workers)
my $y_max = 0;

# Directory to save all generated files
my $dirname = "$prefix-plot";

# Generated eps file
my $fname_eps = "$prefix.eps";

# Generated log files
my @Files = ();
foreach my $i (0 .. 9999) {
    my $fname = sprintf ("$prefix-%04d.dat", $i);
    if ( -e $fname ) {
	print "$fname\n";
	push (@Files, $fname);
    } elsif ($i>0) {
	print ($i." log files found.\n");
	$y_max = $i;
	last;
    } else {
	print "No log files named $prefix-<nnnn>.dat found.\n";
	exit 99;
    }
}

# Gnuplot script file
my $fname_gp = "plot.gnuplot";


### Main
# Make directory
mkdir $dirname or die "Failed to generate $dirname";

# Generate a plot file for each status
foreach my $stat (@Tcounter) {
    my $id = -1;
    $Plot_file{$stat} = "$prefix-$stat.plt";
    my $pltfile = "$dirname/$Plot_file{$stat}";
    $Valid{$stat} = 0;
    open (FP_PLT, "> $pltfile") or die "Failed to write a plot file $pltfile";
    foreach my $file (@Files) {
	$id++;
	open (FP, "< $file") or die "Failed to open $file.";
	while (my $line = <FP>) {
	    if ($line =~ /^\s*(\S+)\s+(\S+)\s+(\S+)/) {
		my ($l_stat, $start, $end) = ($1, $2, $3);
		if ($l_stat eq $stat) {
		    $Valid{$stat} = 1;
		    if ($end > $x_max) { $x_max = $end; }
		    print FP_PLT "$start $id\n";
		    print FP_PLT "$end $id\n";
		    print FP_PLT "\n";
		}
	    }
	}
	close (FP);
    }
    close (FP_PLT);
}

# Run gnuplot to generate an eps file and make a gnuplot script file
# with which the same eps file can be generated again.
open (GP, "| gnuplot" ) or die "Failed to exeute gnuplot";
open (FP_GP, "> $dirname/$fname_gp") or die "Failed to open $dirname/$fname_gp to write";
sub print_gp {
    my $str = shift;
    print GP $str;
    print FP_GP $str;
    print $str;
}
print_gp "set key left top font 'Helvetica Neue,10' width 2"."\n";

print_gp "set xrange [-0.25:$x_max]"."\n";
print_gp "set xtics 0, 1, $x_max"."\n";
print_gp 'set xlabel "time [s]"'."\n";

print_gp "set yrange [-1:$y_max]"."\n";
print_gp "set ytics 0, 1, ".($y_max-1)."\n";
print_gp 'set ylabel "worker ID"'."\n";

print_gp 'set terminal postscript eps enhanced color'."\n";
print_gp "set output \"$fname_eps\""."\n";

my $replot = 0;

foreach my $stat (@Tcounter) {
    if ($Valid{$stat}) {
	print_gp (($replot==0)?'plot ':", \\\n");
	print_gp "\"$dirname/$Plot_file{$stat}\" w l lc rgb $Color{$stat} lt 1 linewidth 5 title \"$Title{$stat}\"";
	$replot = 1;
    }
}
print_gp "\n";

# Close gnuplot process and script
close (GP);
close (FP_GP);

unless ($keep_files) {
# remove plot files
    foreach my $stat (@Tcounter) {
	unlink "$dirname/$Plot_file{$stat}";
    }
# remove gnuplot script
    unlink "$dirname/$fname_gp";
# remove directory
    rmdir $dirname;
}

# Show summary
print "* * * Summary * * *\n";
if ( -e $fname_eps ) {
    print "An eps file $fname_eps generated.\n";
}
if ( -d $dirname ) {
    print "Plot files and a gnuplot script file are stored in $dirname/.\n";
    print "You can generate $fname_eps again by:\n";
    print "\$ gnuplot $dirname/$fname_gp\n";
}
