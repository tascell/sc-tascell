;;; Copyright (c) 2008 Tasuku Hiraishi <hiraisi@kuis.kyoto-u.ac.jp>
;;; All rights reserved.

;;; Redistribution and use in source and binary forms, with or without
;;; modification, are permitted provided that the following conditions
;;; are met:
;;; 1. Redistributions of source code must retain the above copyright
;;;    notice, this list of conditions and the following disclaimer.
;;; 2. Redistributions in binary form must reproduce the above copyright
;;;    notice, this list of conditions and the following disclaimer in the
;;;    documentation and/or other materials provided with the distribution.

;;; THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND
;;; ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;;; ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE
;;; FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
;;; DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
;;; OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
;;; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
;;; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
;;; OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
;;; SUCH DAMAGE.

;;; Computes a total force exerted by (2n+1)^3 uniform particles.

;; task 0 0 0 1
;; <minx>
;; <miny>
;; <minz>
;; <maxx>
;; <maxy>
;; <maxz>
;; <100*x>
;; <100*y>
;; <100*z>

(c-exp "#include<sys/time.h>")

(%ifndef* NF-TYPE
  (%defconstant NF-TYPE GCC)) ; one of (GCC LW-SC CL-SC XCC XCCCL RAWC)
(%include "rule/tcell-setrule.sh")

(%include "clib.sh")
(%include "dprint.sh")
(%cinclude "sendrecv.h" (:macro))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(def (csym::elapsed-time tp) 
    (fn double (array (struct timeval) 2))
  (return (+ (- (fref (aref tp 1) tv-sec)
                (fref (aref tp 0) tv-sec))
             (* 0.000001
                (- (fref (aref tp 1) tv-usec)
                   (fref (aref tp 0) tv-usec))))))
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;a

(def (task gravity)
  (def f (array double 3))   ; result
  (def rf (array double 3))  ; 小さい値を蓄積してく場所
  (def minx int )
  (def miny int )
  (def minz int )
  (def maxx int )
  (def maxy int )
  (def maxz int )
  (def cur (array double 3))  ; 入力座標：ここへの重力ベクトルを計算
  ;;(def dummy (array char 4000))
  )
  
(def (task-sender gravity)
  (csym::send-bytes (cast (ptr void) (ptr this.minx)) (- (sizeof this) (- (cast (ptr char)(ptr this.minx)) (cast (ptr char)(ptr this)))))
  )

;; sizeof (this) - ((char*)&this.minx - (char*)&this))

(def (task-receiver gravity)
  (csym::recv-bytes (cast (ptr void) (ptr this.minx)) (- (sizeof this) (- (cast (ptr char)(ptr this.minx)) (cast (ptr char)(ptr this)))))
  )

(def (rslt-sender gravity)
  (csym::send-doubles this.f 3))

(def (rslt-receiver gravity)
  (csym::recv-doubles this.f 3))


(decl (grav-x minx miny minz maxx maxy maxz tsk)
      (wfn void
           int int int int int int (ptr (struct gravity))))

(def (task-body gravity)
  (def i int)
  (for ((= i 0) (< i 3) (inc i))
    (= (aref this.f i)  0.0))
  (for ((= i 0) (< i 3) (inc i))
    (= (aref this.rf i) 0.0))
  (DEBUG-PRINT 1 "start (%d, %d, %d)--(%d, %d, %d): (%lf, %lf, %lf)~%"
               this.minx
               this.miny
               this.minz
               this.maxx
               this.maxy
               this.maxz
               (aref this.cur 0)
               (aref this.cur 1)
               (aref this.cur 2))
  (grav-x this.minx
          this.miny
          this.minz
          this.maxx
          this.maxy
          this.maxz
          (ptr this))
  (for ((= i 0) (< i 3) (inc i))
    (+= (aref this.f i) (aref this.rf i))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(def (task start-gravity)
  (def minx int :in)
  (def miny int :in)
  (def minz int :in)
  (def maxx int :in)
  (def maxy int :in)
  (def maxz int :in)
  (def curx int :in)
  (def cury int :in)
  (def curz int :in))


(def (task-body start-gravity)
  (def tsk (struct gravity))
  (def i int)
  (decl tp (array (struct timeval) 2))
  (for ((= i 0) (< i 3) (inc i))
    (= (aref tsk.f i)  0.0))
  (for ((= i 0) (< i 3) (inc i))
    (= (aref tsk.rf i) 0.0))
  (= tsk.minx this.minx)
  (= tsk.miny this.miny)
  (= tsk.minz this.minz)
  (= tsk.maxx this.maxx)
  (= tsk.maxy this.maxy)
  (= tsk.maxz this.maxz)
  (= (aref tsk.cur 0) (/ (cast double this.curx) 100))
  (= (aref tsk.cur 1) (/ (cast double this.cury) 100))
  (= (aref tsk.cur 2) (/ (cast double this.curz) 100))
  (csym::fprintf stderr "start (%d, %d, %d)--(%d, %d, %d): (%lf, %lf, %lf)~%"
                 tsk.minx
                 tsk.miny
                 tsk.minz
                 tsk.maxx
                 tsk.maxy
                 tsk.maxz
                 (aref tsk.cur 0)
                 (aref tsk.cur 1)
                 (aref tsk.cur 2))
  (csym::gettimeofday tp 0)
  (grav-x tsk.minx
          tsk.miny
          tsk.minz
          tsk.maxx
          tsk.maxy
          tsk.maxz
          (ptr tsk))
  (for ((= i 0) (< i 3) (inc i))
    (+= (aref tsk.f i) (aref tsk.rf i)))
  (csym::gettimeofday (+ tp 1) 0)
  (csym::fprintf stderr "f=(%lf, %lf, %lf)~%"
                 (aref tsk.f 0)
                 (aref tsk.f 1)
                 (aref tsk.f 2))
  (csym::fprintf stderr "time: %lf~%" (csym::elapsed-time tp))
  )
  
;;; (rslt-receiver cmp) = default

(def (grav-z x y minz maxz tsk)
    (wfn void
        int int int int (ptr (struct gravity)))
  (def i int)
  (do-many for z from minz to (+ maxz 1)
    (def dx double) (def dy double) (def dz double)
    (def one-d2th double) (def one-d3th double)
    (= dx (- (cast double x) (aref tsk->cur 0)))
    (= dy (- (cast double y) (aref tsk->cur 1)))
    (= dz (- (cast double z) (aref tsk->cur 2)))
    (= one-d2th (/ 1.0 (+ (* dx dx) (* dy dy) (* dz dz))))
    (= one-d3th (* (csym::sqrt one-d2th) one-d2th))
    (+= (aref tsk->rf 0) (* dx one-d3th))
    (+= (aref tsk->rf 1) (* dy one-d3th))
    (+= (aref tsk->rf 2) (* dz one-d3th))
    (for ((= i 0) (< i 3) (inc i))
      (if (or (> (aref tsk->rf i) 1.0)
              (< (aref tsk->rf i) -1.0))
          (begin
           (+= (aref tsk->f i) (aref tsk->rf i))
           (= (aref tsk->rf i) 0.0))))
    (handles gravity
     (:put from i1 to i2
           (= this.minx x)
           (= this.miny y)
           (= this.minz i1)
           (= this.maxx x)
           (= this.maxy y)
           (= this.maxz (- i2 1))
           (= (aref this.cur 0) (aref tsk->cur 0))
           (= (aref this.cur 1) (aref tsk->cur 1))
           (= (aref this.cur 2) (aref tsk->cur 2)))
     (:get
      (def i int)
      (+= (aref tsk->rf 0) (aref this.f 0))
      (+= (aref tsk->rf 1) (aref this.f 1))
      (+= (aref tsk->rf 2) (aref this.f 2))
      (for ((= i 0) (< i 3) (inc i))
        (if (or (> (aref tsk->rf i) 1.0)
                (< (aref tsk->rf i) -1.0))
           (begin
            (+= (aref tsk->f i) (aref tsk->rf i))
            (= (aref tsk->rf i) 0.0))))))))

(def (grav-y x miny minz maxy maxz tsk)
    (wfn void
        int int int int int (ptr (struct gravity)))
  (do-many for y from miny to (+ maxy 1)
           (grav-z x y minz maxz tsk)
    (handles gravity
     (:put from i1 to i2
           (= this.minx x)
           (= this.miny i1)
           (= this.minz tsk->minz)
           (= this.maxx x)
           (= this.maxy (- i2 1))
           (= this.maxz tsk->maxz)
           (= (aref this.cur 0) (aref tsk->cur 0))
           (= (aref this.cur 1) (aref tsk->cur 1))
           (= (aref this.cur 2) (aref tsk->cur 2)))
     (:get
      (def i int)
      (+= (aref tsk->rf 0) (aref this.f 0))
      (+= (aref tsk->rf 1) (aref this.f 1))
      (+= (aref tsk->rf 2) (aref this.f 2))
      (for ((= i 0) (< i 3) (inc i))
        (if (or (> (aref tsk->rf i) 1.0)
                (< (aref tsk->rf i) -1.0))
            (begin
             (+= (aref tsk->f i) (aref tsk->rf i))
             (= (aref tsk->rf i) 0.0))))))))

(def (grav-x minx miny minz maxx maxy maxz tsk)
    (wfn void
	 int int int int int int (ptr (struct gravity)))
  (do-many for x from minx to (+ maxx 1)
    (grav-y x miny minz maxy maxz tsk)
    (handles gravity
     (:put from i1 to i2
           (= this.minx i1)
           (= this.miny tsk->miny)
           (= this.minz tsk->minz)
           (= this.maxx (- i2 1))
           (= this.maxy tsk->maxy)
           (= this.maxz tsk->maxz)
           (= (aref this.cur 0) (aref tsk->cur 0))
           (= (aref this.cur 1) (aref tsk->cur 1))
           (= (aref this.cur 2) (aref tsk->cur 2)))
     (:get
      (def i int)
      (+= (aref tsk->rf 0) (aref this.f 0))
      (+= (aref tsk->rf 1) (aref this.f 1))
      (+= (aref tsk->rf 2) (aref this.f 2))
      (for ((= i 0) (< i 3) (inc i))
        (if (or (> (aref tsk->rf i) 1.0)
                (< (aref tsk->rf i) -1.0))
            (begin
             (+= (aref tsk->f i) (aref tsk->rf i))
             (= (aref tsk->rf i) 0.0))))))))
