;;; Copyright (c) 2008 Tasuku Hiraishi <hiraisi@kuis.kyoto-u.ac.jp>
;;; All rights reserved.

;;; Redistribution and use in source and binary forms, with or without
;;; modification, are permitted provided that the following conditions
;;; are met:
;;; 1. Redistributions of source code must retain the above copyright
;;;    notice, this list of conditions and the following disclaimer.
;;; 2. Redistributions in binary form must reproduce the above copyright
;;;    notice, this list of conditions and the following disclaimer in the
;;;    documentation and/or other materials provided with the distribution.

;;; THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND
;;; ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;;; ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE
;;; FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
;;; DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
;;; OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
;;; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
;;; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
;;; OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
;;; SUCH DAMAGE.


;;; LU decomposition

;; task 0 0 0 0
;; 0
;; <size>
;; <algorighm(1-3)>
;; <debug-level(0-2)>

(c-exp "#include<sys/time.h>")

(%ifndef* NF-TYPE
  (%defconstant NF-TYPE GCC))           ; one of (GCC LW-SC CL-SC XCC XCCCL)
(%include "rule/tcell-setrule.sh")

(%include "clib.sh")
(%include "dprint.sh")
(%cinclude "sendrecv.h" (:macro))

;; (def (struct timeval)
;;   (def tv-sec double)
;;   (def tv-usec double))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; app

(def (csym::elapsed-time tp) 
    (fn double (array (struct timeval) 2))
  (return (+ (- (fref (aref tp 1) tv-sec)
                (fref (aref tp 0) tv-sec))
             (* 0.000001
                (- (fref (aref tp 1) tv-usec)
                   (fref (aref tp 0) tv-usec))))))

;;   (0,0)     ...   (0, nx-1)
;;   (1,0)     ...   (1, nx-1)
;;    ...             ...
;;   (ny-1,0)  ...   (ny-1, nx-1)

;;; eventually, may use different nx(s)


(decl (decomp-lu n a nx anx) (wfn void int (ptr double) int int))
(decl (decomp-r n1 n2 b a nx an)
      (wfn void int int (ptr double) (ptr double) int int))
(decl (decomp-d n1 n2 b a nx an)
      (wfn void int int (ptr double) (ptr double) int int))
(decl (decomp-rd n1 n2 n3 b1 b2 a nx anx)
      (wfn void int int int (ptr double) (ptr double) (ptr double)
           int int))

(decl (csym::zero-mat a n1 n2 nx) (fn void (ptr double) int int int))

(deftype task-tp enum TASK-CMD TASK-LU TASK-R TASK-D TASK-RD)

(def (task task-lu)
  (def tt task-tp) ; 仕事の種類．0(=TASK-CMD)で新規に開始
  (def n1 int)
  (def n2 int)
  (def n3 int)
  (def b1 (ptr double))
  (def b2 (ptr double))
  (def a (ptr double))
  (def nx int)
  (def anx int)
  (def tmpnx int))

(def (csym::put-task st tt n1 n2 n3 b1 b2 a nx anx)
    (csym::fn void (ptr (struct task-lu)) task-tp int int int
              (ptr double) (ptr double) (ptr double) int int)
  (= st->tt tt)
  (= st->n1 n1)
  (= st->n2 n2)
  (= st->n3 n3)
  (= st->b1 b1)
  (= st->b2 b2)
  (= st->a a)
  (= st->nx nx)
  (= st->anx anx)
  (= st->tmpnx 0)
  (if (== a 0)
      (begin
       (= st->tmpnx n3)
       (= st->a
          (cast (ptr double) 
            (csym::malloc (* (sizeof double) n2 n3))))
       (csym::zero-mat st->a n2 n3 n3))))

(def (csym::merge-task x a anx)
    (csym::fn void (ptr (struct task-lu)) (ptr double) int)
  (def n2 int x->n2)
  (def n3 int x->n3)
  (def tmp (ptr double) x->a)
  (def i int) (def j int)
  (if (== a tmp) (return))
  (for ((= i 0) (< i n2) (inc i))
    (for ((= j 0) (< j n3) (inc j))
      (+= (aref a (+ (* i anx) j))
          (aref tmp (+ (* i n3) j)))))
  (csym::free tmp))

(def (csym::decomp-lu-0 n a nx anx) (fn void int (ptr double) int int)
  (decl i int) (decl j int) (decl k int)
  (begin 
   (def w double (/ 1.0 (aref a 0)))
   (for ((= j 1) (< j n) (inc j)) (*= (aref a j) w)))
  (for ((= i 1) (< i n) (inc i))
    (for ((= k 0) (< k (- i 1)) (inc k))
      (def aik double (aref a (+ (* i anx) k)))
      (for ((= j (+ k 1)) (< j n) (inc j))
        (-= (aref a (+ (* i anx) j))
            (* aik (aref a (+ (* k anx) j))))))
    (begin
     (def aik double (aref a (- (+ (* i anx) i) 1)))
     (decl w double)
     (-= (aref a (+ (* i anx) i))
         (* aik (aref a (+ (* (- i 1) anx) i))))
     (= w (/ 1.0 (aref a (+ (* i anx) i))))
     (for ((= j (+ i 1)) (< j n) (inc j))
       (= (aref a (+ (* i anx) j))
          (* w
             (- (aref a (+ (* i anx) j))
                (* aik (aref a (+ (* (- i 1) anx) j))))))))))

(def (decomp-lu n a nx anx) (wfn void int (ptr double) int int)
  ;; (decl tp (array (struct timeval) 2))
  (if (<= n 4) (begin 
                (csym::decomp-lu-0 n a nx anx)
                (return)))
  (begin
   (def n1 int (if-exp (> n 16) (/ n 4) (/ n 2)))
   (def n2 int (- n n1))
   (decomp-lu n1 a nx anx)
   (do-two
       (decomp-r n1 n2 a (+ a n1) nx anx)
       (decomp-d n1 n2 a (+ a (* n1 nx)) nx anx)
     (handles task-lu
      (:put (csym::put-task (ptr this) TASK-D n1 n2 0 a 0 (+ a (* n1 nx)) nx anx))
      (:get)))
   (decomp-rd n1 n2 n2 (+ a (* n1 nx)) (+ a n1)
              (+ a (* n1 nx) n1) nx anx)
   (decomp-lu n2 (+ a (* n1 nx) n1) nx anx)
   ))


(def (csym::decomp-r-0 n1 n2 b a nx anx)
    (fn void int int (ptr double) (ptr double) int int)
  (decl i int) (decl j int) (decl k int)
  (begin 
   (def w double (/ 1.0 (aref b 0)))
   (for ((= j 0) (< j n2) (inc j)) (*= (aref a j) w)))
  (for ((= i 1) (< i n1) (inc i))
    (for ((= k 0) (< k (- i 1)) (inc k))
      (def aik double (aref b (+ (* i nx) k)))
      (for ((= j 0) (< j n2) (inc j))
        (-= (aref a (+ (* i anx) j))
            (* aik (aref a (+ (* k anx) j))))))
    (begin 
     (def aik double (aref b (- (+ (* i nx) i) 1)))
     (def w double (/ 1.0 (aref b (+ (* i nx) i))))
     (for ((= j 0) (< j n2) (inc j))
       (= (aref a (+ (* i anx) j))
          (* w
             (- (aref a (+ (* i anx) j))
                (* aik (aref a (+ (* (- i 1) anx) j))))))))))

(def (decomp-r n1 n2 b a nx anx)
    (wfn void int int (ptr double) (ptr double) int int)
  (if (<= n1 4) (begin (csym::decomp-r-0 n1 n2 b a nx anx) (return))) 
  (begin 
   (def n1-1 int (/ n1 2)) (def n1-2 int (- n1 n1-1))
   (decomp-r  n1-1 n2 b a nx anx)
   (decomp-rd n1-1 n1-2 n2 (+ b (* n1-1 nx)) a (+ a (* n1-1 nx)) nx
              anx)
   (decomp-r n1-2 n2 (+ b (+ (* n1-1 nx) n1-1)) (+ a (* n1-1 nx)) nx
             anx)
   ))

(def (csym::decomp-d-0 n1 n2 b a nx anx)
    (fn void int int (ptr double) (ptr double) int int) (decl i int)
    (decl j int) (decl k int)
    (for ((= i 0) (< i n2) (inc i))
      (for ((= k 0) (< k (- n1 1)) (inc k))
        (def aik double (aref a (+ (* i anx) k)))
        (for ((= j (+ k 1)) (< j n1) (inc j))
          (-= (aref a (+ (* i anx) j))
              (* aik (aref b (+ (* k nx) j))))))))


(def (decomp-d n1 n2 b a nx anx)
    (wfn void int int (ptr double) (ptr double) int int)
  (if (<= n2 4) (begin (csym::decomp-d-0 n1 n2 b a nx anx) (return)))
  (begin
   (def n2-1 int (/ n2 2)) (def n2-2 int (- n2 n2-1))  
   (do-two
       (decomp-d n1 n2-1 b a nx anx)
       (decomp-d n1 n2-2 b (+ a (* n2-1 nx)) nx anx)
     (handles task-lu
      (:put (csym::put-task (ptr this) TASK-D n1 n2-2 0 b 0 (+ a (* n2-1 nx)) nx anx))
      (:get)))
   ))


(def (csym::decomp-rd-0 n1 n2 n3 b1 b2 a nx anx)
    (fn void int int int (ptr double) (ptr double) (ptr double) int int)
  (decl i int) (decl j int) (decl k int)
  (for ((= i 0) (< i n2) (inc i))
    (for ((= k 0) (< k n1) (inc k))
      (def aik double (aref b1 (+ (* i nx) k)))
      (for ((= j 0) (< j n3) (inc j))
        (-= (aref a (+ (* i anx) j))
            (* aik (aref b2 (+ (* k nx) j))))))))

(def (decomp-rd n1 n2 n3 b1 b2 a nx anx)
    (wfn void int int int (ptr double) (ptr double) (ptr double) int int)
  (if (and (<= n1 4) (<= n2 4))
      (begin 
       (csym::decomp-rd-0 n1 n2 n3 b1 b2 a nx anx)
       (return)))
  (if (> n1 n2)
      (begin
       (def n1-1 int (/ n1 2))
       (def n1-2 int (- n1 n1-1))
       ;; Cilkとの比較用
       (decomp-rd n1-1 n2 n3 b1 b2 a nx anx)
       (decomp-rd n1-2 n2 n3 (+ b1 n1-1) (+ b2 (* n1-1 nx)) a nx anx)
       ;; 本来
       ;;        (do-two 
       ;;            (decomp-rd n1-1 n2 n3 b1 b2 a nx anx)
       ;;          (decomp-rd n1-2 n2 n3 (+ b1 n1-1) (+ b2 (* n1-1 nx)) a nx anx)
       ;;          (handles task-lu
       ;;           (:put (csym::put-task (ptr this) TASK-RD n1-2 n2 n3
       ;;                                (+ b1 n1-1) (+ b2 (* n1-1 nx))
       ;;                                0 nx anx))
       ;;          (:get (csym::merge-task (ptr this) a anx))))
       )
    (begin
     (def n2-1 int (/ n2 2))
     (def n2-2 int (- n2 n2-1))
     (do-two 
         (decomp-rd n1 n2-1 n3 b1 b2 a nx anx)
	 (decomp-rd n1 n2-2 n3 (+ b1 (* n2-1 nx)) b2 (+ a (* n2-1 anx)) nx anx)
       (handles task-lu
        (:put (csym::put-task (ptr this) TASK-RD n1 n2-2 n3 (+ b1 (* n2-1 nx)) b2
                              (+ a (* n2-1 anx)) nx anx))
        (:get (csym::merge-task (ptr this) (+ a (* n2-1 anx)) anx))))))
  )

(def (decomp-lu-1 n a nx anx) (wfn void int (ptr double) int int)
  (decl i int)
  (for ((= i 0) (< i n) (+= i 16))
    (def n1 int 16)
    (if (> n1 (- n i))
        (= n1 (- n i)))
    (csym::decomp-d-0 i n1 a (+ a (* i nx)) nx anx)
    (decomp-rd i n1 (- n i) (+ a (* i nx)) (+ a i)
               (+ a (+ (* i nx) i)) nx anx)
    (csym::decomp-lu-0 n1 (+ a (+ (* i nx) i)) nx anx)
    (csym::decomp-r-0 n1 (- (- n i) n1) (+ a (+ (* i nx) i))
                      (+ a (+ (+ (* i nx) i) n1)) nx anx)))


;; 適当なデータが入ったサイズn の配列を作る
;; a: 出力先
;; nx: 1行あたりのメモリサイズ
(def (csym::genmat n a nx) (fn void int (ptr double) int)
  (decl i int)
  (decl j int)
  (for ((= i 0) (< i n) (inc i))
    (for ((= j 0) (< j n) (inc j))
      (= (aref a (+ (* i nx) j)) (- n (csym::abs (- i j)))))))

(def (csym::printmat n a nx) (fn void int (ptr double) int)
  (decl i int)
  (decl j int)
  (for ((= i 0) (< i n) (inc i))
    (for ((= j 0) (< j n) (inc j))
      (csym::fprintf stderr "%6.3lf%c"
                     (aref a (+ (* i nx) j))
                     (if-exp (== j (- n 1)) #\Newline #\Space))))
  (csym::putc #\Newline stderr))

(def (csym::copy-l n a l nx) (fn void int (ptr double) (ptr double) int)
  (decl i int) (decl j int)
  (for ((= i 0) (< i n) (inc i))
    (for ((= j 0) (< j n) (inc j))
      (= (aref l (+ (* i nx) j))
         (if-exp (< i j) 0.0 (aref a (+ (* i nx) j)))))))

;; uの対角成分が1 （Crout型）
(def (csym::copy-u n a u nx) (fn void int (ptr double) (ptr double) int)
  (decl i int) (decl j int)
  (for ((= i 0) (< i n) (inc i))
    (for ((= j 0) (< j n) (inc j))
      (= (aref u (+ (* i nx) j))
         (if-exp (== i j) 1.0
                 (if-exp (> i j) 0.0 (aref a (+ (* i nx) j))))))))

(def (csym::transpose n a nx) (fn void int (ptr double) int)
  (decl i int)
  (decl j int)
  (for ((= i 0) (< i n) (inc i))
    (for ((= j 0) (< j i) (inc j))
      (def t1 double (aref a (+ (* i nx) j)))
      (def t2 double (aref a (+ (* j nx) i)))
      (exps (= (aref a (+ (* i nx) j)) t2)
            (= (aref a (+ (* j nx) i)) t1)))))

(def (csym::matmul n a b c nx)
    (fn void int (ptr double) (ptr double) (ptr double) int)
  (def bs int 12) (decl i0 int) (decl j0 int) (decl i int) (decl j int)
  (decl k int)
  (csym::transpose n b nx)
  (for ((= i0 0) (< i0 n) (+= i0 bs))
    (for ((= j0 0) (< j0 n) (+= j0 bs))
      (for ((= i i0) (and (< i (+ i0 bs)) (< i n)) (inc i))
        (for ((= j j0) (and (< j (+ j0 bs)) (< j n)) (inc j))
          (def s double 0.0)
          (for ((= k 0) (< k n) (inc k))
            (+= s
                (* (aref a (+ (* i nx) k))
                   (aref b (+ (* j nx) k)))))
          (= (aref c (+ (* i nx) j)) s))))))

(def (csym::diffmat n a b nx) (fn void int (ptr double) (ptr double) int)
  (def s double 0.0) (decl i int) (decl j int)
  (for ((= i 0) (< i n) (inc i))
    (for ((= j 0) (< j n) (inc j))
      (+= s
          (* (- (aref a (+ (* i nx) j)) (aref b (+ (* i nx) j)))
             (- (aref a (+ (* i nx) j)) (aref b (+ (* i nx) j)))))))
  (csym::fprintf stderr "diff: %lf~%" s))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (def (csym::input-mat a n1 n2 nx) (csym::fn void (ptr double) int int int)
;;   (decl i int)
;;   (def swp int)
;;   (= swp (csym::recv-binary-header 0 0))
;;   (for ((= i 0) (< i n1) (inc i))
;;     (csym::recv-double-seq (+ a (* i nx)) n2))
;;   (csym::recv-binary-terminator)
;;   (if swp
;;       (for ((= i 0) (< i n1) (inc i))
;;         (csym::swap-doubles (+ a (* i nx)) n2))))

;; (def (csym::output-mat a n1 n2 nx) (fn void (ptr double) int int int)
;;   (def i int)
;;   (csym::send-binary-header (sizeof double) (* n1 n2))
;;   (for ((= i 0) (< i n1) (inc i))
;;     (csym::send-double-seq (+ a (* i nx)) n2))
;;   (csym::send-binary-terminator))

;; #+comment                               ; easy but less efficient implementation
(def (csym::input-mat a n1 n2 nx) (csym::fn void (ptr double) int int int)
  (decl i int)
  (for ((= i 0) (< i n1) (inc i))
    (csym::recv-doubles (+ a (* i nx)) n2)))

;; #+comment                               ; easy but less efficient implementation
(def (csym::output-mat a n1 n2 nx) (fn void (ptr double) int int int)
  (def i int)
  (for ((= i 0) (< i n1) (inc i))
    (csym::send-doubles (+ a (* i nx)) n2)))

(def (csym::input-mat-l a n1 nx) (fn void (ptr double) int int)
  (decl i int)
  (for ((= i 0) (< i n1) (inc i)) 
    (csym::recv-doubles (+ a (* i nx)) (+ i 1)))
  )

(def (csym::output-mat-l a n1 nx) (fn void (ptr double) int int)
  (decl i int)
  (for ((= i 0) (< i n1) (inc i))
    (csym::send-doubles (+ a (* i nx)) (+ i 1)))
  )

(def (csym::input-mat-u a n1 nx) (fn void (ptr double) int int)
  (decl i int)
  (for ((= i 0) (< i n1) (inc i))
    (csym::recv-doubles (+ a (* i nx) i 1) (- n1 i 1)))
  )

(def (csym::output-mat-u a n1 nx) (csym::fn void (ptr double) int int)
  (decl i int) 
  (for ((= i 0) (< i n1) (inc i)) 
    (csym::send-doubles (+ a (* i nx) i 1) (- n1 i 1)))
  )

;; (def (csym::input-mat-l a n1 nx) (fn void (ptr double) int int)
;;   (decl i int)
;;   (decl swp int)
;;   (= swp (csym::recv-binary-header 0 0))
;;   (for ((= i 0) (< i n1) (inc i)) 
;;     (csym::recv-double-seq (+ a (* i nx)) (+ i 1)))
;;   (csym::recv-binary-terminator)
;;   (if swp
;;       (for ((= i 0) (< i n1) (inc i))
;;         (csym::swap-doubles (+ a (* i nx)) (+ i 1)))))

;; (def (csym::output-mat-l a n1 nx) (fn void (ptr double) int int)
;;   (decl i int)
;;   (csym::send-binary-header (sizeof double) (/ (* n1 (+ n1 1)) 2))
;;   (for ((= i 0) (< i n1) (inc i))
;;     (csym::send-double-seq (+ a (* i nx)) (+ i 1)))
;;   (csym::send-binary-terminator))

;; (def (csym::input-mat-u a n1 nx) (fn void (ptr double) int int)
;;   (decl i int)
;;   (decl swp int)
;;   (= swp (csym::recv-binary-header 0 0))
;;   (for ((= i 0) (< i n1) (inc i))
;;     (csym::recv-double-seq (+ a (* i nx) i 1) (- n1 i 1)))
;;   (csym::recv-binary-terminator)
;;   (if swp
;;       (for ((= i 0) (< i n1) (inc i))
;;         (csym::swap-doubles (+ a (* i nx) i 1) (- n1 i 1)))))

;; (def (csym::output-mat-u a n1 nx) (csym::fn void (ptr double) int int)
;;   (decl i int) 
;;   (csym::send-binary-header (sizeof double) (/ (* n1 (- n1 1)) 2))
;;   (for ((= i 0) (< i n1) (inc i)) 
;;     (csym::send-double-seq (+ a (* i nx) i 1) (- n1 i 1)))
;;   (csym::send-binary-terminator))

(def (csym::zero-mat a n1 n2 nx) (fn void (ptr double) int int int)
  (decl i int)
  (decl j int)
  (for ((= i 0) (< i n1) (inc i))
    (for ((= j 0) (< j n2) (inc j))
      (= (aref a (+ (* i nx) j)) 0.0))))

(def (task-sender task-lu)
    (def n1 int this.n1)
  (def n2 int this.n2) 
  (def n3 int this.n3)
  (def b1 (ptr double) this.b1)
  (def b2 (ptr double) this.b2)
  (def a (ptr double) this.a)
  (def nx int this.nx)
  (def anx int this.anx)
  (csym::send-int this.tt)
  (switch this.tt 
    (case TASK-LU) 
    (csym::send-int n1)
    (csym::output-mat a n1 n1 anx)
    (break)
    (case TASK-R)
    (csym::send-int n1)
    (csym::send-int n2)
    (csym::output-mat-l b1 n1 nx)
    (csym::output-mat a n1 n2 anx)
    (break)
    (case TASK-D)
    (csym::send-int n1)
    (csym::send-int n2)
    (csym::output-mat-u b1 n1 nx)
    (csym::output-mat a n2 n1 anx)
    (break)
    (case TASK-RD)
    (csym::send-int n1)
    (csym::send-int n2)
    (csym::send-int n3)
    (csym::output-mat b1 n2 n1 nx)
    (csym::output-mat b2 n1 n3 nx)
    (break)))

(def (task-receiver task-lu)
    (decl tt task-tp)
  (decl n1 int) (decl n2 int) (decl n3 int)
  (decl b1 (ptr double)) (decl b2 (ptr double))
  (decl a (ptr double))
  (decl nx int)
  (static-def ans double)

  (= tt (csym::recv-int))
  (switch tt
    (case TASK-CMD)
    (= n1 (csym::recv-int))
    (= n2 (csym::recv-int))
    (= n3 (csym::recv-int))
    (= a (ptr ans))
    (break)
    (case TASK-LU)
    (= n1 (csym::recv-int))
    (= nx n1)
    (= a (cast (ptr double) (csym::malloc (* (* (sizeof double) n1) n1))))
    (csym::input-mat a n1 n1 nx)
    (break)
    (case TASK-R)
    (= n1 (csym::recv-int))
    (= n2 (csym::recv-int)) 
    (= nx (+ n1 n2))
    (= b1 (cast (ptr double) (csym::malloc (* (* (sizeof double) n1) nx))))
    (csym::input-mat-l b1 n1 nx)
    (= a (+ b1 n1))
    (csym::input-mat a n1 n2 nx)
    (break)
    (case TASK-D)
    (= n1 (csym::recv-int))
    (= n2 (csym::recv-int))
    (= nx n1)
    (= b1 (cast (ptr double) (csym::malloc (* (* (sizeof double) (+ n1 n2)) nx))))
    (csym::input-mat-u b1 n1 nx)
    (= a (+ b1 (* n1 nx)))
    (csym::input-mat a n2 n1 nx)
    (break)
    (case TASK-RD)
    (= n1 (csym::recv-int))
    (= n2 (csym::recv-int))
    (= n3 (csym::recv-int))
    (= nx (+ n1 n3))
    (= a (cast (ptr double) (csym::malloc (* (* (sizeof double) (+ n1 n2)) nx))))
    (= b1 (+ a (* n1 nx)))
    (= b2 (+ a n1))
    (+= a (+ (* n1 nx) n1))
    (csym::input-mat b1 n2 n1 nx)
    (csym::input-mat b2 n1 n3 nx)
    (csym::zero-mat a n2 n3 nx)
    (break))
  (= this.tt tt) (= this.n1 n1)
  (= this.n2 n2) (= this.n3 n3)
  (= this.b1 b1) (= this.b2 b2)
  (= this.a a)   (= this.nx nx)
  (= this.anx nx) (= this.tmpnx 0)
  )

(def (csym::proc-rslt a) (fn void (ptr double))
  (csym::printf "%lf~%" (mref a)))

(def (rslt-sender task-lu)
    (def n1 int this.n1)
  (def n2 int this.n2)
  (def n3 int this.n3)
  (def b1 (ptr double) this.b1)
  (def b2 (ptr double) this.b2)
  (def a (ptr double) this.a)
  (def anx int this.anx)
  
  (switch this.tt
    (case TASK-CMD)
    (csym::proc-rslt a)
    (break)
    (case TASK-LU)
    (csym::output-mat a n1 n1 anx)
    (csym::free a)
    (break)
    (case TASK-R)
    (csym::output-mat a n1 n2 anx)
    (csym::free b1)
    (break)
    (case TASK-D)
    (csym::output-mat a n2 n1 anx)
    (csym::free b1)
    (break)
    (case TASK-RD)
    (csym::output-mat a n2 n3 anx)
    (-= a (+ (* n1 anx) n1))
    (csym::free a)
    (break)))

(def (rslt-receiver task-lu)
    (def n1 int this.n1)
  (def n2 int this.n2)
  (def n3 int this.n3)
  (def b1 (ptr double) this.b1)
  (def b2 (ptr double) this.b2)
  (def a (ptr double) this.a)
  (def tmpnx int this.tmpnx)
  (def anx int this.anx)

  ;;(csym::fprintf stderr "recv-rslt-body~%")
  (switch this.tt
    (case TASK-LU)
    (csym::input-mat a n1 n1 anx)
    (break)
    (case TASK-R)
    (csym::input-mat a n1 n2 anx)
    (break)
    (case TASK-D)
    (csym::input-mat a n2 n1 anx)
    (break)
    (case TASK-RD)
    (if (== tmpnx 0)
        (begin (= tmpnx n3)
               (= this.a
                  (cast (ptr double) (csym::malloc (* (* (sizeof double) n2) n3))))))
    (csym::input-mat this.a n2 n3 tmpnx)
    (break))
  ;;(csym::fprintf stderr "recv-rslt-body fin~%")
  )

(def (start-lu n1 n2 n3 ansp) (wfn void int int int (ptr double))
  (decl tp (array (struct timeval) 2))
  (def n int n1)
  (def al int n2)
  (def d int n3)
  (decl nx int)
  (decl a (ptr double))
  (decl l (ptr double))
  (decl u (ptr double))
  (decl c (ptr double))

  (= nx n)
  (= a (cast (ptr double) (csym::malloc (* (sizeof double) n n))))
  (csym::genmat n a nx)                 ; n(n1): Size of matrix
  (if (> d 1) (csym::printmat n a nx))  ; d(n3): Debug level

  (csym::gettimeofday tp 0)
  (switch al                            ; al(n2): Algorithm selection
    (case 1) (csym::decomp-lu-0 n a nx nx) (break)
    (case 2) (decomp-lu n a nx nx)   (break)
    (case 3) (decomp-lu-1 n a nx nx) (break))
  (csym::gettimeofday (+ tp 1) 0)
  (= (mref ansp) (csym::elapsed-time tp))
  (csym::fprintf stderr "time: %lf~%" (mref ansp))

  (if (> d 0)                           ; d(n3): Debug level
      (begin
       (= l (cast (ptr double) (csym::malloc (* n n (sizeof double)))))
       (= u (cast (ptr double) (csym::malloc (* n n (sizeof double)))))
       (= c (cast (ptr double) (csym::malloc (* n n (sizeof double)))))
       (if (> d 1)  (csym::printmat n a nx))
       (csym::copy-l n a l nx)
       (csym::copy-u n a u nx)
       (if (> d 1)  (csym::printmat n l nx))
       (if (> d 1)  (csym::printmat n u nx))
       (csym::matmul n l u c nx)
       (if (> d 1)  (csym::printmat n c nx))
       (csym::genmat n a nx)
       (csym::diffmat n a c nx)
       (csym::free l) (csym::free u) (csym::free c)))
  (csym::free a))

(def (task-body task-lu)
    (def n1 int this.n1) (def n2 int this.n2)
    (def n3 int this.n3)
    (def b1 (ptr double) this.b1)
    (def b2 (ptr double) this.b2)
    (def a (ptr double) this.a) (def nx int this.nx)
    (def anx int
      (if-exp this.tmpnx this.tmpnx
              this.anx))

    (DEBUG-PRINT 1 "start %d~%" this.tt)
    (switch this.tt
      (case TASK-CMD) (start-lu n1 n2 n3 a) (break)
      (case TASK-LU)  (decomp-lu n1 a nx anx) (break)
      (case TASK-R)   (decomp-r n1 n2 b1 a nx anx) (break)
      (case TASK-D)   (decomp-d n1 n2 b1 a nx anx) (break)
      (case TASK-RD)  (decomp-rd n1 n2 n3 b1 b2 a nx anx) (break)
      )
    )
