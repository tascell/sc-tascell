;;; Copyright (c) 2014 Shingo OKUNO <shingo@sys.i.kyoto-u.ac.jp>
;;; All rights reserved.

;;; Redistribution and use in source and binary forms, with or without
;;; modification, are permitted provided that the following conditions
;;; are met:
;;; 1. Redistributions of source code must retain the above copyright
;;;    notice, this list of conditions and the following disclaimer.
;;; 2. Redistributions in binary form must reproduce the above copyright
;;;    notice, this list of conditions and the following disclaimer in the
;;;    documentation and/or other materials provided with the distribution.

;;; THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND
;;; ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;;; ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE
;;; FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
;;; DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
;;; OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
;;; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
;;; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
;;; OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
;;; SUCH DAMAGE.

;;; copine4.tcell

;;; Extract all connected subgraphs, each of which shares a common itemset
;;; whose size is not less than a given threshold, from a given graph
;;; in which each vertex is associated to an itemset

;; task 0 0 0 2
;; <th>         ; threshold
;; <it>         ; # of iterations left for a victim worker
;; <dv>         ; # of divisions of the higher layer of the search tree


(c-exp "#include <stdio.h>")
(c-exp "#include <stdlib.h>")
(c-exp "#include <math.h>")
(c-exp "#include <time.h>")
(c-exp "#include <limits.h>")
(c-exp "#include <string.h>")
(c-exp "#include <stdint.h>")
;(c-exp "#include <pthread.h>")
(c-exp "#include <inttypes.h>")
(c-exp "#include <sys/time.h>")
(c-exp "#include <sys/resource.h>")
(c-exp "#include <nmmintrin.h>")

(c-exp "#define  __USE_GNU")
(c-exp "#include <search.h>")

(%ifndef* NF-TYPE
  (%defconstant NF-TYPE GCC)) ; one of (GCC LW-SC CL-SC XCC XCCCL)
(%include "rule/tcell-setrule.sh")

(%include "clib.sh")
(%include "dprint.sh")

;;; Set # of iterations left for a victim worker
;;; default: half of the unexecuted iterations
(%defconstant USE-SPN-RANGE 1) ; set # directly
(%defconstant USE-SPN-RATIO 0) ; set # by the ratio to the number of unexecuted iterations

;;; Use "popcount (SSE4.2)"
(%defconstant USE-SSE 0)

;;; Max # of workers
(%defconstant NUM-WORKERS 32)
(%defconstant NUM-NODES 2)

;;; Constants
(%defconstant E-SIZE 500000)               ; # of edges
(%defconstant V-SIZE 15500)                ; # of vertices
(%defconstant BIT-LEN 32)                  ; bit length of bitset
(%defconstant BIT-ITEM 5)                  ; # of items = BIT-ITEM * BIT-LEN
(%defconstant BIT-EDGE 8125)               ; # of edges = BIT-EDGE * BIT-LEN
(%defconstant BIT-VERTEX 625)              ; # of vertices = BIT-VERTEX * BIT-LEN
(%defconstant I-SIZE (* BIT-LEN BIT-ITEM)) ; 
(%defconstant Q-SIZE V-SIZE)               ; 
(%defconstant TASK-LEN 128)                ; 
(%defconstant COMM-LEN 32)                 ; 

;;; Debug Flags
(%defconstant DEBUG-DATA 0) ; flag to show some data
(%defconstant DEBUG-RSLT 0) ; flag to output result file
(%defconstant DEBUG-SHOW 0) ; flag to show traversal
(%defconstant DEBUG-TASK 0) ; flag to show task request
(%defconstant DEBUG-TIME 0) ; flag to output time file
(%defconstant DEBUG-LOCK 0) ; flag to output lock file
(%defconstant DEBUG-COPY 0) ; flag to output copy file

;;; Typedef
(deftype set uint32_t)        ; bitset
(deftype vtx uint32_t)        ; vertex
(deftype task-id __uint128_t) ; task ID

;;; Structure of ITnode
(def (struct --ITnode)
  (decl timeStamp int)                 ; timestamp
  (decl minID task-id)                 ; task ID
  (decl maxID task-id)                 ; task ID
  (decl item (array set BIT-ITEM))     ; itemset
  (decl worker int)                    ; worker ID
  (decl flagRedundant int)             ; flag indicating redundant search
  (decl prev (ptr (struct --ITnode)))  ; pointer to the previous node
  (decl next (ptr (struct --ITnode)))) ; pointer to the next node
(deftype ITnode (struct --ITnode))

;;; Structure of ITlist
(deftype ITlist struct
  (decl head (ptr ITnode))  ; pointer to the head node
  (decl crnt (ptr ITnode))) ; pointer to the current node

;;; Structure of Gnode
(def (struct --Gnode)
  (decl T (ptr vtx))                  ; vertices of CCIG
  (decl numT int)                     ; element counts of T
  (decl item (array set BIT-ITEM))    ; common itemset
  (decl prev (ptr (struct --Gnode)))  ; pointer to the previsou node
  (decl next (ptr (struct --Gnode)))) ; pointer to the next node
(deftype Gnode (struct --Gnode))

;;; Structure of Glist
(deftype Glist struct
  (decl head (ptr Gnode))  ; pointer to the head node
  (decl crnt (ptr Gnode))) ; pointer to the current node

;;; Structure of threadInfo
(deftype threadInfo struct
  (decl loopStart int)
  (decl loopEnd int))

;;; Edge Data
(decl eTo (array int E-SIZE))   ; vertex that this edge points to
(decl eNext (array int E-SIZE)) ; next edge (index for eTo)

;;; Vertex Data
(decl vDegree (array int V-SIZE))                ; # of edges from this vertex
(decl vFirstEdge (array int V-SIZE))             ; first edge (index for eTo)
(decl vItem (array (array set BIT-ITEM) V-SIZE)) ; itemset ("i-th bit ==1" means the vertex has the item 'i')
(decl vNumItems (array int V-SIZE))              ; # of items the vertex has

;;; Input File
(%defconstant P-FILE "data/symatlas_pattern.txt")
(%defconstant G-FILE "data/symatlas_graph.txt")

;;; Global Variables
(decl th int) ; threshold of common itemset size
(decl spawnSize int)
(decl t0 (struct timeval))
(decl t (array (array (struct timeval) 2) V-SIZE))
(decl doneID  (array int V-SIZE))
(decl fpTask (ptr FILE))
(decl fpLock (ptr FILE))
(decl fpCopy (ptr FILE))
(def inited int 0)
(def commTimeStamp int 0)

;;; Worker Data
(decl searchSpace (array uint64_t NUM-WORKERS))
(decl visit2Vertices (array uint64_t NUM-WORKERS))
(decl thresholdPruning (array uint64_t NUM-WORKERS))
(decl inclusivePruning (array uint64_t NUM-WORKERS))
(decl taskRequest (array int NUM-WORKERS))
(decl seqTaskRequest (array int NUM-WORKERS))
(decl tableReference (array uint64_t NUM-WORKERS))
(decl numRedundantSearch (array int NUM-WORKERS))
(decl numThrow (array int NUM-WORKERS))

;;; Item Table
(def vItemTable (ptr ITlist))

;; Exception Queue
(def Qe (array (array vtx Q-SIZE) NUM-WORKERS))
(def numQe (array int NUM-WORKERS))

;;; Mutex
(decl itMutex (array pthread_mutex_t V-SIZE))
(decl excpMutex (array pthread_mutex_t NUM-WORKERS))

;;; Cut Off
(%defconstant ENABLE-CUT-OFF 0)
(%defconstant CUT-OFF-VALUE 10)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;; Function: getrusageSec - have the user time
(def (csym::getrusageSec) (fn double void)
  (decl t (struct rusage))
  (decl tv (struct timeval))
  (csym::getrusage RUSAGE-SELF (ptr t))
  (= tv t.ru-utime)
  (return (+ tv.tv-sec (* (cast double tv.tv-usec) 0.000001))))

;;; Function: elapsedTime - have the time
(def (csym::elapsedTime t1 t2) (fn double (ptr (struct timeval)) (ptr (struct timeval)))
  (return (+ (- (fref t2 -> tv-sec) (fref t1 -> tv-sec)) (* 0.000001 (- (fref t2 -> tv-usec) (fref t1 -> tv-usec))))))

;;; Function: countBits32 - count the number of "i-th bit == 1"
(def (csym::countBits32 x) (fn int uint32_t)
  (= x (+ (bit-and x #x55555555) (bit-and (>> x 1) #x55555555))) 
  (= x (+ (bit-and x #x33333333) (bit-and (>> x 2) #x33333333))) 
  (= x (+ (bit-and x #x0f0f0f0f) (bit-and (>> x 4) #x0f0f0f0f))) 
  (= x (+ (bit-and x #x00ff00ff) (bit-and (>> x 8) #x00ff00ff))) 
  (return (+ (bit-and x #x0000ffff) (bit-and (>> x 16) #x0000ffff))))

;;; Function: countBits64 - count the number of "i-th bit == 1"
(def (csym::countBits64 x) (fn int uint64_t)
  (= x (+ (bit-and x (c-exp "0x5555555555555555UL")) (>> (bit-and x (c-exp "0xaaaaaaaaaaaaaaaaUL")) 1)))
  (= x (+ (bit-and x (c-exp "0x3333333333333333UL")) (>> (bit-and x (c-exp "0xccccccccccccccccUL")) 2)))
  (= x (+ (bit-and x (c-exp "0x0f0f0f0f0f0f0f0fUL")) (>> (bit-and x (c-exp "0xf0f0f0f0f0f0f0f0UL")) 4)))
  (= x (+ (bit-and x (c-exp "0x00ff00ff00ff00ffUL")) (>> (bit-and x (c-exp "0xff00ff00ff00ff00UL")) 8)))
  (= x (+ (bit-and x (c-exp "0x0000ffff0000ffffUL")) (>> (bit-and x (c-exp "0xffff0000ffff0000UL")) 16)))
  (= x (+ (bit-and x (c-exp "0x00000000ffffffffUL")) (>> (bit-and x (c-exp "0xffffffff00000000UL")) 32)))
  (return x))

;;; Function: printBits - print a variable with set data type by binary representation
(def (csym::printBits x) (fn void (const set))
  (decl i int)
  (def mask set (<< (cast set 1) (- BIT-LEN 1)))
  (for ((= i 0) (< i BIT-LEN) (inc i))
    (if (bit-and x mask)
      (csym::fprintf stderr "1")
      (csym::fprintf stderr "0"))
    (>>= mask 1)))

;;; Function: fprintBits - write a variable with set data type by binary representation to stream
(def (csym::fprintBits fp x) (fn void (ptr FILE) (const set))
  (decl i int)
  (def mask set (<< (cast set 1) (- BIT-LEN 1)))
  (for ((= i 0) (< i BIT-LEN) (inc i))
    (if (bit-and x mask)
      (csym::fprintf fp "1")
      (csym::fprintf fp "0"))
    (>>= mask 1)))

;;; Function: fprintDecimally - write a variable with set date type by decimal representation to stream
(def (csym::fprintDecimally fp x k) (fn void (ptr FILE) (const set) int)
  (decl i int)
  (def mask set 1)
  (for ((= i 0) (< i BIT-LEN) (inc i))
    (if (bit-and x mask)
      (csym::fprintf fp "%d " (+ i (* k BIT-LEN))))
    (<<= mask 1)))

;;; Function: resetTaskID - 
(def (csym::resetTaskID param) (fn (ptr void) (ptr void))
  (decl i int)
  (def data (ptr threadInfo) (cast (ptr threadInfo) param))
  (decl ITptr (ptr ITnode))    ; pointer to the ITnode

  (for ((= i (fref data -> loopStart)) (< i (fref data -> loopEnd)) (inc i))
    (= ITptr (fref (fref (aref vItemTable i) head) -> next))
    (while (!= ITptr (fref (aref vItemTable i) head))
      (= (fref ITptr -> minID) (cast task-id 0))
      (= (fref ITptr -> maxID) (cast task-id 0))
      (= ITptr (fref ITptr -> next))))

  (csym::pthread_exit 0))

;;; Function: allocITnode - allocate a ITnode
(def (csym::allocITnode) (fn (ptr ITnode))
  (return (cast (ptr ITnode) (csym::malloc(sizeof ITnode)))))

;;; Function: isEmptyITlist - determine whether ITlist is empty
(def (csym::isEmptyITlist list) (fn int (ptr ITlist))
  (return (== (fref (fref list -> head) -> next) (fref list -> head))))

;;; Function: initITlist - initialize ITlist
(def (csym::initITlist list) (fn void (ptr ITlist))
  (decl i int)
  (def dummyNode (ptr ITnode) (csym::allocITnode))
  (= (fref dummyNode -> minID) (cast task-id 0))
  (= (fref dummyNode -> maxID) (cast task-id 0))
  (for ((= i 0) (< i BIT-ITEM) (inc i))
    (= (aref (fref dummyNode -> item) i) (cast set 0)))
  (= (fref dummyNode -> worker) -1)
  (= (fref dummyNode -> flagRedundant) 0)
  (= (fref list -> crnt) dummyNode)
  (= (fref list -> head) dummyNode)
  (= (fref dummyNode -> next) dummyNode)
  (= (fref dummyNode -> prev) dummyNode))

;;; Function: insertITnodeAfter - insert a new ITnode after the pointer 'p'
(def (csym::insertITnodeAfter list p time minID maxID item worker) (fn void (ptr ITlist) (ptr ITnode) int task-id task-id (array set) int)
  (decl i int)
  (def new (ptr ITnode) (csym::allocITnode))
  (def nxt (ptr ITnode) (fref p -> next))
  (= (fref (fref p -> next) -> prev) new)
  (= (fref p -> next) new)
  (= (fref new -> timeStamp) time)
  (= (fref new -> minID) minID)
  (= (fref new -> maxID) maxID)
  (for ((= i 0) (< i BIT-ITEM) (inc i))
    (= (aref (fref new -> item) i) (aref item i)))
  (= (fref new -> worker) worker)
  (= (fref new -> flagRedundant) 0)
  (= (fref new -> prev) p)
  (= (fref new -> next) nxt)
  (= (fref list -> crnt) new))

;;; Function: removeITnode - remove ITnode
(def (csym::removeITnode list p) (fn void (ptr ITlist) (ptr ITnode))
  (= (fref (fref p -> prev) -> next) (fref p -> next))
  (= (fref (fref p -> next) -> prev) (fref p -> prev))
  (= (fref list -> crnt) (fref p -> prev))
  (csym::free p))

;;; Function: clearITlist - remove all ITnodes of ITlist
(def (csym::clearITlist list) (fn void (ptr ITlist))
  (while (not (csym::isEmptyITlist list))
    (csym::removeITnode list (fref (fref list -> head) -> next))))

;;; Function: termITlist - dispose of ITlist
(def (csym::termITlist list) (fn void (ptr ITlist))
  (while (not (csym::isEmptyITlist list))
    (csym::removeITnode list (fref (fref list -> head) -> next)))
  (csym::free (fref list -> head))
  (= (fref list -> crnt) NULL)
  (= (fref list -> head) NULL))

;;; Function: allocGnode - allocate a Gnode
(def (csym::allocGnode) (fn (ptr Gnode))
  (return (cast (ptr Gnode) (csym::malloc(sizeof Gnode)))))

;;; Function: isEmptyGlist - determine whether Glist is empty
(def (csym::isEmptyGlist list) (fn int (ptr Glist))
  (return (== (fref (fref list -> head) -> next) (fref list -> head))))

;;; Function: initGlist - initialize Glist
(def (csym::initGlist list) (fn void (ptr Glist))
  (def dummyNode (ptr Gnode) (csym::allocGnode))
  (= (fref list -> crnt) dummyNode)
  (= (fref list -> head) dummyNode)
  (= (fref dummyNode -> next) dummyNode)
  (= (fref dummyNode -> prev) dummyNode))

;;; Function: insertGnodeAfter - insert a new Gnode after the pointer 'p'
(def (csym::insertGnodeAfter list p T numT item) (fn void (ptr Glist) (ptr Gnode) (array vtx) int (array set))
  (decl i int)
  (def new (ptr Gnode) (csym::allocGnode))
  (def nxt (ptr Gnode) (fref p -> next))

  (= (fref (fref p -> next) -> prev) new)
  (= (fref p -> next) new)

  (= (fref new -> numT) numT)

  (= (fref new -> T) (cast (ptr vtx) (csym::malloc (* (fref new ->  numT) (sizeof vtx)))))
  (for ((= i 0) (< i (fref new -> numT)) (inc i))
    (= (aref (fref new -> T) i) (aref T i)))

  (for ((= i 0) (< i BIT-ITEM) (inc i))
    (= (aref (fref new -> item) i) (aref item i)))

  (= (fref new -> prev) p)
  (= (fref new -> next) nxt)
  (= (fref list -> crnt) new))

;;; Function: removeGnode - remove Gnode
(def (csym::removeGnode list p) (fn void (ptr Glist) (ptr Gnode))
  (= (fref (fref p -> prev) -> next) (fref p -> next))
  (= (fref (fref p -> next) -> prev) (fref p -> prev))
  (= (fref list -> crnt) (fref p -> prev))
  (csym::free p))

;;; Function: termGlist - dispose of Glist
(def (csym::termGlist list) (fn void (ptr Glist))
  (while (not (csym::isEmptyGlist list))
    (csym::removeGnode list (fref (fref list -> head) -> next)))
  (csym::free (fref list -> head))
  (= (fref list -> crnt) NULL)
  (= (fref list -> head) NULL))


;;;
(def (task T-exploreCCIG)
  (def minID task-id)
  (def maxID task-id)
  (def minC int)
  (def maxC int)
  (def v int)
  (def itemSet (array set BIT-ITEM))
  (def vTraversed (ptr int))
  ;(def vItemTable (ptr ITlist))
  (def C (ptr vtx))
  (def numC int)
  (def sizeOfC int)
  (def T (ptr vtx))
  (def numT int)
  (def sizeOfT int)
  (def subgraph Glist)
  (def treeDepth uint64_t)
  (def numTraversed uint64_t)
  (def numSubgraph int)
  (def numSearch uint64_t)
  (def numThreshold uint64_t)
  (def numPruning int)
  (def numTableReference uint64_t)
  (def numITmutexTrylock uint64_t)
  (def numITmutexLocked uint64_t)
  (def numEmutexTrylock uint64_t)
  (def numEmutexLocked uint64_t))

(def (task-sender T-exploreCCIG)
  (defs int i j k)
  (decl numElem int)
  (def numSentElem int 0)
  (decl ITptr (ptr ITnode))
  (decl tp (array (struct timeval) 2))
  ;(csym::fprintf stderr "start sending_exploreCCIG~%")
  (csym::gettimeofday tp 0)
  (csym::send-int th)
  (csym::send-int spawnSize)
  (csym::send-int (fref this minC))
  (csym::send-int (fref this maxC))
  (for ((= i 0) (< i (/ TASK-LEN COMM-LEN)) (inc i))
    (csym::send-uint32 (cast uint32_t (>> (fref this minID) (* COMM-LEN i))))
    (csym::send-uint32 (cast uint32_t (>> (fref this maxID) (* COMM-LEN i)))))
  (csym::send-int (fref this v))
  (for ((= i 0) (< i BIT-ITEM) (inc i))
    (csym::send-uint32 (aref (fref this itemSet) i)))
  (for ((= i 0) (< i V-SIZE) (inc i))
    (csym::send-int (aref (fref this vTraversed) i)))
  (csym::send-int (fref this numC))
  (for ((= i 0) (< i (fref this numC)) (inc i))
    (csym::send-uint32 (aref (fref this C) i)))
  (csym::send-int (fref this numT))
  (for ((= i 0) (< i (fref this numT)) (inc i))
    (csym::send-uint32 (aref (fref this T) i)))
  (csym::gettimeofday (+ tp 1) 0)
  (csym::fprintf stderr "end sending_exploreCCIG, %f, %d, %d~%" (csym::elapsedTime tp (+ tp 1)) (fref this numC) (fref this numT))
  (csym::gettimeofday tp 0)
  (for ((= i 0) (< i V-SIZE) (inc i))
    (csym::pthread_mutex_lock (ptr (aref itMutex i)))
    (= numElem 0)
    (= ITptr (fref (fref (aref vItemTable i) head) -> next))
    (while (!= ITptr (fref (aref vItemTable i) head))
      (if (<= commTimeStamp (fref ITptr -> timeStamp))
        (begin
          (inc numElem)
          (= ITptr (fref ITptr -> next)))
        (begin
          (break))))
    (= ITptr (fref ITptr -> prev))
    (csym::send-int numElem)
    (+= numSentElem numElem)
    (for ((= j 0) (< j numElem) (inc j))
      (for ((= k 0) (< k (/ TASK-LEN COMM-LEN)) (inc k))
        (csym::send-uint32 (cast uint32_t (>> (fref ITptr -> minID) (* COMM-LEN k))))
        (csym::send-uint32 (cast uint32_t (>> (fref ITptr -> maxID) (* COMM-LEN k)))))
      (for ((= k 0) (< k BIT-ITEM) (inc k))
        (csym::send-uint32 (aref (fref ITptr -> item) k)))
      (= ITptr (fref ITptr -> prev)))
    (csym::pthread_mutex_unlock (ptr (aref itMutex i))))
  (csym::gettimeofday (+ tp 1) 0)
  (inc commTimeStamp)
  (csym::fprintf stderr "IT: task-sender_exploreCCIG, %d, %f~%" numSentElem (csym::elapsedTime tp (+ tp 1))))

(def (task-receiver T-exploreCCIG)
  (defs int i j k m)
  (def numRecvElem int 0)
  (decl numITelem int)
  (decl ITminID task-id)
  (decl ITmaxID task-id)
  (decl ITitem (array set BIT-ITEM))
  (decl ITptr (ptr ITnode))
  (decl ITflag int)
  (decl tp (array (struct timeval) 2))
  (def detectRedundantSearch int 0)
  (initExploreCCIG NULL NULL NULL NULL (ptr this))
  ;(csym::fprintf stderr "start receiving_exploreCCIG~%")
  (if (not inited)
    (csym::gettimeofday (ptr t0) 0))
  (csym::gettimeofday tp 0)
  (= th (csym::recv-int))
  (= spawnSize (csym::recv-int))
  (= (fref this minC) (csym::recv-int))
  (= (fref this maxC) (csym::recv-int))
  (= (fref this minID) 0)
  (= (fref this maxID) 0)
  (for ((= i 0) (< i (/ TASK-LEN COMM-LEN)) (inc i))
    (= (fref this minID) (bit-or (fref this minID) (<< (cast task-id (csym::recv-uint32)) (* COMM-LEN i))))
    (= (fref this maxID) (bit-or (fref this maxID) (<< (cast task-id (csym::recv-uint32)) (* COMM_LEN i)))))
  (= (fref this v) (csym::recv-int))
  (for ((= i 0) (< i BIT-ITEM) (inc i))
    (= (aref (fref this itemSet) i) (cast set (csym::recv-uint32))))
  (for ((= i 0) (< i V-SIZE) (inc i))
    (= (aref (fref this vTraversed) i) (csym::recv-int)))
  (= (fref this numC) (csym::recv-int))
  (for ((= i 0) (< i (fref this numC)) (inc i))
    (= (aref (fref this C) i) (csym::recv-uint32)))
  (= (fref this numT) (csym::recv-int))
  (for ((= i 0) (< i (fref this numT)) (inc i))
    (= (aref (fref this T) i) (csym::recv-uint32)))
  (csym::gettimeofday (+ tp 1) 0)
  (csym::fprintf stderr "end receiving_exploreCCIG, %f, %f, %d, %d~%" (csym::elapsedTime (ptr t0) (+ tp 1)) (csym::elapsedTime tp (+ tp 1)) (fref this numC) (fref this numT))
  (if (not inited)
    (begin
      (decl edgeMax int)
      (decl minVertex int)
      (decl maxVertex int)
      (decl maxNumItems int)
      (defs (struct hsearch_data) eHash iHash)
      (initData (ptr edgeMax) (ptr minVertex) (ptr maxVertex) (ptr maxNumItems) (ptr eHash) (ptr iHash))
      (loadPatternFile (ptr maxNumItems) (ptr eHash) (ptr iHash))
      (loadGraphFile (ptr edgeMax) (ptr minVertex) (ptr maxVertex) (ptr eHash))
      ;(thresholdItem minVertex maxVertex)
      (for ((= i 0) (< i V-SIZE) (inc i))
        (csym::pthread_mutex_init (ptr (aref itMutex i)) NULL))
      (for ((= i 0) (< i NUM-WORKERS) (inc i))
        (csym::pthread_mutex_init (ptr (aref excpMutex i)) NULL))
      (csym::hdestroy_r (ptr eHash))
      (csym::hdestroy_r (ptr iHash))
      (= inited 1)))
  (csym::gettimeofday tp 0)
  (for ((= i 0) (< i V-SIZE) (inc i))
    (csym::pthread_mutex_lock (ptr (aref itMutex i)))
    (= numITelem (csym::recv-int))
    (+= numRecvElem numITelem)
    (for ((= j 0) (< j numITelem) (inc j))
      (= ITminID 0)
      (= ITmaxID 0)
      (for ((= k 0) (< k (/ TASK-LEN COMM-LEN)) (inc k))
        (= ITminID (bit-or ITminID (<< (cast task-id (csym::recv-uint32)) (* COMM-LEN k))))
        (= ITmaxID (bit-or ITmaxID (<< (cast task-id (csym::recv-uint32)) (* COMM_LEN k)))))
      (for ((= k 0) (< k BIT-ITEM) (inc k))
        (= (aref ITitem k) (cast set (csym::recv-uint32))))
      (= ITflag 1)
      (= ITptr (fref (fref (aref vItemTable i) head) -> next))
      (while (!= ITptr (fref (aref vItemTable i) head))
        (if (<= (fref ITptr -> minID) ITminID)
          (begin
            (for ((= k 0) (= m 0) (< k BIT-ITEM) (inc k))
              (if (== (cast set (bit-and (aref ITitem k) (aref (fref ITptr -> item) k))) (aref ITitem k))
                (inc m)))
            (if (== BIT-ITEM m)
              (begin
                (= ITflag 0)
                (break)))))
        (if (>= (fref ITptr -> minID) ITminID)
          (begin
            (for ((= k 0) (= m 0) (< k BIT-ITEM) (inc k))
              (if (== (cast set (bit-and (aref (fref ITptr -> item) k) (aref ITitem k))) (aref (fref ITptr -> item) k))
                (inc m)))
            (if (== m BIT-ITEM)
              (begin
                (if (== -1 (fref ITptr -> worker))
                  (begin
                    (= ITptr (fref ITptr -> prev))
                    (csym::removeITnode (ptr (aref vItemTable i)) (fref ITptr -> next)))
                  (begin
                    (inc detectRedundantSearch)
                    (inc (aref numRedundantSearch (fref ITptr -> worker)))
                    (csym::pthread_mutex_lock (ptr (aref excpMutex (fref ITptr -> worker))))
                    (= (aref Qe (fref ITptr -> worker) (inc (aref numQe (fref ITptr -> worker)))) i)
                    (csym::pthread_mutex_unlock (ptr (aref excpMutex (fref ITptr -> worker))))
                    (= (fref ITptr -> flagRedundant) 1)))))))
        (= ITptr (fref ITptr -> next)))
      (if (== 1 ITflag)
        (begin
          (csym::insertITnodeAfter (ptr (aref vItemTable i)) (fref (fref (aref vItemTable i) head) -> prev) -1 ITminID ITmaxID ITitem -1))))
    (csym::pthread_mutex_unlock (ptr (aref itMutex i))))
  (csym::gettimeofday (+ tp 1) 0)
  (csym::fprintf stderr "IT: task-receiver_exploreCCIG, %d, %f, %f, %d~%" numRecvElem (csym::elapsedTime tp (+ tp 1)) (csym::elapsedTime (ptr t0) (+ tp 1)) detectRedundantSearch))

(def (rslt-sender T-exploreCCIG)
  (defs int i j k)
  (decl numElem int)
  (def numSentElem int 0)
  (decl ITptr (ptr ITnode))
  (decl tp (array (struct timeval) 2))
  ;(csym::fprintf stderr "start: rslt-sender_exploreCCIG~%")
  (csym::gettimeofday tp 0)
  (for ((= i 0) (< i V-SIZE) (inc i))
    (csym::pthread_mutex_lock (ptr (aref itMutex i)))
    (= numElem 0)
    (= ITptr (fref (fref (aref vItemTable i) head) -> next))
    (while (!= ITptr (fref (aref vItemTable i) head))
      (if (<= commTimeStamp (fref ITptr -> timeStamp))
        (begin
          (inc numElem)
          (= ITptr (fref ITptr -> next)))
        (begin
          (break))))
    (= ITptr (fref ITptr -> prev))
    (csym::send-int numElem)
    (+= numSentElem numElem)
    (for ((= j 0) (< j numElem) (inc j))
      (for ((= k 0) (< k (/ TASK-LEN COMM-LEN)) (inc k))
        (csym::send-uint32 (cast uint32_t (>> (fref ITptr -> minID) (* COMM-LEN k))))
        (csym::send-uint32 (cast uint32_t (>> (fref ITptr -> maxID) (* COMM-LEN k)))))
      (for ((= k 0) (< k BIT-ITEM) (inc k))
        (csym::send-uint32 (aref (fref ITptr -> item) k)))
      (= ITptr (fref ITptr -> prev)))
    (csym::pthread_mutex_unlock (ptr (aref itMutex i))))
  (csym::gettimeofday (+ tp 1) 0)
  (inc commTimeStamp)
  (csym::fprintf stderr "IT: rslt-sender_exploreCCIG, %d, %f~%" numSentElem (csym::elapsedTime tp (+ tp 1))))

(def (rslt-receiver T-exploreCCIG)
  (defs int i j k m)
  (def numRecvElem int 0)
  (decl numITelem int)
  (decl ITminID task-id)
  (decl ITmaxID task-id)
  (decl ITitem (array set BIT-ITEM))
  (decl ITptr (ptr ITnode))
  (decl ITflag int)
  (def detectRedundantSearch int 0)
  (decl tp (array (struct timeval) 2))
  ;(csym::fprintf stderr "start: rslt-receiver_exploreCCIG~%")
  (csym::gettimeofday tp 0)
  (for ((= i 0) (< i V-SIZE) (inc i))
    (csym::pthread_mutex_lock (ptr (aref itMutex i)))
    (= numITelem (csym::recv-int))
    (+= numRecvElem numITelem)
    (for ((= j 0) (< j numITelem) (inc j))
      (= ITminID 0)
      (= ITmaxID 0)
      (for ((= k 0) (< k (/ TASK-LEN COMM-LEN)) (inc k))
        (= ITminID (bit-or ITminID (<< (cast task-id (csym::recv-uint32)) (* COMM-LEN k))))
        (= ITmaxID (bit-or ITmaxID (<< (cast task-id (csym::recv-uint32)) (* COMM_LEN k)))))
      (for ((= k 0) (< k BIT-ITEM) (inc k))
        (= (aref ITitem k) (cast set (csym::recv-uint32))))
      (= ITflag 1)
      (= ITptr (fref (fref (aref vItemTable i) head) -> next))
      (while (!= ITptr (fref (aref vItemTable i) head))
        (if (<= (fref ITptr -> minID) ITminID)
          (begin
            (for ((= k 0) (= m 0) (< k BIT-ITEM) (inc k))
              (if (== (cast set (bit-and (aref ITitem k) (aref (fref ITptr -> item) k))) (aref ITitem k))
                (inc m)))
            (if (== BIT-ITEM m)
              (begin
                (= ITflag 0)
                (break)))))
        (if (>= (fref ITptr -> minID) ITminID)
          (begin
            (for ((= k 0) (= m 0) (< k BIT-ITEM) (inc k))
              (if (== (cast set (bit-and (aref (fref ITptr -> item) k) (aref ITitem k))) (aref (fref ITptr -> item) k))
                (inc m)))
            (if (== m BIT-ITEM)
              (begin
                (if (== -1 (fref ITptr -> worker))
                  (begin
                    (= ITptr (fref ITptr -> prev))
                    (csym::removeITnode (ptr (aref vItemTable i)) (fref ITptr -> next)))
                  (begin
                    (inc detectRedundantSearch)
                    (inc (aref numRedundantSearch (fref ITptr -> worker)))
                    (csym::pthread_mutex_lock (ptr (aref excpMutex (fref ITptr -> worker))))
                    (= (aref Qe (fref ITptr -> worker) (inc (aref numQe (fref ITptr -> worker)))) i)
                    (csym::pthread_mutex_unlock (ptr (aref excpMutex (fref ITptr -> worker))))
                    (= (fref ITptr -> flagRedundant) 1)))))))
        (= ITptr (fref ITptr -> next)))
      (if (== 1 ITflag)
        (begin
          (csym::insertITnodeAfter (ptr (aref vItemTable i)) (fref (fref (aref vItemTable i) head) -> prev) -1 ITminID ITmaxID ITitem -1))))
    (csym::pthread_mutex_unlock (ptr (aref itMutex i))))
  (csym::gettimeofday (+ tp 1) 0)
  (csym::fprintf stderr "IT: rslt-receiver_exploreCCIG, %d, %f, %f, %d~%" numRecvElem (csym::elapsedTime tp (+ tp 1)) (csym::elapsedTime (ptr t0) (+ tp 1)) detectRedundantSearch)
  (csym::fprintf stderr "end: rslt-receiver_exploreCCIG~%"))

;;;Function: initExploreCCIG - 
(def (initExploreCCIG traversed itemTable C T pTsk) (fn void (ptr int) (ptr ITlist) (ptr vtx) (ptr vtx) (ptr (struct T-exploreCCIG)))
  (decl i int)

  ;; initialize vTraversed
  (= (fref pTsk -> vTraversed) (cast (ptr int) (csym::calloc V-SIZE (sizeof int))))

  ;; initialize vItemTable
  ;(if (== itemTable NULL)
  ;  (begin
  ;    (= (fref pTsk -> vItemTable) (cast (ptr ITlist) (csym::malloc (* V-SIZE (sizeof ITlist)))))
  ;    (for ((= i 0) (< i V-SIZE) (inc i))
  ;      (csym::initITlist (ptr (aref (fref pTsk -> vItemTable) i)))))
  ;  (begin
  ;    (= (fref pTsk -> vItemTable) itemTable)))

  ;; initialize C
  (= (fref pTsk -> numC) 0)
  (= (fref pTsk -> sizeOfC) 10000)
  (= (fref pTsk -> C) (cast (ptr vtx) (csym::malloc (* (fref pTsk ->  sizeOfC) (sizeof vtx)))))

  ;; initialize T
  (= (fref pTsk -> numT) 0)
  (= (fref pTsk -> sizeOfT) 100)
  (= (fref pTsk -> T) (cast (ptr vtx) (csym::malloc (* (fref pTsk ->  sizeOfT) (sizeof vtx)))))

  ;; init subgraph
  (csym::initGlist (ptr (fref pTsk -> subgraph)))

  ;; init Debug Data
  (= (fref pTsk -> treeDepth) 0)
  (= (fref pTsk -> numTraversed) 0)
  (= (fref pTsk -> numSubgraph) 0)
  (= (fref pTsk -> numSearch) 0)
  (= (fref pTsk -> numThreshold) 0) 
  (= (fref pTsk -> numPruning) 0)
  (= (fref pTsk -> numTableReference) 0)
  (= (fref pTsk -> numITmutexTrylock) 0)
  (= (fref pTsk -> numITmutexLocked) 0)
  (= (fref pTsk -> numEmutexTrylock) 0)
  (= (fref pTsk -> numEmutexLocked) 0))

;;; Function: exploreCCIG2 - create a common-itemset tree with recursive call
(def (exploreCCIG2 minC maxC v itemSet pTsk) (wfn void int int int (array set) (ptr (struct T-exploreCCIG)))
  (defs int i j k l m)                   ; temporary variable
  (def cc int 0)                         ; # of newly added candidates
  (decl vv int)                          ; vertex whice is searched next time
  (def numC int (fref pTsk -> numC))     ; 
  (decl commonNum int)                   ; # of common itemset
  (decl commonItem (array set BIT-ITEM)) ; common itemset
  (def closed int 1)                     ; flag which denotes subgraph is closed
  (decl pruning int)                     ; flag to prune
  (def excpValue int -1)                 ; exception value
  (def excpIndex int -1)                 ; 
  (decl ITptr (ptr ITnode))              ; pointer to the ITnode
  (decl ITadd (ptr ITnode))              ; 
  (decl locked int)                      ; 
  (decl tp (array (struct timeval) 2))   ;

  ;(inc (fref pTsk -> numEmutexTrylock))
  ;(if (!= (csym::pthread_mutex_trylock (ptr (aref excpMutex (fref -thr -> id)))) 0)
  ;  (begin
  ;    (inc (fref pTsk -> numEmutexLocked))
  ;    (csym::pthread_mutex_lock (ptr (aref excpMutex (fref -thr -> id))))))
  ;(if (aref numQe (fref -thr -> id))
  ;  (begin
  ;    (= excpIndex INT_MAX)
  ;    (for ((= j 0) (< j (aref numQe (fref -thr -> id))) (inc j))
  ;      (for ((= k 0) (< k (fref pTsk -> numT)) (inc k))
  ;        (if (== (aref Qe (fref -thr -> id) j) (aref (fref pTsk -> T) k))
  ;          (begin
  ;            (if (< k excpIndex)
  ;              (begin
  ;                (= excpValue (cast int (aref (fref pTsk -> T) k)))
  ;                (= excpIndex k)))
  ;            (break)))))
  ;    (= (aref numQe (fref -thr -> id)) 0)))
  ;(csym::pthread_mutex_unlock (ptr (aref excpMutex (fref -thr -> id))))
  ;(if (!= excpValue -1)
  ;  (begin
  ;    (inc (aref numThrow (fref -thr -> id)))
  ;    (throw excpValue)))

  ;(if (aref numQe (fref -thr -> id))
  ;  (begin
  ;    (inc (fref pTsk -> numEmutexTrylock))
  ;    (if (!= (csym::pthread_mutex_trylock (ptr (aref excpMutex (fref -thr -> id)))) 0)
  ;      (begin
  ;        (inc (fref pTsk -> numEmutexLocked))
  ;        (csym::pthread_mutex_lock (ptr (aref excpMutex (fref -thr -> id))))))
  ;    (= excpValue -1)
  ;    (= excpIndex INT_MAX)
  ;    (for ((= j 0) (< j (aref numQe (fref -thr -> id))) (inc j))
  ;      (for ((= k 0) (< k (fref pTsk -> numT)) (inc k))
  ;        (if (== (aref Qe (fref -thr -> id) j) (aref (fref pTsk -> T) k))
  ;          (begin
  ;            (if (< k excpIndex)
  ;              (begin
  ;                (= excpValue (cast int (aref (fref pTsk -> T) k)))
  ;                (= excpIndex k)))
  ;            (break)))))
  ;    (csym::pthread_mutex_unlock (ptr (aref excpMutex (fref -thr -> id))))
  ;    (if (!= excpValue -1)
  ;      (begin
  ;        (inc (aref numThrow (fref -thr -> id)))
  ;        (= (aref numQe (fref -thr -> id)) 0)
  ;        (throw excpValue)))))

  ;; DFS
  (for ((= i minC) (< i maxC) (inc i))
    (= vv (aref (fref pTsk -> C) (- (- (fref pTsk -> numC) i) 1)))
    (inc (aref (fref pTsk -> vTraversed) vv))

    (if (== (aref (fref pTsk -> vTraversed) vv) 1)
      (begin
        ;; evaluate common itemset
        (for ((= k 0) (= m 0) (= commonNum 0) (< k BIT-ITEM) (inc k))
          (= (aref commonItem k) (cast set (bit-and (aref itemSet k) (aref vItem vv k))))
          ;(+= commonNum (csym::countBits32 (aref commonItem k)))
          ;(+= commonNum (csym::countBits64 (aref commonItem k)))
          (+= commonNum (csym::_mm_popcnt_u32 (aref commonItem k)))
          ;(+= commonNum (csym::_mm_popcnt_u64 (aref commonItem k)))
          (if (== (aref commonItem k) (aref itemSet k))
            (inc m)))
        (if (== m BIT-ITEM)
          (= closed 0))

        ;; if # of common-itemset >= th, then
        (if (>= commonNum th)
          (begin
            (= pruning 0)

            ;; check that common-itemset is subset of item table
            (%if* DEBUG-LOCK (begin
              (= locked 0)))
            (inc (fref pTsk -> numITmutexTrylock))
            (if (!= (csym::pthread_mutex_trylock (ptr (aref itMutex vv))) 0)
              (begin
                (inc (fref pTsk -> numITmutexLocked))
                (%if* DEBUG-LOCK (begin
                  (= locked 1)
                  (csym::gettimeofday tp 0)))
                (csym::pthread_mutex_lock (ptr (aref itMutex vv)))))
            (%if* DEBUG-LOCK (begin
              (if locked
                (begin
                  (csym::gettimeofday (+ tp 1) 0)
                  (csym::fprintf fpLock "%f, %d~%" (csym::elapsedTime tp (+ tp 1)) locked)))))
            (= ITptr (fref (fref (aref vItemTable vv) head) -> next))
            (while (!= ITptr (fref (aref vItemTable vv) head))
              (inc (fref pTsk -> numTableReference))
              (if (<= (fref ITptr -> minID) (fref pTsk -> minID))
                (begin
                  (for ((= k 0) (= m 0) (< k BIT-ITEM) (inc k))
                    (if (== (cast set (bit-and (aref commonItem k) (aref (fref ITptr -> item) k))) (aref commonItem k))
                      (inc m)))
                  (if (== m BIT-ITEM)
                    (begin
                      (= pruning 1)
                      (break)))))
              (= ITptr (fref ITptr -> next)))
            (csym::pthread_mutex_unlock (ptr (aref itMutex vv)))

            ;; if common-itemset is not subset of item table, then
            (if (not pruning)
              (begin
                (inc (fref pTsk -> numTraversed))
                (+= (fref pTsk -> treeDepth) (+ (fref pTsk -> numT) 1))

                (%if* DEBUG-LOCK (begin
                  (= locked 0)))
                (inc (fref pTsk -> numITmutexTrylock))
                (if (!= (csym::pthread_mutex_trylock (ptr (aref itMutex vv))) 0)
                  (begin
                    (inc (fref pTsk -> numITmutexLocked))
                    (%if* DEBUG-LOCK (begin
                      (= locked 1)
                      (csym::gettimeofday tp 0)))
                    (csym::pthread_mutex_lock (ptr (aref itMutex vv)))))
                (%if* DEBUG-LOCK (begin
                  (if locked
                    (begin
                      (csym::gettimeofday (+ tp 1) 0)
                      (csym::fprintf fpLock "%f, %d~%" (csym::elapsedTime tp (+ tp 1)) locked)))))
                (= ITptr (fref (fref (aref vItemTable vv) head) -> next))
                (while (!= ITptr (fref (aref vItemTable vv) head))
                  (inc (fref pTsk -> numTableReference))
                  (if (>= (fref ITptr -> minID) (fref pTsk -> minID))
                    (begin
                      (for ((= k 0) (= m 0) (< k BIT-ITEM) (inc k))
                        (if (== (cast set (bit-and (aref (fref ITptr -> item) k) (aref commonItem k))) (aref (fref ITptr -> item) k))
                          (inc m)))
                      (= ITptr (fref ITptr -> next))
                      (if (== m BIT-ITEM)
                        (begin
                          (if (== (fref (fref ITptr -> prev) -> worker) -1)
                            (begin
                              (csym::removeITnode (ptr (aref vItemTable vv)) (fref ITptr -> prev)))
                            (begin
                              (inc (aref numRedundantSearch (fref (fref ITptr -> prev) -> worker)))
                              (inc (fref pTsk -> numEmutexTrylock)) 
                              (if (!= (csym::pthread_mutex_trylock (ptr (aref excpMutex (fref (fref ITptr -> prev) -> worker)))) 0)
                                (begin
                                  (inc (fref pTsk -> numEmutexLocked))
                                  (csym::pthread_mutex_lock (ptr (aref excpMutex (fref (fref ITptr -> prev) -> worker))))))
                              (= (aref Qe (fref (fref ITptr -> prev) -> worker) (inc (aref numQe (fref (fref ITptr -> prev) -> worker)))) vv)
                              (csym::pthread_mutex_unlock (ptr (aref excpMutex (fref (fref ITptr -> prev) -> worker))))
                              (= (fref (fref ITptr -> prev) -> flagRedundant) 1))))))
                    (begin
                      (= ITptr (fref ITptr -> next)))))
                (csym::insertITnodeAfter (ptr (aref vItemTable vv)) (fref (aref vItemTable vv) head) commTimeStamp (fref pTsk -> minID) (fref pTsk -> maxID) commonItem (fref -thr -> id))
                (= ITadd (fref (aref vItemTable vv) crnt))
                (csym::pthread_mutex_unlock (ptr (aref itMutex vv)))

                (inc (fref pTsk -> numSearch))

                ;; add new candidates 
                (if (>= (+ (fref pTsk -> numC) (aref vDegree vv)) (fref pTsk -> sizeOfC))
                  (begin
                    (*= (fref pTsk -> sizeOfC) 2)
                    (= (fref pTsk -> C) (cast (ptr vtx) (csym::realloc (fref pTsk -> C) (* (fref pTsk ->  sizeOfC) (sizeof vtx)))))))
                (for ((= cc 0) (= j (aref vFirstEdge vv)) (!= j -1) (= j (aref eNext j)))
                  (if (and (< (aref (fref pTsk -> T) 0) (aref eTo j)) (== (aref (fref pTsk -> vTraversed) (aref eTo j)) 0))
                    (begin
                      (= (aref (fref pTsk -> C) (+ cc (fref pTsk -> numC))) (aref eTo j))
                      (inc cc))))

                ;; update vertices of CCIG
                (if (== (+ (fref pTsk -> numT) 1) (fref pTsk -> sizeOfT))
                  (begin
                    (*= (fref pTsk -> sizeOfT) 2)
                    (= (fref pTsk -> T) (cast (ptr vtx) (csym::realloc (fref pTsk -> T) (* (fref pTsk ->  sizeOfT) (sizeof vtx)))))))
                (= (aref (fref pTsk -> T) (fref pTsk -> numT)) vv)

                ;; update numC & numT
                (+= (fref pTsk -> numC) cc)
                (inc (fref pTsk -> numT))

                (%if* DEBUG-SHOW (begin
                  (begin
                    (for ((= l 0) (< l (- (fref pTsk -> numT) 1)) (inc l))
                      (csym::fprintf stderr " %d -" (aref (fref pTsk -> T) l)))
                    (csym::fprintf stderr "> %d~%" (aref (fref pTsk -> T) (- (fref pTsk -> numT) 1))))))

                ;; recursive call
                (catch vv
                  (exploreCCIG2 0 (fref pTsk -> numC) vv commonItem pTsk)
                  (for ((= j 0) (< j (fref pTsk -> numC)) (inc j))
                    (dec (aref (fref pTsk -> vTraversed) (aref (fref pTsk -> C) j)))))

                (%if* DEBUG-LOCK (begin
                  (= locked 0)))
                (inc (fref pTsk -> numITmutexTrylock))
                (if (!= (csym::pthread_mutex_trylock (ptr (aref itMutex vv))) 0)
                  (begin
                    (inc (fref pTsk -> numITmutexLocked))
                    (%if* DEBUG-LOCK (begin
                      (= locked 1)
                      (csym::gettimeofday tp 0)))
                    (csym::pthread_mutex_lock (ptr (aref itMutex vv)))))
                (%if* DEBUG-LOCK (begin
                  (if locked
                    (begin
                      (csym::gettimeofday (+ tp 1) 0)
                      (csym::fprintf fpLock "%f, %d~%" (csym::elapsedTime tp (+ tp 1)) locked)))))
                (= (fref ITadd -> worker) -1)
                (if (== (fref ITadd -> flagRedundant) 1)
                  (begin
                    (csym::removeITnode (ptr (aref vItemTable vv)) ITadd)))
                (csym::pthread_mutex_unlock (ptr (aref itMutex vv)))
    
                (-= (fref pTsk -> numC) cc)
                (dec (fref pTsk -> numT)))
              (begin
                (inc (fref pTsk -> numPruning))
                (%if* DEBUG-SHOW (begin
                  (begin
                    (csym::fprintf stderr " pruning!! ")
                    (for ((= l 0) (< l (fref pTsk -> numT)) (inc l))
                      (csym::fprintf stderr " %d -" (aref (fref pTsk -> T) l)))
                    (csym::fprintf stderr "> %d~%" vv)))))))
          (begin
            (inc (fref pTsk -> numThreshold))
            (%if* DEBUG-SHOW (begin
              (begin
                (csym::fprintf stderr " threshold!! ")
                (for ((= l 0) (< l (fref pTsk -> numT)) (inc l))
                  (csym::fprintf stderr " %d -" (aref (fref pTsk -> T) l)))
                (csym::fprintf stderr "> %d~%" vv)))))))))

  (if closed
    ;; output common-itemset subgraph
    (begin
      (%if* DEBUG-RSLT (begin
        (csym::insertGnodeAfter (ptr (fref pTsk -> subgraph)) (fref (fref pTsk -> subgraph) crnt) (fref pTsk -> T) (fref pTsk -> numT) itemSet)))
      (inc (fref pTsk -> numSubgraph)))))

;;; Function: exploreCCIG - create a common-itemset tree with recursive call
(def (exploreCCIG minC maxC v itemSet pTsk) (wfn void int int int (array set) (ptr (struct T-exploreCCIG)))
  (defs int i j k l m)                   ; temporary variable
  (def cc int 0)                         ; # of newly added candidates
  (decl vv int)                          ; vertex whice is searched next time
  (def numC int (fref pTsk -> numC))     ; 
  (decl commonNum int)                   ; # of common itemset
  (decl commonItem (array set BIT-ITEM)) ; common itemset
  (def closed int 1)                     ; flag which denotes subgraph is closed
  (decl pruning int)                     ; flag to prune
  (def excpValue int -1)                 ; exception value
  (def excpIndex int -1)                 ; 
  (decl ITptr (ptr ITnode))              ; pointer to the ITnode
  (decl ITadd (ptr ITnode))              ; 
  (decl locked int)                      ; 
  (decl tp (array (struct timeval) 2))   ;
  (decl tpc (array (struct timeval) 4))  ;

  (if (aref numQe (fref -thr -> id))
    (begin
      (inc (fref pTsk -> numEmutexTrylock))
      (if (!= (csym::pthread_mutex_trylock (ptr (aref excpMutex (fref -thr -> id)))) 0)
        (begin
          (inc (fref pTsk -> numEmutexLocked))
          (csym::pthread_mutex_lock (ptr (aref excpMutex (fref -thr -> id))))))
      (= excpValue -1)
      (= excpIndex INT_MAX)
      (for ((= j 0) (< j (aref numQe (fref -thr -> id))) (inc j))
        (for ((= k 0) (< k (fref pTsk -> numT)) (inc k))
          (if (== (aref Qe (fref -thr -> id) j) (aref (fref pTsk -> T) k))
            (begin
              (if (< k excpIndex)
                (begin
                  (= excpValue (cast int (aref (fref pTsk -> T) k)))
                  (= excpIndex k)))
              (break)))))
      (csym::pthread_mutex_unlock (ptr (aref excpMutex (fref -thr -> id))))
      (if (!= excpValue -1)
        (begin
          (inc (aref numThrow (fref -thr -> id)))
          (= (aref numQe (fref -thr -> id)) 0)
          (throw excpValue)))))

  ;; DFS
  (do-many for i from minC to maxC
    (= vv (aref (fref pTsk -> C) (- (- (fref pTsk -> numC) i) 1)))
    (inc (aref (fref pTsk -> vTraversed) vv))

    (if (== (aref (fref pTsk -> vTraversed) vv) 1)
      (begin
        ;; evaluate common itemset
        (for ((= k 0) (= m 0) (= commonNum 0) (< k BIT-ITEM) (inc k))
          (= (aref commonItem k) (cast set (bit-and (aref itemSet k) (aref vItem vv k))))
          ;(+= commonNum (csym::countBits32 (aref commonItem k)))
          ;(+= commonNum (csym::countBits64 (aref commonItem k)))
          (+= commonNum (csym::_mm_popcnt_u32 (aref commonItem k)))
          ;(+= commonNum (csym::_mm_popcnt_u64 (aref commonItem k)))
          (if (== (aref commonItem k) (aref itemSet k))
            (inc m)))
        (if (== m BIT-ITEM)
          (= closed 0))

        ;; if # of common-itemset >= th, then
        (if (>= commonNum th)
          (begin
            (= pruning 0)

            ;; check that common-itemset is subset of item table
            (%if* DEBUG-LOCK (begin
              (= locked 0)))
            (inc (fref pTsk -> numITmutexTrylock))
            (if (!= (csym::pthread_mutex_trylock (ptr (aref itMutex vv))) 0)
              (begin
                (inc (fref pTsk -> numITmutexLocked))
                (%if* DEBUG-LOCK (begin
                  (= locked 1)
                  (csym::gettimeofday tp 0)))
                (csym::pthread_mutex_lock (ptr (aref itMutex vv)))))
            (%if* DEBUG-LOCK (begin
              (if locked
                (begin
                  (csym::gettimeofday (+ tp 1) 0)
                  (csym::fprintf fpLock "%f, %d~%" (csym::elapsedTime tp (+ tp 1)) locked)))))
            (= ITptr (fref (fref (aref vItemTable vv) head) -> next))
            (while (!= ITptr (fref (aref vItemTable vv) head))
              (inc (fref pTsk -> numTableReference))
              (if (<= (fref ITptr -> minID) (fref pTsk -> minID))
                (begin
                  (for ((= k 0) (= m 0) (< k BIT-ITEM) (inc k))
                    (if (== (cast set (bit-and (aref commonItem k) (aref (fref ITptr -> item) k))) (aref commonItem k))
                      (inc m)))
                  (if (== m BIT-ITEM)
                    (begin
                      (= pruning 1)
                      (break)))))
              (= ITptr (fref ITptr -> next)))
            (csym::pthread_mutex_unlock (ptr (aref itMutex vv)))

            ;; if common-itemset is not subset of item table, then
            (if (not pruning)
              (begin
                (inc (fref pTsk -> numTraversed))
                (+= (fref pTsk -> treeDepth) (+ (fref pTsk -> numT) 1))

                (%if* DEBUG-LOCK (begin
                  (= locked 0)))
                (inc (fref pTsk -> numITmutexTrylock))
                (if (!= (csym::pthread_mutex_trylock (ptr (aref itMutex vv))) 0)
                  (begin
                    (inc (fref pTsk -> numITmutexLocked))
                    (%if* DEBUG-LOCK (begin
                      (= locked 1)
                      (csym::gettimeofday tp 0)))
                    (csym::pthread_mutex_lock (ptr (aref itMutex vv)))))
                (%if* DEBUG-LOCK (begin
                  (if locked
                    (begin
                      (csym::gettimeofday (+ tp 1) 0)
                      (csym::fprintf fpLock "%f, %d~%" (csym::elapsedTime tp (+ tp 1)) locked)))))
                (= ITptr (fref (fref (aref vItemTable vv) head) -> next))
                (while (!= ITptr (fref (aref vItemTable vv) head))
                  (inc (fref pTsk -> numTableReference))
                  (if (>= (fref ITptr -> minID) (fref pTsk -> minID))
                    (begin
                      (for ((= k 0) (= m 0) (< k BIT-ITEM) (inc k))
                        (if (== (cast set (bit-and (aref (fref ITptr -> item) k) (aref commonItem k))) (aref (fref ITptr -> item) k))
                          (inc m)))
                      (= ITptr (fref ITptr -> next))
                      (if (== m BIT-ITEM)
                        (begin
                          (if (== (fref (fref ITptr -> prev) -> worker) -1)
                            (begin
                              (csym::removeITnode (ptr (aref vItemTable vv)) (fref ITptr -> prev)))
                            (begin
                              (inc (aref numRedundantSearch (fref (fref ITptr -> prev) -> worker)))
                              (inc (fref pTsk -> numEmutexTrylock))
                              (if (!= (csym::pthread_mutex_trylock (ptr (aref excpMutex (fref (fref ITptr -> prev) -> worker)))) 0)
                                (begin
                                  (inc (fref pTsk -> numEmutexLocked))
                                  (csym::pthread_mutex_lock (ptr (aref excpMutex (fref (fref ITptr -> prev) -> worker))))))
                              (= (aref Qe (fref (fref ITptr -> prev) -> worker) (inc (aref numQe (fref (fref ITptr -> prev) -> worker)))) vv)
                              (csym::pthread_mutex_unlock (ptr (aref excpMutex (fref (fref ITptr -> prev) -> worker))))
                              (= (fref (fref ITptr -> prev) -> flagRedundant) 1))))))
                    (begin
                      (= ITptr (fref ITptr -> next)))))
                (csym::insertITnodeAfter (ptr (aref vItemTable vv)) (fref (aref vItemTable vv) head) commTimeStamp (fref pTsk -> minID) (fref pTsk -> maxID) commonItem (fref -thr -> id))
                (= ITadd (fref (aref vItemTable vv) crnt))
                (csym::pthread_mutex_unlock (ptr (aref itMutex vv)))

                (inc (fref pTsk -> numSearch))

                ;; add new candidates 
                (if (>= (+ (fref pTsk -> numC) (aref vDegree vv)) (fref pTsk -> sizeOfC))
                  (begin
                    (*= (fref pTsk -> sizeOfC) 2)
                    (= (fref pTsk -> C) (cast (ptr vtx) (csym::realloc (fref pTsk -> C) (* (fref pTsk ->  sizeOfC) (sizeof vtx)))))))
                (for ((= cc 0) (= j (aref vFirstEdge vv)) (!= j -1) (= j (aref eNext j)))
                  (if (and (< (aref (fref pTsk -> T) 0) (aref eTo j)) (== (aref (fref pTsk -> vTraversed) (aref eTo j)) 0))
                    (begin
                      (= (aref (fref pTsk -> C) (+ cc (fref pTsk -> numC))) (aref eTo j))
                      (inc cc))))

                ;; update vertices of CCIG
                (if (== (+ (fref pTsk -> numT) 1) (fref pTsk -> sizeOfT))
                  (begin
                    (*= (fref pTsk -> sizeOfT) 2)
                    (= (fref pTsk -> T) (cast (ptr vtx) (csym::realloc (fref pTsk -> T) (* (fref pTsk ->  sizeOfT) (sizeof vtx)))))))
                (= (aref (fref pTsk -> T) (fref pTsk -> numT)) vv)

                (dynamic-wind
                  (:before
                    ;; update numC & numT
                    (+= (fref pTsk -> numC) cc)
                    (inc (fref pTsk -> numT))

                    (if (== EXITING EXITING-SPAWN)
                      (begin
                        (for ((= j 0) (<= j i) (inc j))
                          (inc (aref (fref pTsk -> vTraversed) (aref (fref pTsk -> C) (- (- numC j) 1))))))))
                  (:body
                    (%if* DEBUG-SHOW (begin
                      (begin
                        (for ((= l 0) (< l (- (fref pTsk -> numT) 1)) (inc l))
                          (csym::fprintf stderr " %d -" (aref (fref pTsk -> T) l)))
                        (csym::fprintf stderr "> %d~%" (aref (fref pTsk -> T) (- (fref pTsk -> numT) 1))))))

                    ;; recursive call
                    (if (!= (fref pTsk -> minID) (fref pTsk -> maxID))
                      (begin
                        (if (>= (cast int (csym::log2 (cast double (- (fref pTsk -> maxID) (fref pTsk -> minID))))) (* (fref option num-thrs) NUM-NODES))
                          (begin
                            (if (<= (fref pTsk -> numT) CUT-OFF-VALUE)
                              (begin
                                (catch vv
                                  (exploreCCIG 0 (fref pTsk -> numC) vv commonItem pTsk)
                                  (for ((= j 0) (< j (fref pTsk -> numC)) (inc j))
                                    (dec (aref (fref pTsk -> vTraversed) (aref (fref pTsk -> C) j))))))
                              (begin
                                (catch vv
                                  (exploreCCIG2 0 (fref pTsk -> numC) vv commonItem pTsk)
                                  (for ((= j 0) (< j (fref pTsk -> numC)) (inc j))
                                    (dec (aref (fref pTsk -> vTraversed) (aref (fref pTsk -> C) j))))))))
                          (begin
                            (inc (aref seqTaskRequest (fref -thr -> id)))
                            (catch vv
                              (exploreCCIG2 0 (fref pTsk -> numC) vv commonItem pTsk)
                              (for ((= j 0) (< j (fref pTsk -> numC)) (inc j))
                                (dec (aref (fref pTsk -> vTraversed) (aref (fref pTsk -> C) j))))))))
                      (begin
                        (inc (aref seqTaskRequest (fref -thr -> id)))
                        (catch vv
                          (exploreCCIG2 0 (fref pTsk -> numC) vv commonItem pTsk)
                          (for ((= j 0) (< j (fref pTsk -> numC)) (inc j))
                            (dec (aref (fref pTsk -> vTraversed) (aref (fref pTsk -> C) j))))))))
                  (:after
                   (if (or (== EXITING EXITING-CANCEL)
                           (== EXITING EXITING-EXCEPTION))
                      (begin
                        (%if* DEBUG-LOCK (begin
                          (= locked 0)))
                        (inc (fref pTsk -> numITmutexTrylock))
                        (if (!= (csym::pthread_mutex_trylock (ptr (aref itMutex vv))) 0)
                          (begin
                            (inc (fref pTsk -> numITmutexLocked))
                            (%if* DEBUG-LOCK (begin
                              (= locked 1)
                              (csym::gettimeofday tp 0)))
                            (csym::pthread_mutex_lock (ptr (aref itMutex vv)))))
                        (%if* DEBUG-LOCK (begin
                          (if locked
                            (begin
                              (csym::gettimeofday (+ tp 1) 0)
                              (csym::fprintf fpLock "%f, %d~%" (csym::elapsedTime tp (+ tp 1)) locked)))))
                        (csym::removeITnode (ptr (aref vItemTable vv)) ITadd)
                        (csym::pthread_mutex_unlock (ptr (aref itMutex vv)))))

                    (if (== EXITING EXITING-NORMAL)
                      (begin
                        (%if* DEBUG-LOCK (begin
                          (= locked 0)))
                        (inc (fref pTsk -> numITmutexTrylock))
                        (if (!= (csym::pthread_mutex_trylock (ptr (aref itMutex vv))) 0)
                          (begin
                            (inc (fref pTsk -> numITmutexLocked))
                            (%if* DEBUG-LOCK (begin
                              (= locked 1)
                              (csym::gettimeofday tp 0)))
                            (csym::pthread_mutex_lock (ptr (aref itMutex vv)))))
                        (%if* DEBUG-LOCK (begin
                          (if locked
                            (begin
                              (csym::gettimeofday (+ tp 1) 0)
                              (csym::fprintf fpLock "%f, %d~%" (csym::elapsedTime tp (+ tp 1)) locked)))))
                        (= (fref ITadd -> worker) -1)
                        (if (== (fref ITadd -> flagRedundant) 1)
                          (begin
                            (csym::removeITnode (ptr (aref vItemTable vv)) ITadd)))
                        (csym::pthread_mutex_unlock (ptr (aref itMutex vv)))))

                    (if (!= EXITING EXITING-NORMAL)
                      (begin
                        (for ((= j 0) (<= j i) (inc j))
                          (dec (aref (fref pTsk -> vTraversed) (aref (fref pTsk -> C) (- (- numC j) 1)))))))

                    (if (or (== EXITING EXITING-NORMAL)
                            (== EXITING EXITING-CANCEL)
                            (== EXITING EXITING-EXCEPTION))
                      (begin
                        (if (aref numQe (fref -thr -> id))
                          (begin
                            (inc (fref pTsk -> numEmutexTrylock))
                            (if (!= (csym::pthread_mutex_trylock (ptr (aref excpMutex (fref -thr -> id)))) 0)
                              (begin
                                (inc (fref pTsk -> numEmutexLocked))
                                (csym::pthread_mutex_lock (ptr (aref excpMutex (fref -thr -> id))))))
                            (for ((= j 0) (< j (aref numQe (fref -thr -> id))) (inc j))
                              (if (== (aref Qe (fref -thr -> id) j) v)
                                (begin
                                  (if (!= j (- (aref numQe (fref -thr -> id)) 1))
                                    (begin
                                      (csym::memmove (+ (aref Qe (fref -thr -> id)) j) (+ (aref Qe (fref -thr -> id)) (+ j 1)) (* (sizeof vtx) (- (aref numQe (fref -thr -> id)) (+ j 1))))))
                                  (dec (aref numQe (fref -thr -> id))))))
                            (csym::pthread_mutex_unlock (ptr (aref excpMutex (fref -thr -> id))))))))

                    (-= (fref pTsk -> numC) cc)
                    (dec (fref pTsk -> numT)))))
              (begin
                (inc (fref pTsk -> numPruning))
                (%if* DEBUG-SHOW (begin
                  (begin
                    (csym::fprintf stderr " pruning!! ")
                    (for ((= l 0) (< l (fref pTsk -> numT)) (inc l))
                      (csym::fprintf stderr " %d -" (aref (fref pTsk -> T) l)))
                    (csym::fprintf stderr "> %d~%" vv)))))))
          (begin
            (inc (fref pTsk -> numThreshold))
            (%if* DEBUG-SHOW (begin
              (begin
                (csym::fprintf stderr " threshold!! ")
                (for ((= l 0) (< l (fref pTsk -> numT)) (inc l))
                  (csym::fprintf stderr " %d -" (aref (fref pTsk -> T) l)))
                (csym::fprintf stderr "> %d~%" vv))))))))

    (handles T-exploreCCIG
;(%if* USE-SPN-RANGE
;  (:spawn-from (if-exp (== OUTSIDE (fref (fref -thr -> treq_top) -> req_from)) (if-exp (> (- i2 i) (* spawnSize 16)) (+ i (* spawnSize 16)) (/ (+ 1 i i2) 2)) (if-exp (> (- i2 i) spawnSize) (+ i spawnSize) (/ (+ 1 i i2) 2)))))
      (%if* USE-SPN-RANGE
        (:spawn-from (if-exp (> (- i2 i) spawnSize) (+ i spawnSize) (/ (+ 1 i i2) 2))))
      (%if* USE-SPN-RATIO
        (:spawn-from (/ (+ 1 i i2) spawnSize)))
      (:put from i1 to i2
        (%if* DEBUG-COPY (begin
          (csym::gettimeofday tpc 0)))
        (= (fref this minC) i1)
        (= (fref this maxC) i2)
        (= (fref this maxID) (fref pTsk -> maxID))
        (= (fref pTsk -> maxID) (+ (cast task-id (* (- (fref pTsk -> maxID) (fref pTsk -> minID)) 0.5)) (fref pTsk -> minID)))
        (= (fref this minID) (+ (fref pTsk -> maxID) 1))
        (initExploreCCIG NULL NULL NULL NULL (ptr this))
        (= (fref this v) v)
        (csym::memcpy (fref this itemSet) itemSet (* (sizeof set) BIT-ITEM))
        (csym::memcpy (fref this vTraversed) (fref pTsk -> vTraversed) (* (sizeof int) V-SIZE))
        (for ((= j 0) (< j i1) (inc j))
          (inc (aref (fref this vTraversed) (aref (fref pTsk -> C) (- (- numC j) 1)))))
        (csym::memcpy (fref this C) (fref pTsk -> C) (* (sizeof vtx) numC))
        (= (fref this numC) numC)
        (csym::memcpy (fref this T) (fref pTsk -> T) (* (sizeof vtx) (fref pTsk -> numT)))
        (= (fref this numT) (fref pTsk -> numT))
        (%if* DEBUG-COPY (begin
          (csym::gettimeofday (+ tpc 1) 0))))
      (:get
        (%if* DEBUG-COPY (begin
          (csym::gettimeofday (+ tpc 2) 0)))
        (%if* DEBUG-RSLT (begin
          (= (fref (fref (fref (fref pTsk -> subgraph) head) -> prev) -> next) (fref (fref (fref this subgraph) head) -> next))
          (= (fref (fref (fref (fref this subgraph) head) -> next) -> prev) (fref (fref (fref pTsk -> subgraph) head) -> prev))
          (= (fref (fref (fref (fref this subgraph) head) -> prev) -> next) (fref (fref pTsk -> subgraph) head))
          (= (fref (fref (fref pTsk -> subgraph) head) -> prev) (fref (fref (fref this subgraph) head) -> prev))))
        (+= (fref pTsk -> treeDepth) (fref this treeDepth))
        (+= (fref pTsk -> numITmutexTrylock) (fref this numITmutexTrylock))
        (+= (fref pTsk -> numITmutexLocked) (fref this numITmutexLocked))
        (+= (fref pTsk -> numEmutexTrylock) (fref this numEmutexTrylock))
        (+= (fref pTsk -> numEmutexLocked) (fref this numEmutexLocked))
        (+= (fref pTsk -> numTraversed) (fref this numTraversed))
        (+= (fref pTsk -> numSubgraph) (fref this numSubgraph))
        (%if* DEBUG-COPY (begin
          (csym::gettimeofday (+ tpc 3) 0)
          (csym::fprintf fpCopy "%f, 1~%" (+ (csym::elapsedTime tpc (+ tpc 1)) (csym::elapsedTime (+ tpc 2) (+ tpc 3)))))))))

  (if closed
    ;; output common-itemset subgraph
    (begin
      (%if* DEBUG-RSLT (begin
        (csym::insertGnodeAfter (ptr (fref pTsk -> subgraph)) (fref (fref pTsk -> subgraph) crnt) (fref pTsk -> T) (fref pTsk -> numT) itemSet)))
      (inc (fref pTsk -> numSubgraph)))))

;;; 
(def (task-body T-exploreCCIG)
  (decl i int)
  (decl seq int)
  (decl tp (array (struct timeval) 2))
  (inc (aref taskRequest (fref -thr -> id)))
  (if (> (fref this minID) (fref this maxID))
    (csym::fprintf stderr "minID = %llu, maxID = %llu~%" (fref this minID) (fref this maxID)))
  (csym::gettimeofday tp 0)
  (if (!= (fref this minID) (fref this maxID))
    (begin
      (if (>= (cast int (csym::log2 (cast double (- (fref this maxID) (fref this minID))))) (* (fref option num-thrs) NUM-NODES))
        (begin
          (if (<= (fref this numT) CUT-OFF-VALUE)
            (begin
              (= seq 0)
              (catch (fref this v)
                (exploreCCIG (fref this minC) (fref this maxC) (fref this v) (fref this itemSet) (ptr this))))
            (begin
              (= seq 1)
              (catch (fref this v)
                (exploreCCIG2 (fref this minC) (fref this maxC) (fref this v) (fref this itemSet) (ptr this))))))
        (begin
          (= seq 1)
          (inc (aref seqTaskRequest (fref -thr -> id)))
          (catch (fref this v)
            (exploreCCIG2 (fref this minC) (fref this maxC) (fref this v) (fref this itemSet) (ptr this))))))
    (begin
      (= seq 1)
      (inc (aref seqTaskRequest (fref -thr -> id)))
      (catch (fref this v)
        (exploreCCIG2 (fref this minC) (fref this maxC) (fref this v) (fref this itemSet) (ptr this)))))
  (csym::gettimeofday (+ tp 1) 0)
  (+= (aref visit2Vertices (fref -thr -> id)) (fref this numSearch))
  (+= (aref thresholdPruning (fref -thr -> id)) (fref this numThreshold))
  (+= (aref inclusivePruning (fref -thr -> id)) (fref this numPruning))
  (+= (aref tableReference (fref -thr -> id)) (fref this numTableReference))
  (csym::fprintf stderr "end: task-body_exploreCCIG, %f, %llu, %llu, %llu, %d, %llu, %llu, %llu, %llu, %llu, %d, %d, %d~%" (csym::elapsedTime tp (+ tp 1)) (+ (fref this numSearch) (+ (fref this numThreshold) (fref this numPruning))) (fref this numSearch) (fref this numThreshold) (fref this numPruning) (fref this numTableReference) (fref this numITmutexTrylock) (fref this numITmutexLocked) (fref this numEmutexTrylock) (fref this numEmutexLocked) (aref numThrow (fref -thr -> id)) (fref -thr -> id) seq)
  (%if* DEBUG-TASK (begin
    (csym::fprintf fpTask "%f, %f, %f, %llu, %d, %d~%" (csym::elapsedTime (ptr t0) tp) (csym::elapsedTime tp (+ tp 1)) (csym::elapsedTime (ptr t0) (+ tp 1)) (fref this numSearch) seq (fref -thr -> id))))
  (csym::free (fref this vTraversed))
  (csym::free (fref this C))
  (csym::free (fref this T)))

;;; 
(def (task T-enumCCIG)
  (def minVertex int :in)
  (def maxVertex int :in)
  (def tsk (struct T-exploreCCIG)))

(def (task-sender T-enumCCIG)
  (defs int i j k)
  (decl numElem int)
  (def numSentElem int 0)
  (decl ITptr (ptr ITnode))
  (decl tp (array (struct timeval) 2))
  ;(csym::fprintf stderr "start sending_enumCCIG~%")
  (csym::gettimeofday tp 0)
  (csym::send-int th)
  (csym::send-int spawnSize)
  (for ((= i 0) (< i (/ TASK-LEN COMM-LEN)) (inc i))
    (csym::send-uint32 (cast uint32_t (>> (fref (fref this tsk) minID) (* COMM-LEN i))))
    (csym::send-uint32 (cast uint32_t (>> (fref (fref this tsk) maxID) (* COMM-LEN i)))))
  (csym::gettimeofday (+ tp 1) 0)
  (csym::fprintf stderr "end sending_enumCCIG, %f~%" (csym::elapsedTime tp (+ tp 1)))
  (csym::gettimeofday tp 0)
  (for ((= i 0) (< i V-SIZE) (inc i))
    (csym::pthread_mutex_lock (ptr (aref itMutex i)))
    (= numElem 0)
    (= ITptr (fref (fref (aref vItemTable i) head) -> next))
    (while (!= ITptr (fref (aref vItemTable i) head))
      (if (<= commTimeStamp (fref ITptr -> timeStamp))
        (begin
          (inc numElem)
          (= ITptr (fref ITptr -> next)))
        (begin
          (break))))
    (= ITptr (fref ITptr -> prev))
    (csym::send-int numElem)
    (+= numSentElem numElem)
    (for ((= j 0) (< j numElem) (inc j))
      (for ((= k 0) (< k (/ TASK-LEN COMM-LEN)) (inc k))
        (csym::send-uint32 (cast uint32_t (>> (fref ITptr -> minID) (* COMM-LEN k))))
        (csym::send-uint32 (cast uint32_t (>> (fref ITptr -> maxID) (* COMM-LEN k)))))
      (for ((= k 0) (< k BIT-ITEM) (inc k))
        (csym::send-uint32 (aref (fref ITptr -> item) k)))
      (= ITptr (fref ITptr -> prev)))
    (csym::pthread_mutex_unlock (ptr (aref itMutex i))))
  (csym::gettimeofday (+ tp 1) 0)
  (inc commTimeStamp)
  (csym::fprintf stderr "IT: task-sender_enumCCIG, %d, %f~%" numSentElem (csym::elapsedTime tp (+ tp 1))))

(def (task-receiver T-enumCCIG)
  (defs int i j k m)
  (def numRecvElem int 0)
  (decl numITelem int)
  (decl ITminID task-id)
  (decl ITmaxID task-id)
  (decl ITitem (array set BIT-ITEM))
  (decl ITptr (ptr ITnode))
  (decl ITflag int)
  (def detectRedundantSearch int 0)
  (decl tp (array (struct timeval) 2))
  (initExploreCCIG NULL NULL NULL NULL (ptr (fref this tsk)))
  ;(csym::fprintf stderr "start receiving_enumCCIG~%")
  (if (not inited)
    (csym::gettimeofday (ptr t0) 0))
  (csym::gettimeofday tp 0)
  (= th (csym::recv-int))
  (= spawnSize (csym::recv-int))
  (= (fref (fref this tsk) minID) 0)
  (= (fref (fref this tsk) maxID) 0)
  (for ((= i 0) (< i (/ TASK-LEN COMM-LEN)) (inc i))
    (= (fref (fref this tsk) minID) (bit-or (fref (fref this tsk) minID) (<< (cast task-id (csym::recv-uint32)) (* COMM-LEN i))))
    (= (fref (fref this tsk) maxID) (bit-or (fref (fref this tsk) maxID) (<< (cast task-id (csym::recv-uint32)) (* COMM_LEN i)))))
  (csym::gettimeofday (+ tp 1) 0)
  (csym::fprintf stderr "end receiving_enumCCIG, %f, %f~%" (csym::elapsedTime (ptr t0) (+ tp 1)) (csym::elapsedTime tp (+ tp 1)))
  (if (not inited)
    (begin
      (decl edgeMax int)
      (decl minVertex int)
      (decl maxVertex int)
      (decl maxNumItems int)
      (defs (struct hsearch_data) eHash iHash)
      (initData (ptr edgeMax) (ptr minVertex) (ptr maxVertex) (ptr maxNumItems) (ptr eHash) (ptr iHash))
      (loadPatternFile (ptr maxNumItems) (ptr eHash) (ptr iHash))
      (loadGraphFile (ptr edgeMax) (ptr minVertex) (ptr maxVertex) (ptr eHash))
      ;(thresholdItem minVertex maxVertex)
      (for ((= i 0) (< i V-SIZE) (inc i))
        (csym::pthread_mutex_init (ptr (aref itMutex i)) NULL))
      (for ((= i 0) (< i NUM-WORKERS) (inc i))
        (csym::pthread_mutex_init (ptr (aref excpMutex i)) NULL))
      (csym::hdestroy_r (ptr eHash))
      (csym::hdestroy_r (ptr iHash))
      (= inited 1)))
  (csym::gettimeofday tp 0)
  (for ((= i 0) (< i V-SIZE) (inc i))
    (csym::pthread_mutex_lock (ptr (aref itMutex i)))
    (= numITelem (csym::recv-int))
    (+= numRecvElem numITelem)
    (for ((= j 0) (< j numITelem) (inc j))
      (= ITminID 0)
      (= ITmaxID 0)
      (for ((= k 0) (< k (/ TASK-LEN COMM-LEN)) (inc k))
        (= ITminID (bit-or ITminID (<< (cast task-id (csym::recv-uint32)) (* COMM-LEN k))))
        (= ITmaxID (bit-or ITmaxID (<< (cast task-id (csym::recv-uint32)) (* COMM_LEN k)))))
      (for ((= k 0) (< k BIT-ITEM) (inc k))
        (= (aref ITitem k) (cast set (csym::recv-uint32))))
      (= ITflag 1)
      (= ITptr (fref (fref (aref vItemTable i) head) -> next))
      (while (!= ITptr (fref (aref vItemTable i) head))
        (if (<= (fref ITptr -> minID) ITminID)
          (begin
            (for ((= k 0) (= m 0) (< k BIT-ITEM) (inc k))
              (if (== (cast set (bit-and (aref ITitem k) (aref (fref ITptr -> item) k))) (aref ITitem k))
                (inc m)))
            (if (== BIT-ITEM m)
              (begin
                (= ITflag 0)
                (break)))))
        (if (>= (fref ITptr -> minID) ITminID)
          (begin
            (for ((= k 0) (= m 0) (< k BIT-ITEM) (inc k))
              (if (== (cast set (bit-and (aref (fref ITptr -> item) k) (aref ITitem k))) (aref (fref ITptr -> item) k))
                (inc m)))
            (if (== m BIT-ITEM)
              (begin
                (if (== -1 (fref ITptr -> worker))
                  (begin
                    (= ITptr (fref ITptr -> prev))
                    (csym::removeITnode (ptr (aref vItemTable i)) (fref ITptr -> next)))
                  (begin
                    (inc detectRedundantSearch)
                    (inc (aref numRedundantSearch (fref ITptr -> worker)))
                    (csym::pthread_mutex_lock (ptr (aref excpMutex (fref ITptr -> worker))))
                    (= (aref Qe (fref ITptr -> worker) (inc (aref numQe (fref ITptr -> worker)))) i)
                    (csym::pthread_mutex_unlock (ptr (aref excpMutex (fref ITptr -> worker))))
                    (= (fref ITptr -> flagRedundant) 1)))))))
        (= ITptr (fref ITptr -> next)))
      (if (== 1 ITflag)
        (begin
          (csym::insertITnodeAfter (ptr (aref vItemTable i)) (fref (fref (aref vItemTable i) head) -> prev) -1 ITminID ITmaxID ITitem -1))))
    (csym::pthread_mutex_unlock (ptr (aref itMutex i))))
  (csym::gettimeofday (+ tp 1) 0)
  (csym::fprintf stderr "IT: task-receiver_enumCCIG, %d, %f, %f, %d~%" numRecvElem (csym::elapsedTime tp (+ tp 1)) (csym::elapsedTime (ptr t0) (+ tp 1)) detectRedundantSearch))

(def (rslt-sender T-enumCCIG)
  (defs int i j k)
  (decl numElem int)
  (def numSentElem int 0)
  (decl ITptr (ptr ITnode))
  (decl tp (array (struct timeval) 2))
  ;(csym::fprintf stderr "start: rslt-sender_enumCCIG~%")
  (csym::gettimeofday tp 0)
  (for ((= i 0) (< i V-SIZE) (inc i))
    (csym::pthread_mutex_lock (ptr (aref itMutex i)))
    (= numElem 0)
    (= ITptr (fref (fref (aref vItemTable i) head) -> next))
    (while (!= ITptr (fref (aref vItemTable i) head))
      (if (<= commTimeStamp (fref ITptr -> timeStamp))
        (begin
          (inc numElem)
          (= ITptr (fref ITptr -> next)))
        (begin
          (break))))
    (= ITptr (fref ITptr -> prev))
    (csym::send-int numElem)
    (+= numSentElem numElem)
    (for ((= j 0) (< j numElem) (inc j))
      (for ((= k 0) (< k (/ TASK-LEN COMM-LEN)) (inc k))
        (csym::send-uint32 (cast uint32_t (>> (fref ITptr -> minID) (* COMM-LEN k))))
        (csym::send-uint32 (cast uint32_t (>> (fref ITptr -> maxID) (* COMM-LEN k)))))
      (for ((= k 0) (< k BIT-ITEM) (inc k))
        (csym::send-uint32 (aref (fref ITptr -> item) k)))
      (= ITptr (fref ITptr -> prev)))
    (csym::pthread_mutex_unlock (ptr (aref itMutex i))))
  (csym::gettimeofday (+ tp 1) 0)
  (inc commTimeStamp)
  (csym::fprintf stderr "IT: rslt-sender_enumCCIG, %d, %f~%" numSentElem (csym::elapsedTime tp (+ tp 1)))
  (csym::free (fref (fref this tsk) vTraversed))
  (csym::free (fref (fref this tsk) C))
  (csym::free (fref (fref this tsk) T)))

(def (rslt-receiver T-enumCCIG)
  (defs int i j k m)
  (def numRecvElem int 0)
  (decl numITelem int)
  (decl ITminID task-id)
  (decl ITmaxID task-id)
  (decl ITitem (array set BIT-ITEM))
  (decl ITptr (ptr ITnode))
  (decl ITflag int)
  (decl tp (array (struct timeval) 2))
  (def detectRedundantSearch int 0)
  ;(csym::fprintf stderr "start: rslt-receiver_enumCCIG~%")
  (csym::gettimeofday tp 0)
  (for ((= i 0) (< i V-SIZE) (inc i))
    (csym::pthread_mutex_lock (ptr (aref itMutex i)))
    (= numITelem (csym::recv-int))
    (+= numRecvElem numITelem)
    (for ((= j 0) (< j numITelem) (inc j))
      (= ITminID 0)
      (= ITmaxID 0)
      (for ((= k 0) (< k (/ TASK-LEN COMM-LEN)) (inc k))
        (= ITminID (bit-or ITminID (<< (cast task-id (csym::recv-uint32)) (* COMM-LEN k))))
        (= ITmaxID (bit-or ITmaxID (<< (cast task-id (csym::recv-uint32)) (* COMM_LEN k)))))
      (for ((= k 0) (< k BIT-ITEM) (inc k))
        (= (aref ITitem k) (cast set (csym::recv-uint32))))
      (= ITflag 1)
      (= ITptr (fref (fref (aref vItemTable i) head) -> next))
      (while (!= ITptr (fref (aref vItemTable i) head))
        (if (<= (fref ITptr -> minID) ITminID)
          (begin
            (for ((= k 0) (= m 0) (< k BIT-ITEM) (inc k))
              (if (== (cast set (bit-and (aref ITitem k) (aref (fref ITptr -> item) k))) (aref ITitem k))
                (inc m)))
            (if (== BIT-ITEM m)
              (begin
                (= ITflag 0)
                (break)))))
        (if (>= (fref ITptr -> minID) ITminID)
          (begin
            (for ((= k 0) (= m 0) (< k BIT-ITEM) (inc k))
              (if (== (cast set (bit-and (aref (fref ITptr -> item) k) (aref ITitem k))) (aref (fref ITptr -> item) k))
                (inc m)))
            (if (== m BIT-ITEM)
              (begin
                (if (== -1 (fref ITptr -> worker))
                  (begin
                    (= ITptr (fref ITptr -> prev))
                    (csym::removeITnode (ptr (aref vItemTable i)) (fref ITptr -> next)))
                  (begin
                    (inc detectRedundantSearch)
                    (inc (aref numRedundantSearch (fref ITptr -> worker)))
                    (csym::pthread_mutex_lock (ptr (aref excpMutex (fref ITptr -> worker))))
                    (= (aref Qe (fref ITptr -> worker) (inc (aref numQe (fref ITptr -> worker)))) i)
                    (csym::pthread_mutex_unlock (ptr (aref excpMutex (fref ITptr -> worker))))
                    (= (fref ITptr -> flagRedundant) 1)))))))
        (= ITptr (fref ITptr -> next)))
      (if (== 1 ITflag)
        (begin
          (csym::insertITnodeAfter (ptr (aref vItemTable i)) (fref (fref (aref vItemTable i) head) -> prev) -1 ITminID ITmaxID ITitem -1))))
    (csym::pthread_mutex_unlock (ptr (aref itMutex i))))
  (csym::gettimeofday (+ tp 1) 0)
  (csym::fprintf stderr "IT: rslt-receiver_enumCCIG, %d, %f, %f, %d~%" numRecvElem (csym::elapsedTime tp (+ tp 1)) (csym::elapsedTime (ptr t0) (+ tp 1)) detectRedundantSearch))

;;; Function: enumCCIG2 - enumerate CCIG 
(def (enumCCIG2 minVertex maxVertex pTsk) (wfn void int int (ptr (struct T-exploreCCIG)))
  (defs int i j k m)        ; temporary variable
  (decl visiting int)       ; flag to search
  (decl ITptr (ptr ITnode)) ; 
  (decl ITadd (ptr ITnode)) ;
  (decl locked int) 
  (decl tp (array (struct timeval) 2))

  (for ((= i minVertex) (< i maxVertex) (inc i))
    (%if* DEBUG-TIME (begin
      (csym::gettimeofday (aref t i) 0)))
    (if (> (aref vDegree i) 0)
      (begin
        (%if* DEBUG-SHOW (begin
          (csym::fprintf stderr "Starting Point: %d~%" i)))

        (= (aref (fref pTsk -> vTraversed) i) 2)
        (= visiting 0)

        ;; check that itemset of 'i' is subset of itemset-table
        (%if* DEBUG-LOCK (begin
          (= locked 0)))
        (inc (fref pTsk -> numITmutexTrylock))
        (if (!= (csym::pthread_mutex_trylock (ptr (aref itMutex i))) 0)
          (begin
            (inc (fref pTsk -> numITmutexLocked))
            (%if* DEBUG-LOCK (begin
              (= locked 1)
              (csym::gettimeofday tp 0)))
            (csym::pthread_mutex_lock (ptr (aref itMutex i)))))
        (%if* DEBUG-LOCK (begin
          (if locked
            (begin
              (csym::gettimeofday (+ tp 1) 0)
              (csym::fprintf fpLock "%f, %d~%" (csym::elapsedTime tp (+ tp 1)) locked)))))
        (= ITptr (fref (fref (aref vItemTable i) head) -> next))
        (inc (fref pTsk -> numTableReference))
        (if (<= (fref ITptr -> minID) (fref pTsk -> minID))
          (begin
            (for ((= k 0) (< k BIT-ITEM) (inc k))
              (if (!= (cast set (bit-and (aref vItem i k) (aref (fref ITptr -> item) k))) (aref vItem i k))
                (begin 
                  (= visiting 1)
                  (break)))))
          (begin
            (= visiting 1)))
        (csym::pthread_mutex_unlock (ptr (aref itMutex i)))

        ;; if search the CCIG whose starting point is 'i', then
        (if visiting
          (begin
            (%if* DEBUG-SHOW (begin
              (csym::fprintf stderr "+++ Allons-y! +++~%")))

            (%if* DEBUG-LOCK (begin
              (= locked 0)))
            (inc (fref pTsk -> numITmutexTrylock))
            (if (!= (csym::pthread_mutex_trylock (ptr (aref itMutex i))) 0)
              (begin
                (inc (fref pTsk -> numITmutexLocked))
                (%if* DEBUG-LOCK (begin
                  (= locked 1)
                  (csym::gettimeofday tp 0)))
                (csym::pthread_mutex_lock (ptr (aref itMutex i)))))
            (%if* DEBUG-LOCK (begin
              (if locked
                (begin
                  (csym::gettimeofday (+ tp 1) 0)
                  (csym::fprintf fpLock "%f, %d~%" (csym::elapsedTime tp (+ tp 1)) locked)))))
            (= ITptr (fref (fref (aref vItemTable i) head) -> next))
            (while (!= ITptr (fref (aref vItemTable i) head))
              (inc (fref pTsk -> numTableReference))
              (if (>= (fref ITptr -> minID) (fref pTsk -> minID))
                (begin
                  (for ((= k 0) (= m 0) (< k BIT-ITEM) (inc k))
                    (if (== (cast set (bit-and (aref (fref ITptr -> item) k) (aref vItem i k))) (aref (fref ITptr -> item) k))
                      (inc m)))
                  (= ITptr (fref ITptr -> next))
                  (if (== m BIT-ITEM)
                    (begin
                      (if (== (fref (fref ITptr -> prev) -> worker) -1)
                        (begin
                          (csym::removeITnode (ptr (aref vItemTable i)) (fref ITptr -> prev)))
                        (begin
                          (inc (aref numRedundantSearch (fref (fref ITptr -> prev) -> worker)))
                          (inc (fref pTsk -> numEmutexTrylock))
                          (if (!= (csym::pthread_mutex_trylock (ptr (aref excpMutex (fref (fref ITptr -> prev) -> worker)))) 0)
                            (begin
                              (inc (fref pTsk -> numEmutexLocked))
                              (csym::pthread_mutex_lock (ptr (aref excpMutex (fref (fref ITptr -> prev) -> worker))))))
                          (= (aref Qe (fref (fref ITptr -> prev) -> worker) (inc (aref numQe (fref (fref ITptr -> prev) -> worker)))) i)
                          (csym::pthread_mutex_unlock (ptr (aref excpMutex (fref (fref ITptr -> prev) -> worker))))
                          (= (fref (fref ITptr -> prev) -> flagRedundant) 1))))))
                (begin
                  (= ITptr (fref ITptr -> next)))))
            (csym::insertITnodeAfter (ptr (aref vItemTable i)) (fref (aref vItemTable i) head) commTimeStamp (fref pTsk -> minID) (fref pTsk -> maxID) (aref vItem i) (fref -thr -> id))
            (= ITadd (fref (aref vItemTable i) crnt))
            (csym::pthread_mutex_unlock (ptr (aref itMutex i)))

            (inc (fref pTsk -> numSearch))

            (for ((= j (aref vFirstEdge i)) (!= j -1) (= j (aref eNext j)))
              (if (< i (aref eTo j))
                (begin
                  (= (aref (fref pTsk -> C) (fref pTsk -> numC)) (aref eTo j))
                  (inc (fref pTsk -> numC)))))

            (= (aref (fref pTsk -> T) (fref pTsk -> numT)) i)
            (inc (fref pTsk -> numT))
            (inc (fref pTsk -> treeDepth))
            (inc (fref pTsk -> numTraversed))

            (catch i
              (exploreCCIG2 0 (fref pTsk -> numC) i (aref vItem i) pTsk)
              (for ((= j 0) (< j (fref pTsk -> numC)) (inc j))
                (= (aref (fref pTsk -> vTraversed) (aref (fref pTsk -> C) j)) 0)))

            (%if* DEBUG-LOCK (begin
              (= locked 0)))
            (inc (fref pTsk -> numITmutexTrylock))
            (if (!= (csym::pthread_mutex_trylock (ptr (aref itMutex i))) 0)
              (begin
                (inc (fref pTsk -> numITmutexLocked))
                (%if* DEBUG-LOCK (begin
                  (= locked 1)
                  (csym::gettimeofday tp 0)))
                (csym::pthread_mutex_lock (ptr (aref itMutex i)))))
            (%if* DEBUG-LOCK (begin
              (if locked
                (begin
                  (csym::gettimeofday (+ tp 1) 0)
                  (csym::fprintf fpLock "%f, %d~%" (csym::elapsedTime tp (+ tp 1)) locked)))))
            (= (fref ITadd -> worker) -1)
            (if (== (fref ITadd -> flagRedundant) 1)
              (begin
                (csym::removeITnode (ptr (aref vItemTable i)) ITadd)))
            (csym::pthread_mutex_unlock (ptr (aref itMutex i)))

            (= (fref pTsk -> numC) 0)
            (= (fref pTsk -> numT) 0)

            (%if* DEBUG-SHOW (begin
              (csym::fprintf stderr "~%"))))
          (begin
            (inc (fref pTsk -> numPruning))

            (%if* DEBUG-SHOW (begin
              (csym::fprintf stderr "- PRUNING! -~%~%")))))))

    (%if* DEBUG-TIME (begin
      (csym::gettimeofday (+ (aref t i) 1) 0)
      (= (aref doneID i) (fref -thr -> id))))))

;;; Function: enumCCIG - enumerate CCIG
(def (enumCCIG minVertex maxVertex pTsk) (wfn void int int (ptr (struct T-exploreCCIG)))
  (defs int i j k m)        ; temporary variable
  (decl visiting int)       ; flag to search
  (decl ITptr (ptr ITnode)) ; 
  (decl ITadd (ptr ITnode)) ; 
  (decl locked int) 
  (decl tp (array (struct timeval) 2))
  (decl tpc (array (struct timeval) 4))

  (do-many for i from minVertex to maxVertex
    (%if* DEBUG-TIME (begin
      (csym::gettimeofday (aref t i) 0)))
    (if (> (aref vDegree i) 0)
      (begin
        (%if* DEBUG-SHOW (begin
          (csym::fprintf stderr "Starting Point: %d~%" i)))

        (= (aref (fref pTsk -> vTraversed) i) 2)
        (= visiting 0)

        ;; check that itemset of 'i' is subset of itemset-table
        (%if* DEBUG-LOCK (begin
          (= locked 0)))
        (inc (fref pTsk -> numITmutexTrylock))
        (if (!= (csym::pthread_mutex_trylock (ptr (aref itMutex i))) 0)
          (begin
            (inc (fref pTsk -> numITmutexLocked))
            (%if* DEBUG-LOCK (begin
              (= locked 1)
              (csym::gettimeofday tp 0)))
            (csym::pthread_mutex_lock (ptr (aref itMutex i)))))
        (%if* DEBUG-LOCK (begin
          (if locked
            (begin
              (csym::gettimeofday (+ tp 1) 0)
              (csym::fprintf fpLock "%f, %d~%" (csym::elapsedTime tp (+ tp 1)) locked)))))
        (= ITptr (fref (fref (aref vItemTable i) head) -> next))
        (inc (fref pTsk -> numTableReference))
        (if (<= (fref ITptr -> minID) (fref pTsk -> minID))
          (begin
            (for ((= k 0) (< k BIT-ITEM) (inc k))
              (if (!= (cast set (bit-and (aref vItem i k) (aref (fref ITptr -> item) k))) (aref vItem i k))
                (begin 
                  (= visiting 1)
                  (break)))))
          (begin
            (= visiting 1)))
        (csym::pthread_mutex_unlock (ptr (aref itMutex i)))

        ;; if search the CCIG whose starting point is 'i', then
        (if visiting
          (begin
            (%if* DEBUG-SHOW (begin
              (csym::fprintf stderr "+++ Allons-y! +++~%")))

            (%if* DEBUG-LOCK (begin
              (= locked 0)))
            (inc (fref pTsk -> numITmutexTrylock))
            (if (!= (csym::pthread_mutex_trylock (ptr (aref itMutex i))) 0)
              (begin
                (inc (fref pTsk -> numITmutexLocked))
                (%if* DEBUG-LOCK (begin
                  (= locked 1)
                  (csym::gettimeofday tp 0)))
                (csym::pthread_mutex_lock (ptr (aref itMutex i)))))
            (%if* DEBUG-LOCK (begin
              (if locked
                (begin
                  (csym::gettimeofday (+ tp 1) 0)
                  (csym::fprintf fpLock "%f, %d~%" (csym::elapsedTime tp (+ tp 1)) locked)))))
            (= ITptr (fref (fref (aref vItemTable i) head) -> next))
            (while (!= ITptr (fref (aref vItemTable i) head))
              (inc (fref pTsk -> numTableReference))
              (if (>= (fref ITptr -> minID) (fref pTsk -> minID))
                (begin
                  (for ((= k 0) (= m 0) (< k BIT-ITEM) (inc k))
                    (if (== (cast set (bit-and (aref (fref ITptr -> item) k) (aref vItem i k))) (aref (fref ITptr -> item) k))
                      (inc m)))
                  (= ITptr (fref ITptr -> next))
                  (if (== m BIT-ITEM)
                    (begin
                      (if (== (fref (fref ITptr -> prev) -> worker) -1)
                        (begin
                          (csym::removeITnode (ptr (aref vItemTable i)) (fref ITptr -> prev)))
                        (begin
                          (inc (aref numRedundantSearch (fref (fref ITptr -> prev) -> worker)))
                          (inc (fref pTsk -> numEmutexTrylock))
                          (if (!= (csym::pthread_mutex_trylock (ptr (aref excpMutex (fref (fref ITptr -> prev) -> worker)))) 0)
                            (begin
                              (inc (fref pTsk -> numEmutexLocked))
                              (csym::pthread_mutex_lock (ptr (aref excpMutex (fref (fref ITptr -> prev) -> worker))))))
                          (= (aref Qe (fref (fref ITptr -> prev) -> worker) (inc (aref numQe (fref (fref ITptr -> prev) -> worker)))) i)
                          (csym::pthread_mutex_unlock (ptr (aref excpMutex (fref (fref ITptr -> prev) -> worker))))
                          (= (fref (fref ITptr -> prev) -> flagRedundant) 1))))))
                (begin
                  (= ITptr (fref ITptr -> next)))))
            (csym::insertITnodeAfter (ptr (aref vItemTable i)) (fref (aref vItemTable i) head) commTimeStamp (fref pTsk -> minID) (fref pTsk -> maxID) (aref vItem i) (fref -thr -> id))
            (= ITadd (fref (aref vItemTable i) crnt))
            (csym::pthread_mutex_unlock (ptr (aref itMutex i)))

            (inc (fref pTsk -> numSearch))

            (for ((= j (aref vFirstEdge i)) (!= j -1) (= j (aref eNext j)))
              (if (< i (aref eTo j))
                (begin
                  (= (aref (fref pTsk -> C) (fref pTsk -> numC)) (aref eTo j))
                  (inc (fref pTsk -> numC)))))

            (= (aref (fref pTsk -> T) (fref pTsk -> numT)) i)
            (inc (fref pTsk -> numT))
            (inc (fref pTsk -> treeDepth))
            (inc (fref pTsk -> numTraversed))

            (if (!= (fref pTsk -> minID) (fref pTsk -> maxID))
              (begin
                (if (>= (cast int (csym::log2 (cast double (- (fref pTsk -> maxID) (fref pTsk -> minID))))) (* (fref option num-thrs) NUM-NODES))
                  (begin
                    (if (<= (fref pTsk -> numT) CUT-OFF-VALUE)
                      (begin
                        (catch i
                          (exploreCCIG 0 (fref pTsk -> numC) i (aref vItem i) pTsk)
                          (for ((= j 0) (< j (fref pTsk -> numC)) (inc j))
                            (= (aref (fref pTsk -> vTraversed) (aref (fref pTsk -> C) j)) 0))))
                      (begin
                        (catch i
                          (exploreCCIG2 0 (fref pTsk -> numC) i (aref vItem i) pTsk)
                          (for ((= j 0) (< j (fref pTsk -> numC)) (inc j))
                            (= (aref (fref pTsk -> vTraversed) (aref (fref pTsk -> C) j)) 0))))))
                  (begin
                    (inc (aref seqTaskRequest (fref -thr -> id)))
                    (catch i
                      (exploreCCIG2 0 (fref pTsk -> numC) i (aref vItem i) pTsk)
                      (for ((= j 0) (< j (fref pTsk -> numC)) (inc j))
                        (= (aref (fref pTsk -> vTraversed) (aref (fref pTsk -> C) j)) 0))))))
              (begin
                (inc (aref seqTaskRequest (fref -thr -> id)))
                (catch i
                  (exploreCCIG2 0 (fref pTsk -> numC) i (aref vItem i) pTsk)
                  (for ((= j 0) (< j (fref pTsk -> numC)) (inc j))
                    (= (aref (fref pTsk -> vTraversed) (aref (fref pTsk -> C) j)) 0)))))

            (%if* DEBUG-LOCK (begin
              (= locked 0)))
            (inc (fref pTsk -> numITmutexTrylock))
            (if (!= (csym::pthread_mutex_trylock (ptr (aref itMutex i))) 0)
              (begin
                (inc (fref pTsk -> numITmutexLocked))
                (%if* DEBUG-LOCK (begin
                  (= locked 1)
                  (csym::gettimeofday tp 0)))
                (csym::pthread_mutex_lock (ptr (aref itMutex i)))))
            (%if* DEBUG-LOCK (begin
              (if locked
                (begin
                  (csym::gettimeofday (+ tp 1) 0)
                  (csym::fprintf fpLock "%f, %d~%" (csym::elapsedTime tp (+ tp 1)) locked)))))
            (= (fref ITadd -> worker) -1)
            (if (== (fref ITadd -> flagRedundant) 1)
              (begin
                (csym::removeITnode (ptr (aref vItemTable i)) ITadd)))
            (csym::pthread_mutex_unlock (ptr (aref itMutex i)))

            (= (fref pTsk -> numC) 0)
            (= (fref pTsk -> numT) 0)

            (%if* DEBUG-SHOW (begin
              (csym::fprintf stderr "~%"))))
          (begin
            (inc (fref pTsk -> numPruning))

            (%if* DEBUG-SHOW (begin
              (csym::fprintf stderr "- PRUNING! -~%~%")))))))

    (%if* DEBUG-TIME (begin
      (csym::gettimeofday (+ (aref t i) 1) 0)
      (= (aref doneID i) (fref -thr -> id))))

    (handles T-enumCCIG
;(%if* USE-SPN-RANGE
;  (:spawn-from (if-exp (== OUTSIDE (fref (fref -thr -> treq_top) -> req_from)) (if-exp (> (- i2 i) (* spawnSize 16)) (+ i (* spawnSize 16)) (/ (+ 1 i i2) 2)) (if-exp (> (- i2 i) spawnSize) (+ i spawnSize) (/ (+ 1 i i2) 2)))))
      (%if* USE-SPN-RANGE
        (:spawn-from (if-exp (> (- i2 i) spawnSize) (+ i spawnSize) (/ (+ 1 i i2) 2))))
      (%if* USE-SPN-RATIO
        (:spawn-from (/ (+ 1 i i2) spawnSize)))
      (:put from i1 to i2
        (%if* DEBUG-COPY (begin
          (csym::gettimeofday tpc 0)))
        (= (fref this minVertex) i1)
        (= (fref this maxVertex) i2)
        (= (fref (fref this tsk) maxID) (fref pTsk -> maxID))
        (= (fref pTsk -> maxID) (+ (cast task-id (* (- (fref pTsk -> maxID) (fref pTsk -> minID)) 0.5)) (fref pTsk -> minID)))
        (= (fref (fref this tsk) minID) (+ (fref pTsk -> maxID) 1))
        (initExploreCCIG NULL NULL NULL NULL (ptr (fref this tsk)))
        (%if* DEBUG-COPY (begin
          (csym::gettimeofday (+ tpc 1) 0))))
      (:get
        (%if* DEBUG-COPY (begin
          (csym::gettimeofday (+ tpc 2) 0)))
        (%if* DEBUG-RSLT (begin
          (= (fref (fref (fref (fref pTsk -> subgraph) head) -> prev) -> next) (fref (fref (fref (fref this tsk) subgraph) head) -> next))
          (= (fref (fref (fref (fref (fref this tsk) subgraph) head) -> next) -> prev) (fref (fref (fref pTsk -> subgraph) head) -> prev))
          (= (fref (fref (fref (fref (fref this tsk) subgraph) head) -> prev) -> next) (fref (fref pTsk -> subgraph) head))
          (= (fref (fref (fref pTsk -> subgraph) head) -> prev) (fref (fref (fref (fref this tsk) subgraph) head) -> prev))))
        (+= (fref pTsk -> treeDepth) (fref (fref this tsk) treeDepth))
        (+= (fref pTsk -> numITmutexTrylock) (fref (fref this tsk) numITmutexTrylock))
        (+= (fref pTsk -> numITmutexLocked) (fref (fref this tsk) numITmutexLocked))
        (+= (fref pTsk -> numEmutexTrylock) (fref (fref this tsk) numEmutexTrylock))
        (+= (fref pTsk -> numEmutexLocked) (fref (fref this tsk) numEmutexLocked))
        (+= (fref pTsk -> numTraversed) (fref (fref this tsk) numTraversed))
        (+= (fref pTsk -> numSubgraph) (fref (fref this tsk) numSubgraph))
        (csym::free (fref (fref this tsk) vTraversed))
        (csym::free (fref (fref this tsk) C))
        (csym::free (fref (fref this tsk) T))
        (%if* DEBUG-COPY (begin
          (csym::gettimeofday (+ tpc 3) 0)
          (csym::fprintf fpCopy "%f, 2~%" (+ (csym::elapsedTime tpc (+ tpc 1)) (csym::elapsedTime (+ tpc 2) (+ tpc 3))))))))))

;;;
(def (task-body T-enumCCIG)
  (decl seq int)
  (decl tp (array (struct timeval) 2))
  (inc (aref taskRequest (fref -thr -> id)))
  (csym::gettimeofday tp 0)
  (if (!= (fref (fref this tsk) minID) (fref (fref this tsk) maxID))
    (begin
      (if (>= (cast int (csym::log2 (cast double (- (fref (fref this tsk) maxID) (fref (fref this tsk) minID))))) (* (fref option num-thrs) NUM-NODES))
        (begin
          (= seq 0)
          (enumCCIG (fref this minVertex) (fref this maxVertex) (ptr (fref this tsk))))
        (begin
          (= seq 1)
          (inc (aref seqTaskRequest (fref -thr -> id)))
          (enumCCIG2 (fref this minVertex) (fref this maxVertex) (ptr (fref this tsk))))))
    (begin
      (= seq 1)
      (inc (aref seqTaskRequest (fref -thr -> id)))
      (enumCCIG2 (fref this minVertex) (fref this maxVertex) (ptr (fref this tsk)))))
  (csym::gettimeofday (+ tp 1) 0)
  (+= (aref visit2Vertices (fref -thr -> id)) (fref (fref this tsk) numSearch))
  (+= (aref thresholdPruning (fref -thr -> id)) (fref (fref this tsk) numThreshold))
  (+= (aref inclusivePruning (fref -thr -> id)) (fref (fref this tsk) numPruning))
  (+= (aref tableReference (fref -thr -> id)) (fref (fref this tsk) numTableReference))
  (csym::fprintf stderr "end: task-body_enumCCIG, %f, %llu, %llu, %llu, %d, %llu, %llu, %llu, %llu, %llu, %d, %d, %d~%" (csym::elapsedTime tp (+ tp 1)) (+ (fref (fref this tsk) numSearch) (+ (fref (fref this tsk) numThreshold) (fref (fref this tsk) numPruning))) (fref (fref this tsk) numSearch) (fref (fref this tsk) numThreshold) (fref (fref this tsk) numPruning) (fref (fref this tsk) numTableReference) (fref (fref this tsk) numITmutexTrylock) (fref (fref this tsk) numITmutexLocked) (fref (fref this tsk) numEmutexTrylock) (fref (fref this tsk) numEmutexLocked) (aref numThrow (fref -thr -> id)) (fref -thr -> id) seq)
  (%if* DEBUG-TASK (begin
    (csym::fprintf fpTask "%f, %f, %f, %llu, %d, %d~%" (csym::elapsedTime (ptr t0) tp) (csym::elapsedTime tp (+ tp 1)) (csym::elapsedTime (ptr t0) (+ tp 1)) (fref (fref this tsk) numSearch) seq (fref -thr -> id)))))

;;; Function: thresholdItem - delete the vertex whose # of items is less than the user-specified threshold
(def (thresholdItem minVertex maxVertex) (fn void (const int) (const int))
  (defs int i j k l) ; temporary variable

  (for ((= i minVertex) (< i maxVertex) (inc i))
    ;; if # of items is less than the use-specified threshold, then
    (if (and (> (aref vDegree i) 0) (< (aref vNumItems i) th))
      (begin
        ;; delete edges connected from the vertex
        (= (aref vDegree i) 0)
        (= (aref vFirstEdge i) -1)

        (for ((= j minVertex) (< j maxVertex) (inc j))
          (for ((= k (aref vFirstEdge j)) (!= k -1) (= k (aref eNext k)))
            ;; delete edges connected to the vertex
            (if (== (aref eTo k) i)
              (begin
                ;; if degree of starting point == 1, then
                (if (== (aref vDegree j) 1)
                  (begin
                    (= (aref vDegree j) 0)
                    (= (aref vFirstEdge j) -1))
                  ;; if degree of starting point >= 2, then
                  (begin
                    (if (== k (aref vFirstEdge j))
                      (begin
                        (= (aref vFirstEdge j) (aref eNext k)))
                      (if (== (aref eNext k) -1)
                        (= (aref eNext l) -1)
                        (begin 
                          (= (aref eNext l) (aref eNext k)))))
                    (dec (aref vDegree j))))))
            (= l k)))))))

;;; Function: loadPatternFile - load pattern file
(def (loadPatternFile maxNumItems eHash iHash) (fn void (ptr int) (ptr (struct hsearch_data)) (ptr (struct hsearch_data)))
  (def i int 0)                   ; 
  (decl n int)                    ; item number
  (decl v int)                    ; vertex number
  (def v0 int 1)                  ; 
  (decl item (ptr char))          ; 
  (decl buff (array char 256))    ; buffer
  (decl temp (array char 256))    ;
  (decl he (struct entry))        ;
  (decl hep (ptr (struct entry))) ; 
  (decl fp (ptr FILE))            ; file pointer

  ;; open pattern file
  (if (== (= fp (csym::fopen P-FILE "r")) NULL)
    (begin
      (csym::fprintf stderr "Cannot open pattern file: %s~%" P-FILE)
      (exit EXIT-FAILURE)))

  ;; read a line of data from pattern file
  (while (!= (csym::fgets buff 256 fp) NULL)
    ;; skip a comment line
    (if (!= (csym::strncmp buff "#" 1) 0)
      (begin
        (= v (csym::atoi (csym::strtok buff "~|11|")))

        ;; enter v to eHash
        (csym::sprintf temp "%d" v)
        (= (fref he key) temp)
        (csym::hsearch_r he FIND (ptr hep) eHash)
        (if (== hep NULL)
          (begin
            (= (fref he data) (cast (ptr void) (inc v0)))
            (csym::hsearch_r he ENTER (ptr hep) eHash)))
        (= v (cast int (fref hep -> data)))

        ;; add item to Vertex Data
        (while (!= (= item (csym::strtok NULL ",")) NULL)
          (= n (csym::atoi item))

          ;; enter n to iHash
          (csym::sprintf temp "%d" n)
          (= (fref he key) temp)
          (csym::hsearch_r he FIND (ptr hep) iHash)
          (if (== hep NULL)
            (begin
              (= (fref he data) (cast (ptr void) (inc i)))
              (csym::hsearch_r he ENTER (ptr hep) iHash)))
          (= n (cast int (fref hep -> data)))

          (bit-or= (aref vItem v (cast int (/ n BIT-LEN))) (<< (cast set 1) (cast int (% n BIT-LEN))))
          (inc (aref vNumItems v)) ; increase # of items
          ;; evaluate maximum # of items
          (if (> n (mref maxNumItems))
            (= (mref maxNumItems) n))))))

  ;; close pattern file
  (csym::fclose fp))

;;; Function: createEdge - add edge to eTo 
(def (createEdge v1 v2 edgeMax minVertex maxVertex) (fn void int int (ptr int) (ptr int) (ptr int))
  (defs int i j temp1 temp2) ; temporary variable

  ;; if degree of the starting point == 0, then
  (if (== (aref vDegree v1) 0)
    (begin
      (inc (mref edgeMax))
      (= (aref eTo (mref edgeMax)) v2)
      (= (aref vFirstEdge v1) (mref edgeMax)))

    ;; if degree of starting point >= 1, then
    (begin
      (= temp1 v2)
      (for ((= i (aref vFirstEdge v1)) 1 (= i (aref eNext i)))
        (if (== temp1 (aref eTo i))
          (return)) ; the edge already exists
        (if (> temp1 (aref eTo i))
          (begin
            (= temp2 (aref eTo i))
            (= (aref eTo i) temp1)
            (= temp1 temp2)))
        (if (== (aref eNext i) -1)
          (break)))

      ;; update Edge Data
      (inc (mref edgeMax))
      (= (aref eTo (mref edgeMax)) temp1)
      (= (aref eNext i) (mref edgeMax))))

  ;; evaluate mimimum vertex number
  (if (< v1 (mref minVertex))
    (= (mref minVertex) v1))
  (if (< v2 (mref minVertex))
    (= (mref minVertex) v2))

  ;; evaluate maximum vertex number
  (if (> v1 (mref maxVertex))
    (= (mref maxVertex) v1))
  (if (> v2 (mref maxVertex))
    (= (mref maxVertex) v2))

  ;; increase degree of the starting point
  (inc (aref vDegree v1)))

;;; Function: loadGraphFile - load graph file
(def (loadGraphFile edgeMax minVertex maxVertex eHash) (fn void (ptr int) (ptr int) (ptr int) (ptr (struct hsearch_data)))
  (def v int 1)                   ; 
  (defs int v1 v2)                ; starting point, ending point
  (decl eLabel (ptr char))        ; label of edge
  (decl empty (ptr char))         ; 
  (decl buff (array char 256))    ; buffer
  (decl temp (array char 256))    ;
  (decl he (struct entry))        ;
  (decl hep (ptr (struct entry))) ; 
  (decl fp (ptr FILE))            ; file pointer

  ;; open graph file
  (if (== (= fp (csym::fopen G-FILE "r")) NULL)
    (begin
      (csym::fprintf stderr "Cannot open graph file: %s~%" G-FILE)
      (exit EXIT-FAILURE)))

  ;; read a line of data from graph file
  (while (!= (csym::fgets buff 256 fp) NULL)
    ;; skip a comment line
    (if (!= (csym::strncmp buff "#" 1) 0)
      (begin
        (= v1 (csym::atoi (csym::strtok buff "~|11|")))
        (= eLabel (csym::strtok NULL "~|11|"))
        (= v2 (csym::atoi (csym::strtok NULL "~|11|")))
        (= empty (csym::strtok NULL "~|11|"))

        ;; find v1 from eHash
        (csym::sprintf temp "%d" v1)
        (= (fref he key) temp)
        (csym::hsearch_r he FIND (ptr hep) eHash)
        (if (== hep NULL)
          (continue))
        (= v1 (cast int (fref hep -> data)))

        ;; find v2 from eHash
        (csym::sprintf temp "%d" v2)
        (= (fref he key) temp)
        (csym::hsearch_r he FIND (ptr hep) eHash)
        (if (== hep NULL)
          (continue))
        (= v2 (cast int (fref hep -> data)))

        ;; add edge to Edge List
        (if (== empty NULL)
          (if (!= v1 v2)
            (if (and (< th (aref vNumItems v1)) (< th (aref vNumItems v2)))
              (begin
                (createEdge v1 v2 edgeMax minVertex maxVertex)
                (createEdge v2 v1 edgeMax minVertex maxVertex))))))))

  ;; close graph file
  (csym::fclose fp))

;;; Function: initData - initialize Edge Data & Vertex Data & Debug Data
(def (initData edgeMax minVertex maxVertex maxNumItems eHash iHash) (fn void (ptr int) (ptr int) (ptr int) (ptr int) (ptr (struct hsearch_data)) (ptr (struct hsearch_data)))
  (defs int i j) ; temporary variable

  ;; initialize Edge Data
  (= (mref edgeMax) -1)
  (for ((= i 0) (< i E-SIZE) (inc i))
    (= (aref eTo i) -1)
    (= (aref eNext i) -1))

  ;; initialize Vertex Data
  (= (mref minVertex) INT_MAX)
  (= (mref maxVertex) -1)
  (= (mref maxNumItems) -1)
  (for ((= i 0) (< i V-SIZE) (inc i))
    (= (aref vDegree i) 0)
    (= (aref vFirstEdge i) -1)
    (= (aref vNumItems i) 0)
    (for ((= j 0) (< j BIT-ITEM) (inc j))
      (= (aref vItem i j) 0)))

  ;; initialize Item Table
  (= vItemTable (cast (ptr ITlist) (csym::malloc (* V-SIZE (sizeof ITlist)))))
  (for ((= i 0) (< i V-SIZE) (inc i))
    (csym::initITlist (ptr (aref vItemTable i))))

  ;; initialize Exception Queue
  (for ((= i 0) (< i NUM-WORKERS) (inc i))
    (for ((= j 0) (< j Q-SIZE) (inc j))
      (= (aref Qe i j) 0))
    (= (aref numQe i) 0))

  ;; initialize Debug Data
  (for ((= i 0) (< i NUM-WORKERS) (inc i))
    (= (aref visit2Vertices i) 0)
    (= (aref thresholdPruning i) 0)
    (= (aref inclusivePruning i) 0)
    (= (aref taskRequest i) 0)
    (= (aref seqTaskRequest i) 0)
    (= (aref tableReference i) 0)
    (= (aref numRedundantSearch i) 0)
    (= (aref numThrow i) 0))

  (for ((= i 0) (< i V-SIZE) (inc i))
    (= (aref doneID i) 0))

  ;; initialize Hash Data
  (csym::memset eHash 0 (sizeof (mref eHash)))
  (csym::memset iHash 0 (sizeof (mref iHash)))
  (csym::hcreate_r E-SIZE eHash)
  (csym::hcreate_r I-SIZE iHash))

;;; 
(def (task T-startCCIG)
  (def th int :in)
  (def spawnSize int :in)
  (def loopRatio int :in))

;;; Main 
(def (task-body T-startCCIG)
  (defs int i j k)                     ; temporary variable
  (decl tp (array (struct timeval) 2)) ; start time, end time
  (defs double t1 t2)                  ; start user time, end user time
  (decl loopRange int)                 ; loop range of enumCCIG
  (decl resultFile (ptr char))         ; name of result file
  (decl timeFile (array char 128))     ; name of time file
  (decl taskFile (array char 128))     ; name of task file
  (decl lockFile (array char 128))     ; name of lock file
  (decl copyFile (array char 128))     ; name of copy file
  (decl ITptr (ptr ITnode))            ; pointer to the ITnode
  (defs (ptr FILE) fp fpt)             ; file pointer

  ;; pthread data
  ;(decl resetThread (array pthread_t (fref option num-thrs)))
  ;(decl data (array threadInfo (fref option num-thrs)))
  ;(decl attr pthread_attr_t)

  ;; Task
  (def tsk (struct T-exploreCCIG))
  (decl taskRange task-id)

  ;; Edge Data
  (decl edgeMax int)     ; maximum edge number

  ;; Vertex Data
  (decl minVertex int)           ; minimum vertex number
  (decl maxVertex int)           ; maximum vertex number
  (decl maxNumItems int)         ; maximum # of items

  ;; Subgraph Data
  (decl Gptr (ptr Gnode))

  ;; Hash Data
  (defs (struct hsearch_data) eHash iHash)

  ;; Debug Data
  (def numSearch uint64_t 0)                      ; # of search spaces
  (def maxWorkerSearch uint64_t 0)                ; 
  (def minWorkerSearch uint64_t UINT-LEAST64-MAX) ; 
  (def avgWorkerSearch double 0.0)                ; 
  (def workerSearchSD double 0.0)                 ; 
  (def avgWorkerSearchPerSec double 0.0)          ; 
  (def workerSearchPerSecSD double 0.0)           ; 
  (def numTaskRequest int 0)                      ; # of task requests
  (def avgTaskRequest double 0.0)                 ; 
  (def taskRequestSD double 0.0)                  ; 
  (def numSeqTaskRequest int 0)                   ; # of seq. task requests
  (def avgSeqTaskRequest double 0.0)              ; 
  (def seqTaskRequestSD double 0.0)               ; 
  (def numAllTaskRequest int 0)                   ; # of all task requests
  (def avgAllTaskRequest double 0.0)              ; 
  (def allTaskRequestSD double 0.0)               ; 
  (def numTableReference uint64_t 0)              ; 
  (def avgTableReference double 0.0)              ; 
  (def tableReferenceSD double 0.0)               ; 
  (def avgSizeSubgraph uint64_t 0)                ; 
  (def maxSizeSubgraph int 0)                     ; 
  (def numFindRedundant int 0)                    ; # of finding redundant searches
  (def avgFindRedundant double 0.0)               ; 
  (def findRedundantSD double 0.0)                ; 
  (def numThrowException int 0)                   ; # of thrown exceptions
  (def avgThrowException double 0.0)              ; 
  (def throwExceptionSD double 0.0)               ; 

  ;; arguments
  (= th (fref this th))
  (= spawnSize (fref this spawnSize))
  (= resultFile "result.txt")
  (if USE-SPN-RANGE
    (begin
      (csym::sprintf timeFile "time4-%02d_%d-%d.csv" (fref option num-thrs) (fref this th) (fref this spawnSize))
      (csym::sprintf taskFile "task4-%02d_%d-%d.csv" (fref option num-thrs) (fref this th) (fref this spawnSize))
      (csym::sprintf lockFile "lock4-%02d_%d-%d.csv" (fref option num-thrs) (fref this th) (fref this spawnSize))
      (csym::sprintf copyFile "copy4-%02d_%d-%d.csv" (fref option num-thrs) (fref this th) (fref this spawnSize)))
    (begin
      (if USE-SPN-RATIO
        (begin
          (csym::sprintf timeFile "time4-%02d_%d_%d.csv" (fref option num-thrs) (fref this th) (fref this spawnSize))
          (csym::sprintf taskFile "task4-%02d_%d_%d.csv" (fref option num-thrs) (fref this th) (fref this spawnSize))
          (csym::sprintf lockFile "lock4-%02d_%d_%d.csv" (fref option num-thrs) (fref this th) (fref this spawnSize))
          (csym::sprintf copyFile "copy4-%02d_%d_%d.csv" (fref option num-thrs) (fref this th) (fref this spawnSize)))
        (begin
          (csym::sprintf timeFile "time4-%02d_%d-half.csv" (fref option num-thrs) (fref this th))
          (csym::sprintf taskFile "task4-%02d_%d-half.csv" (fref option num-thrs) (fref this th))
          (csym::sprintf lockFile "lock4-%02d_%d-half.csv" (fref option num-thrs) (fref this th))
          (csym::sprintf copyFile "copy4-%02d_%d-half.csv" (fref option num-thrs) (fref this th))))))

  ;; set ID
  (= (fref tsk minID) 0)
  (= (fref tsk maxID) -1)
  (= taskRange (cast task-id (/ (fref tsk maxID) (fref this loopRatio))))
  (= (fref tsk maxID) taskRange)

  ;; init pthread
  ;(csym::pthread_attr_init (ptr attr))
  ;(csym::pthread_attr_setdetachstate (ptr attr) PTHREAD_CREATE_JOINABLE)

  ;; initialize Edge Data & Vertex Data & Debug Data
  (initData (ptr edgeMax) (ptr minVertex) (ptr maxVertex) (ptr maxNumItems) (ptr eHash) (ptr iHash))

  ;; load pattern file
  (loadPatternFile (ptr maxNumItems) (ptr eHash) (ptr iHash))

  ;; load graph file
  (loadGraphFile (ptr edgeMax) (ptr minVertex) (ptr maxVertex) (ptr eHash))

  ;; delete the vertex whose # of items is less than the user-specified threshold
  ;(thresholdItem minVertex maxVertex)

  ;; set the range of enumCCIG loop
  (= loopRange (cast int (/ (- (+ maxVertex 1) minVertex) (fref this loopRatio))))

  ;; set the range of resetTaskID loop
  ;(for ((= i 0) (< i (fref option num-thrs)) (inc i))
  ;  (= (fref (aref data i) loopStart) (* (/ (- maxVertex minVertex) (fref option num-thrs)) i))
  ;  (= (fref (aref data i) loopEnd) (* (/ (- maxVertex minVertex) (fref option num-thrs)) (+ i 1))))

  ;; init T-exploreCCIG
  (initExploreCCIG NULL NULL NULL NULL (ptr tsk))

  ;; init mutex
  (for ((= i 0) (< i V-SIZE) (inc i))
    (csym::pthread_mutex_init (ptr (aref itMutex i)) NULL))
  (for ((= i 0) (< i NUM-WORKERS) (inc i))
    (csym::pthread_mutex_init (ptr (aref excpMutex i)) NULL))
  (= inited 1)

  ;; open task file
  (%if* DEBUG-TASK (begin
    (if (== (= fpTask (csym::fopen taskFile "w")) NULL)
      (begin
        (csym::fprintf stderr "Cannot open task file: %s~%" taskFile)
        (exit EXIT-FAILURE)))))

  ;; open lock file
  (%if* DEBUG-LOCK (begin
    (if (== (= fpLock (csym::fopen lockFile "w")) NULL)
      (begin
        (csym::fprintf stderr "Cannot open lock file: %s~%" lockFile)
        (exit EXIT-FAILURE)))))

  ;; open copy file
  (%if* DEBUG-COPY (begin
    (if (== (= fpCopy (csym::fopen copyFile "w")) NULL)
      (begin
        (csym::fprintf stderr "Cannot open copy file: %s~%" copyFile)
        (exit EXIT-FAILURE)))))

  ;; get start time of program
  (= t1 (csym::getrusageSec))
  (csym::gettimeofday (ptr t0) 0)
  (csym::gettimeofday tp 0)

  ;; enumerate CCIG
  (= i minVertex)
  (for ((< (+ i loopRange) maxVertex) (+= i loopRange))
    (enumCCIG i (+ i loopRange) (ptr tsk))
    (= (fref tsk minID) (+ (fref tsk maxID) 1))
    (+= (fref tsk maxID) taskRange))

    ;(for ((= k minVertex) (< k (+ maxVertex 1)) (inc k))
    ;  (= ITptr (fref (fref (aref vItemTable k) head) -> next))
    ;  (while (!= ITptr (fref (aref vItemTable k) head))
    ;    (= (fref ITptr -> minID) (cast task-id 0))
    ;    (= (fref ITptr -> maxID) (cast task-id 0))
    ;    (= ITptr (fref ITptr -> next))))

    ;; re-set ID
    ;(= (fref tsk minID) 0)
    ;(= (fref tsk maxID) -1))
  (enumCCIG i (+ maxVertex 1) (ptr tsk))

  ;(for ((= j 1) (< j (fref this loopRatio)) (inc j)) 
  ;  (enumCCIG i (+ i loopRange) (ptr tsk))

  ;  ;(for ((= k 0) (< k (fref option num-thrs)) (inc k))
  ;  ;  (csym::pthread_create (ptr (aref resetThread k)) (ptr attr) resetTaskID (ptr (aref data k))))
  ;  ;(for ((= k 0) (< k (fref option num-thrs)) (inc k))
  ;  ;  (csym::pthread_join (aref resetThread k) NULL))

  ;  (for ((= k minVertex) (< k (+ maxVertex 1)) (inc k))
  ;    (= ITptr (fref (fref (aref vItemTable k) head) -> next))
  ;    (while (!= ITptr (fref (aref vItemTable k) head))
  ;      (= (fref ITptr -> minID) (cast task-id 0))
  ;      (= (fref ITptr -> maxID) (cast task-id 0))
  ;      (= ITptr (fref ITptr -> next))))

  ;  ;; re-set ID
  ;  (= (fref tsk minID) 0)
  ;  (= (fref tsk maxID) UINT-LEAST64-MAX)

  ;  (+= i loopRange))
  ;(enumCCIG i (+ maxVertex 1) (ptr tsk))

  ;; get end time of program
  (csym::gettimeofday (+ tp 1) 0)
  (= t2 (csym::getrusageSec))

  ;; dispose of pthread & mutex & item table & hash tables
  ;(csym::pthread_attr_destroy (ptr attr))
  (for ((= i 0) (< i V-SIZE) (inc i))
    (csym::pthread_mutex_destroy (ptr (aref itMutex i)))
    (csym::termITlist (ptr (aref vItemTable i))))
  (for ((= i 0) (< i NUM-WORKERS) (inc i))
    (csym::pthread_mutex_destroy (ptr (aref excpMutex i))))
  (csym::free vItemTable)
  (csym::hdestroy_r (ptr eHash))
  (csym::hdestroy_r (ptr iHash))

  ;; close lock file
  (%if* DEBUG-LOCK (begin
    (csym::fclose fpLock)))

  ;; close copy file
  (%if* DEBUG-COPY (begin
    (csym::fclose fpCopy)))

  ;; close task file
  (%if* DEBUG-TASK (begin
    (csym::fprintf fpTask "%f, %f, %f, %llu, 0, %d~%" (csym::elapsedTime (ptr t0) tp) (csym::elapsedTime tp (+ tp 1)) (csym::elapsedTime (ptr t0) (+ tp 1)) (fref tsk numSearch) (fref -thr -> id))
    (csym::fclose fpTask)))

  (+= (aref visit2Vertices (fref -thr -> id)) (fref tsk numSearch))
  (+= (aref thresholdPruning (fref -thr -> id)) (fref tsk numThreshold))
  (+= (aref inclusivePruning (fref -thr -> id)) (fref tsk numPruning))
  (+= (aref tableReference (fref -thr -> id)) (fref tsk numTableReference))

  (%if* DEBUG-TIME (begin
    ;; open time file
    (if (== (= fpt (csym::fopen timeFile "w")) NULL)
      (begin
        (csym::fprintf stderr "Cannot open time file: %s~%" timeFile)
        (exit EXIT-FAILURE)))

    (for ((= i minVertex) (< i maxVertex) (inc i))
      (csym::fprintf fpt "%d, %f, %f, %d~%" i (csym::elapsedTime tp (+ (aref t i) 1)) (csym::elapsedTime (aref t i) (+ (aref t i) 1)) (aref doneID i)))

    ;; close time file
    (csym::fclose fpt)))

  ;; debug mode
  (%if* DEBUG-DATA (begin
    (begin
      (csym::fprintf stderr "~%----- Edge Data -----~%")
      (for ((= i 0) (<= i edgeMax) (inc i))
        (csym::fprintf stderr "Edge %d: %d, %d~%" i (aref eTo i) (aref eNext i)))
      (csym::fprintf stderr "~%----- Vertex Data -----~%")
      (for ((= i minVertex) (<= i maxVertex) (inc i))
        (csym::fprintf stderr "Vertex %d: %d, %d, " i (aref vDegree i) (aref vFirstEdge i))
        (for ((= j (/ maxNumItems BIT-LEN)) (>= j 0) (dec j))
          (printBits (aref vItem i j)))
        (csym::fprintf stderr ", %d~%" (aref vNumItems i)))
      (csym::fprintf stderr "~%----- Subgraph List -----~%")
      (= i 0)
      (= Gptr (fref (fref (fref tsk subgraph) head) -> next))
      (while (!= Gptr (fref (fref tsk subgraph) head))
        ;; print vertices of CCIG
        (csym::fprintf stderr "Subgraph %d:" i)
        (for ((= j 0) (< j (fref Gptr -> numT)) (inc j))
          (csym::fprintf stderr " %d" (aref (fref Gptr -> T) j)))
        (csym::fprintf stderr " ( ")
        ;; print common itemset of CCIG
        (for ((= j 0) (< j BIT-ITEM) (inc j))
          (csym::fprintDecimally stderr (aref (fref Gptr -> item) j) j))
        (inc i)
        (= Gptr (fref Gptr -> next))
        (csym::fprintf stderr ")~%"))
      (csym::fprintf stderr "~%")
      (csym::fprintf stderr "edgeMax = %d, minVertex = %d, maxVertex = %d, maxNumItems = %d~%" edgeMax minVertex maxVertex maxNumItems))))

  ;; output result file
  (%if* DEBUG-RSLT (begin
    (begin
      ;; open result file
      (if (== (= fp (csym::fopen resultFile "w")) NULL)
        (begin
          (csym::fprintf stderr "Cannot open result file: %s~%" resultFile)
          (exit EXIT-FAILURE)))
      (= Gptr (fref (fref (fref tsk subgraph) head) -> next))
      (while (!= Gptr (fref (fref tsk subgraph) head))
        ;; write vertices of CCIG to stream
        (for ((= j 0) (< j (fref Gptr -> numT)) (inc j))
          (csym::fprintf fp "%d " (aref (fref Gptr -> T) j)))
        (csym::fprintf fp "( ")
        ;; write common itemset of CCIG to stream
        (for ((= j 0) (< j BIT-ITEM) (inc j))
          (csym::fprintDecimally fp (aref (fref Gptr -> item) j) j))
        (= Gptr (fref Gptr -> next))
        (csym::fprintf fp ")~%"))

      ;; close result file
      (csym::fclose fp))))

  (%if* DEBUG-RSLT (begin
    (= Gptr (fref (fref (fref tsk subgraph) head) -> next))
    (while (!= Gptr (fref (fref tsk subgraph) head))
      (+= avgSizeSubgraph (fref Gptr -> numT))
      (if (< maxSizeSubgraph (fref Gptr -> numT))
        (= maxSizeSubgraph (fref Gptr -> numT)))
      (= Gptr (fref Gptr -> next)))))

  ;; show debug datas
  (csym::fprintf stderr "time = %f[sec]~%" (csym::elapsedTime tp (+ tp 1)))
  (csym::fprintf stderr "user time = %f[sec]~%" (- t2 t1))
  (csym::fprintf stderr "# of subgraphs = %d~%" (fref tsk numSubgraph))
  (csym::fprintf stderr "Avg. size of tree depth = %f~%" (/ (cast double (fref tsk treeDepth)) (cast double (fref tsk numTraversed))))
  (%if* DEBUG-RSLT (begin
    (csym::fprintf stderr "Max size of subgraph = %d~%" maxSizeSubgraph)
    (csym::fprintf stderr "Avg. size of subgraph = %f~%" (/ (cast double avgSizeSubgraph) (cast double (fref tsk numSubgraph))))))

  (csym::fprintf stderr "~%# of searches & task-requests & table-references & redundant-searchs & thrown exceptions~%")
  (for ((= j 0) (< j (fref option num-thrs)) (inc j))
    (= (aref searchSpace j) (+ (+ (aref visit2Vertices j) (aref thresholdPruning j)) (aref inclusivePruning j)))
    (csym::fprintf stderr " ID:%d %llu(%llu, %llu, %llu), %d/%d, %llu, %d, %d~%" j (aref searchSpace j) (aref visit2Vertices j) (aref thresholdPruning j) (aref inclusivePruning j) (aref taskRequest j) (aref seqTaskRequest j) (aref tableReference j) (aref numRedundantSearch j) (aref numThrow j))
    (+= numSearch (aref searchSpace j))
    (if (< maxWorkerSearch (aref searchSpace j))
      (= maxWorkerSearch (aref searchSpace j)))
    (if (> minWorkerSearch (aref searchSpace j))
      (= minWorkerSearch (aref searchSpace j)))
    (+= avgWorkerSearchPerSec (/ (aref searchSpace j) (csym::elapsedTime tp (+ tp 1))))
    (+= numTaskRequest (aref taskRequest j))
    (+= numSeqTaskRequest (aref seqTaskRequest j))
    (+= numAllTaskRequest (aref taskRequest j))
    (+= numAllTaskRequest (aref seqTaskRequest j))
    (+= numTableReference (aref tableReference j))
    (+= numFindRedundant (aref numRedundantSearch j))
    (+= numThrowException (aref numThrow j)))
  (= avgWorkerSearch (/ (cast double numSearch) (cast double (fref option num-thrs))))
  (= avgWorkerSearchPerSec (/ avgWorkerSearchPerSec (cast double (fref option num-thrs))))
  (= avgTaskRequest (/ (cast double numTaskRequest) (cast double (fref option num-thrs))))
  (= avgSeqTaskRequest (/ (cast double numSeqTaskRequest) (cast double (fref option num-thrs))))
  (= avgAllTaskRequest (/ (cast double (+ numTaskRequest numSeqTaskRequest)) (cast double (fref option num-thrs))))
  (= avgTableReference (/ (cast double numTableReference) (cast double (fref option num-thrs))))
  (= avgFindRedundant (/ (cast double numFindRedundant) (cast double (fref option num-thrs))))
  (= avgThrowException (/ (cast double numThrowException) (cast double (fref option num-thrs))))

  (for ((= j 0) (< j (fref option num-thrs)) (inc j))
    (+= workerSearchSD (csym::pow (- (aref searchSpace j) avgWorkerSearch) 2.0))
    (+= workerSearchPerSecSD (csym::pow (- (/ (aref searchSpace j) (csym::elapsedTime tp (+ tp 1))) avgWorkerSearchPerSec) 2.0))
    (+= taskRequestSD (csym::pow (- (aref taskRequest j) avgTaskRequest) 2.0))
    (+= seqTaskRequestSD (csym::pow (- (aref seqTaskRequest j) avgSeqTaskRequest) 2.0))
    (+= allTaskRequestSD (csym::pow (- (+ (aref taskRequest j) (aref seqTaskRequest j)) avgAllTaskRequest) 2.0))
    (+= tableReferenceSD (csym::pow (- (aref tableReference j) avgTableReference) 2.0))
    (+= findRedundantSD (csym::pow (- (aref numRedundantSearch j) avgFindRedundant) 2.0))
    (+= throwExceptionSD (csym::pow (- (aref numThrow j) avgThrowException) 2.0)))
  (/= workerSearchSD (fref option num-thrs))
  (/= workerSearchPerSecSD (fref option num-thrs))
  (/= taskRequestSD (fref option num-thrs))
  (/= seqTaskRequestSD (fref option num-thrs))
  (/= allTaskRequestSD (fref option num-thrs))
  (/= tableReferenceSD (fref option num-thrs))
  (/= findRedundantSD (fref option num-thrs))
  (/= throwExceptionSD (fref option num-thrs))
  (= workerSearchSD (csym::sqrt workerSearchSD))
  (= workerSearchPerSecSD (csym::sqrt workerSearchPerSecSD))
  (= taskRequestSD (csym::sqrt taskRequestSD))
  (= seqTaskRequestSD (csym::sqrt seqTaskRequestSD))
  (= allTaskRequestSD (csym::sqrt allTaskRequestSD))
  (= tableReferenceSD (csym::sqrt tableReferenceSD))
  (= findRedundantSD (csym::sqrt findRedundantSD))
  (= throwExceptionSD (csym::sqrt throwExceptionSD))

  (csym::fprintf stderr "# of searches = %llu, Min = %llu, Max = %llu, Avg. = %.1f, S.D. = %.1f~%" numSearch minWorkerSearch maxWorkerSearch avgWorkerSearch workerSearchSD)
  (csym::fprintf stderr "# of task requests = %d, Avg. = %.1f, S.D. = %.1f~%" numTaskRequest avgTaskRequest taskRequestSD)
  (csym::fprintf stderr "# of seq. task requests = %d, Avg. = %.1f, S.D. = %.1f~%" numSeqTaskRequest avgSeqTaskRequest seqTaskRequestSD)
  (csym::fprintf stderr "# of all task requests = %d, Avg. = %.1f, S.D. = %.1f~%" numAllTaskRequest avgAllTaskRequest allTaskRequestSD)
  (csym::fprintf stderr "# of searches / sec = %.1f, Avg. = %.1f, S.D. = %.1f~%" (/ numSearch (csym::elapsedTime tp (+ tp 1))) avgWorkerSearchPerSec workerSearchPerSecSD)
  (csym::fprintf stderr "# of table references = %llu, Avg. = %.1f, S.D. = %.1f~%" numTableReference avgTableReference tableReferenceSD)
  (csym::fprintf stderr "# of ITmutex trylock = %llu, " (fref tsk numITmutexTrylock))
  (csym::fprintf stderr "# of ITmutex locked = %llu(%.3f%%)~%" (fref tsk numITmutexLocked) (* (/ (cast double (fref tsk numITmutexLocked)) (cast double (fref tsk numITmutexTrylock))) 100.0))
  (csym::fprintf stderr "# of Emutex trylock = %llu, " (fref tsk numEmutexTrylock))
  (csym::fprintf stderr "# of Emutex locked = %llu(%.3f%%)~%" (fref tsk numEmutexLocked) (* (/ (cast double (fref tsk numEmutexLocked)) (cast double (fref tsk numEmutexTrylock))) 100.0))
  (csym::fprintf stderr "# of finding redundant searches = %d, Avg. = %.1f, S.D. = %.1f~%" numFindRedundant avgFindRedundant findRedundantSD)
  (csym::fprintf stderr "# of throwing exceptions = %d, Avg. = %.1f, S.D. = %.1f~%" numThrowException avgThrowException throwExceptionSD))
