;;;
;;; treecode.tcell
;;;   created by Ken Matsui <kmatsui@kuis.kyoto-u.ac.jp>
;;;
;;; This Tascell program is implemented based on a Barnes-Hut simulation
;;; program called treecode created by Joshua E. Barnes. To refer to the
;;; original program, please visit here:
;;;   http://www.ifa.hawaii.edu/~barnes/treecode/treeguide.html
;;;

;; task 0 0 0 0
;; <arguments for the original treecode (e.g., nbody=1000)>
;;


(%ifndef* NF-TYPE
  (%defconstant NF-TYPE GCC)) ; one of (GCC LW-SC CL-SC XCC XCCCL)
(%include "rule/tcell-setrule.sh")

(c-exp "#include <string.h>")
(c-exp "#include <assert.h>")
(c-exp "#include <time.h>")

(c-exp "#include \"stdinc.h\"")
(c-exp "#include \"mathfns.h\"")
(c-exp "#include \"vectmath.h\"")
(c-exp "#include \"getparam.h\"")
(c-exp "#include \"treedefs.h\"")
(c-exp "#include \"treecode.h\"")

; if building for distributed memory environment, include communication library
(%ifdef DISTRIBUTED ((%include "treecomm.tcell")))


;------------------------------------------------------------------------------
; definition of the worker local storage (used for the tree construction)
;------------------------------------------------------------------------------

(def worker-data
    ; == worker's unique memory pool for space stealing ==
    (def pool cellptr)
    (def pool-size int)
    (def pool-used int)
    (def freecell cellptr)
    ; == evaluation results of space stealing ==
    (%ifdef* MKTREE-PROFILE
        (def received-bodies int)
        (def inserted-bodies int)
        (def received-task int)
        (def failed-task int)
        (def working-time long)
        (def inserting-time long)
        (def task-dividing-time long)
        (def checking-time long)
        (def redundant-time long)
        (def fst-merging-time long)
        (def rst-merging-time long)
        )
    )

(def worker-init
    ; == worker's unique memory pool for space stealing ==
    (= WDATA.pool NULL)
    (= WDATA.pool-size 0)
    (= WDATA.pool-used 0)
    (= WDATA.freecell NULL)
    ; == evaluation results of space stealing ==
    (%ifdef* MKTREE-PROFILE
        (= WDATA.received-bodies 0)
        (= WDATA.inserted-bodies 0)
        (= WDATA.received-task 0)
        (= WDATA.failed-task 0)
        (= WDATA.working-time 0)
        (= WDATA.inserting-time 0)
        (= WDATA.task-dividing-time 0)
        (= WDATA.checking-time 0)
        (= WDATA.redundant-time 0)
        (= WDATA.fst-merging-time 0)
        (= WDATA.rst-merging-time 0)
        )
    )


;------------------------------------------------------------------------------
; declarations of functions and global variables
;------------------------------------------------------------------------------

; default values for input parameters
(extern defv (array string))


(decl (treeforce)
      (wfn void))
(decl (stepsystem)
      (wfn void))

; the tree construction is not ready for distributed memory environments,
; so declare maketree as `fn' if needed
(%ifdef DISTRIBUTED (
    (decl (maketree btab nbody)
          (fn void bodyptr int))
    )(
    (decl (maketree btab nbody)
          (wfn void bodyptr int))
    ))

(decl (gravcalc)
      (wfn void))


(def mktreetime double 0.0)
    (def nwtreetime double 0.0)
    (def expandtime double 0.0)
    (def crtreetime double 0.0)
    (def hackcmtime double 0.0)
    (def threadtime double 0.0)
(%if* (or (eq 'MKTREE-METHOD 'MERGE)
          (eq 'MKTREE-METHOD 'MERGE-PROB))
    (def firstinsert double 0.0)
    (def otherinsert double 0.0)
    )
(def grcalctime double 0.0)
(def pscalctime double 0.0)

(def walk_spawned int 0)

(%ifdef DISTRIBUTED (
    (static brcasttime double 0.0)
    (static bodytab-initialized bool FALSE)
    (static celltab-initialized bool FALSE)
    ))


(%defconstant PROGNAME "treecode")
(%defconstant MAX_ARGLINE 1024)

(extern sv_socket int)


;------------------------------------------------------------------------------
; elapsed-time
;------------------------------------------------------------------------------

(def (csym::elapsed-time tp) 
     (fn double (array (struct timeval) 2))
    (return (+ (- (fref (aref tp 1) tv-sec)
                  (fref (aref tp 0) tv-sec))
               (* 0.000001
                  (- (fref (aref tp 1) tv-usec)
                     (fref (aref tp 0) tv-usec)))))
    )


;------------------------------------------------------------------------------
; main: task definition that replaces main function of treecode
;------------------------------------------------------------------------------

(def (task main)
    (def argc int)
    (def argv (ptr (ptr char)))
    (def argline (array char MAX_ARGLINE))
    )

(def (task-receiver main)
    (def cp (ptr char))
    (def argc int)
    (def maxargc int)
    (def argv (ptr (ptr char)))

    (csym::receive-line this.argline MAX_ARGLINE sv-socket)
    (for ((= cp this.argline) (< cp (+ this.argline (csym::strlen this.argline))) (inc cp))
        (if (== (mref cp) 59)
            (= (mref cp) 32)))

    (= argc 0)
    (= maxargc 4)
    (= argv (csym::malloc (* maxargc (sizeof (ptr char)))))
    (= (aref argv (inc argc)) PROGNAME)
    (= cp (csym::strtok this.argline " ~%"))
    (while (!= cp NULL)
        (if (>= (+ argc 1) (- maxargc 1))
            (begin
            (*= maxargc 2)
            (= argv (csym::realloc argv (* maxargc (sizeof (ptr char)))))
            (if (== argv NULL)
                (csym::error "recv_main_task: memory allocation failed.")
                )
            ))
        (= (aref argv (inc argc)) cp)
        (= cp (csym::strtok NULL " ~%"))
        )
    (= (aref argv argc) cp)
    
    (= (fref this argc) argc)
    (= (fref this argv) argv)
    )

(def (rslt-sender main)
    (csym::free (fref this argv))
    )
      

;; ======== for debugging of space stealing ========
(extern threads (array (struct thread-data) 128))
(extern num-thrs unsigned-int)

(def (task-body main)
    (def i int)
    (def tp (array (struct timeval) 2))
    
    (csym::initparam (fref this argv) defv)
    (= headline (+ (aref defv 0) 1))
    (csym::startrun)
    
    (fprintf stderr (%string "treecode started~%"
                             "compile-time options: "
                    (%ifdef* DISTRIBUTED
                             "DISTRIBUTED "
                     %else
                             "SHARED "
                             "MKTREE-METHOD=" MKTREE-METHOD " ")
                             "~%"))
    (%ifdef* FORCEREPORT (csym::startoutput))
    (csym::gettimeofday tp 0)
    (if (== nstep 0)
        (begin
        (treeforce)
        (%ifdef FORCEREPORT (
            (csym::output)
            ))
        ))
    (%ifdef USEFREQ (
        (if (!= freq 0.0)
            (while (> (- tstop tnow) (/ 0.01 freq))
                (stepsystem)
                (%ifdef FORCEREPORT (
                    (csym::output)
                    ))
                )
            )
        )(
        (if (!= dtime 0.0)
            (while (> (- tstop tnow) (* 0.01 dtime))
                (stepsystem)
                (%ifdef FORCEREPORT (
                    (csym::output)
                    ))
                )
            )
        ))
    (csym::gettimeofday (+ tp 1) 0)
 
    (csym::fprintf stderr "~%")
    (%ifndef* DISTRIBUTED
        (csym::fprintf stderr "              maketree   gravcalc  stepsystm  totaltime~%")
        (csym::fprintf stderr " time[s.]  %8.4lf  %9.4lf  %9.4lf  %9.4lf~%"
                              mktreetime grcalctime pscalctime (csym::elapsed-time tp))
     %else
        (csym::fprintf stderr "       maketree  broadcast  gravcalc  stepsystem  total~%")
        (csym::fprintf stderr " time  %.4lf s  %.4lf s  %.4lf s  %.4lf s  %.4lf s~%"
                              mktreetime brcasttime grcalctime pscalctime (csym::elapsed-time tp))
        )
    (csym::fprintf stderr "~%")
    (csym::fprintf stderr "             maketree  newtree  expandbox  insrttree  hackcofm  thrdtree~%")
    (csym::fprintf stderr " time[s.]  %8.4lf  %7.4lf  %9.4lf  %9.4lf  %8.4lf  %8.4lf~%"
                          mktreetime nwtreetime expandtime crtreetime hackcmtime threadtime)
    (csym::fprintf stderr "~%")
    (%if* (or (eq 'MKTREE-METHOD 'MERGE)
              (eq 'MKTREE-METHOD 'MERGE-PROB))
        (csym::fprintf stderr "             1stinsrt  othrinsrt~%")
        (csym::fprintf stderr " time[s.]  %8.4lf  %8.4lf~%" firstinsert otherinsert)
        (csym::fprintf stderr "~%")
        )

    (csym::fprintf stderr "task copied: %d~%" walk_spawned)
    (csym::fprintf stderr "~%")

    (%ifdef* MKTREE-PROFILE
        (csym::fprintf stderr "worker | breceived binserted bratio | treceived tfailed |   worktime  checktime  inserttime  redundant  1stmergetime  rstmergetime  puttime~%")
        (for ((= i 0) (< i num-thrs) (inc i))
             (def wkdata (ptr (struct worker-data)) (cast (ptr (struct worker-data)) (fref (aref threads i) wdptr)))
             (csym::fprintf stderr
                 "%6d | %9d %9d %6.3f | %9d %7d | %7.2f ms %7.2f ms   %6.2f ms  %6.2f ms  %9.2f ms  %9.2f ms  %5.2f ms~%"
                 i
                 (fref wkdata -> received-bodies)
                 (fref wkdata -> inserted-bodies)
                 (/ (cast double (fref wkdata -> inserted-bodies))
                    (cast double (fref wkdata -> received-bodies)))
                 (fref wkdata -> received-task)
                 (fref wkdata -> failed-task)
                 (/ (fref wkdata -> working-time) 1000000.0)
                 (/ (fref wkdata -> checking-time) 1000000.0)
                 (/ (fref wkdata -> inserting-time) 1000000.0)
                 (/ (fref wkdata -> redundant-time) 1000000.0)
                 (/ (fref wkdata -> fst-merging-time) 1000000.0)
                 (/ (fref wkdata -> rst-merging-time) 1000000.0)
                 (/ (fref wkdata -> task-dividing-time) 1000000.0)
                 )
             )
        (csym::fprintf stderr "~%")
        )

    (def csvname (array char 256))
    (def csvnamecnt int 0)
    (csym::snprintf csvname 255 "result-nbody%d-nstep%d-nworker%d-no%d.csv" nbody nstep num-thrs (inc csvnamecnt))
    (def fp (ptr FILE) (csym::fopen csvname "r"))
    (if fp
        (begin
        (do-while fp
            (csym::fclose fp)
            (csym::snprintf csvname 255 "result-nbody%d-nstep%d-nworker%d-no%d.csv" nbody nstep num-thrs (inc csvnamecnt))
            (= fp (csym::fopen csvname "r"))
            )
        ))
    (= fp (csym::fopen csvname "w"))
    (if fp
        (begin
        (%ifndef* DISTRIBUTED
            (csym::fprintf fp "maketree, gravcalc, stepsystm, totaltime~%")
            (csym::fprintf fp "%.4lf, %.4lf, %.4lf, %.4lf~%"
                              mktreetime grcalctime pscalctime (csym::elapsed-time tp))
         %else
            (csym::fprintf fp "maketree, broadcast, gravcalc, stepsystem, total~%")
            (csym::fprintf fp "%.4lf, %.4lf, %.4lf, %.4lf, %.4lf~%"
                              mktreetime brcasttime grcalctime pscalctime (csym::elapsed-time tp))
            )
        (csym::fprintf fp "~%")
        (csym::fprintf fp "maketree, newtree, expandbox, insrttree, hackcofm, thrdtree~%")
        (csym::fprintf fp "%.4lf, %.4lf, %.4lf, %.4lf, %.4lf, %.4lf~%"
                          mktreetime nwtreetime expandtime crtreetime hackcmtime threadtime)
        (csym::fprintf fp "~%")
        (%if* (or (eq 'MKTREE-METHOD 'MERGE)
                  (eq 'MKTREE-METHOD 'MERGE-PROB))
            (csym::fprintf fp "1stinsrt  othrinsrt~%")
            (csym::fprintf fp "%8.4lf, %8.4lf~%" firstinsert otherinsert)
            (csym::fprintf fp "~%")
            )

        (%ifdef* MKTREE-PROFILE
            (csym::fprintf fp "worker, bodyreceived, bodyinserted, taskreceived, taskfailed, worktime, checktime, inserttime, redundanttime, 1stmergetime, rstmergetime, puttime~%")
            (for ((= i 0) (< i num-thrs) (inc i))
                 (def wkdata (ptr (struct worker-data))
                      (cast (ptr (struct worker-data)) (fref (aref threads i) wdptr)))
                 (csym::fprintf fp
                     "%d, %d, %d, %d, %d, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f~%"
                     i
                     (fref wkdata -> received-bodies)
                     (fref wkdata -> inserted-bodies)
                     (fref wkdata -> received-task)
                     (fref wkdata -> failed-task)
                     (/ (fref wkdata -> working-time) 1000000.0)
                     (/ (fref wkdata -> checking-time) 1000000.0)
                     (/ (fref wkdata -> inserting-time) 1000000.0)
                     (/ (fref wkdata -> redundant-time) 1000000.0)
                     (/ (fref wkdata -> fst-merging-time) 1000000.0)
                     (/ (fref wkdata -> rst-merging-time) 1000000.0) 
                     (/ (fref wkdata -> task-dividing-time) 1000000.0)
                     )
                 )
            )
        (csym::fclose fp)
        (csym::fprintf stderr "Results stored to file: %s~%" csvname)
        )
        (begin
        (csym::perror "Could not write result csv file")
        ))
    )


;------------------------------------------------------------------------------
; bcast: task definition for broadcasting bodies and cells
;------------------------------------------------------------------------------

(%ifdef DISTRIBUTED
(
(def (task bcast))

(def (task-sender bcast)
    ; ======== global options ========
    (csym::send-int usequad)
    (csym::send-real eps)
    ; ======== send bodytab ========
    (csym::send-binary-header (sizeof body) nbody)
    (csym::send-binary bodytab (sizeof body) nbody sv-socket)
    (csym::send-binary-terminator)
    ; ======== send celltab ========
    (csym::send-binary-header (sizeof cell) ncell)
    (csym::send-binary celltab (sizeof cell) ncell sv-socket)
    (csym::send-binary-terminator)
    )

(def (task-receiver bcast)
    ; ======== global options ========
    (= usequad (csym::recv-int))
    (= eps (csym::recv-real))
    ; ======== receive bodytab ========
    (csym::recv-binary-header NULL (ptr nbody))
    (if (not bodytab-initialized)
        (begin
        (= bodytab-initialized TRUE)
        (= bodytab (csym::allocate (* nbody (sizeof body))))
        ))
    (csym::receive-binary bodytab (sizeof body) nbody sv-socket)
    (csym::recv-binary-terminator)
    ; ======== receive celltab ========
    (csym::recv-binary-header NULL (ptr ncell))
    (if (not celltab-initialized)
        (begin
        (= celltab-initialized TRUE)
        (= celltab (csym::allocate (* nbody (sizeof cell))))
        ))
    (csym::receive-binary celltab (sizeof cell) ncell sv-socket)
    (csym::recv-binary-terminator)
    )

(def (task-body bcast))

))  ; ======== end of %ifdef ========


;------------------------------------------------------------------------------
; treeforce
;------------------------------------------------------------------------------

(def (treeforce)
     (wfn void)
    (def p bodyptr)
    (def tp (array (struct timeval) 2))
    
    (for ((= p bodytab) (< p (+ bodytab nbody)) (inc p))
        (= (csym::Update p) TRUE)
        )

    (csym::gettimeofday tp 0)
    (maketree bodytab nbody)
    (csym::gettimeofday (+ tp 1) 0)
    (%if* (or (eq 'MKTREE-METHOD 'MERGE)
              (eq 'MKTREE-METHOD 'MERGE-PROB))
        (if old-root
            (+= otherinsert (csym::elapsed-time tp))
            (+= firstinsert (csym::elapsed-time tp))
            )
        )
    (+= mktreetime (csym::elapsed_time tp))
    
    (%ifdef DISTRIBUTED (
        (= bodytab-initialized TRUE)
        (= celltab-initialized TRUE)
        (csym::gettimeofday tp 0)
        (tcell-broadcast bcast
            (:put )
            )
        (csym::gettimeofday (+ tp 1) 0)
        (+= brcasttime (csym::elapsed_time tp))
        ))
    
    (csym::gettimeofday tp 0)
    (gravcalc)
    (csym::gettimeofday (+ tp 1) 0)
    (+= grcalctime (csym::elapsed_time tp))
    
    (%ifdef FORCEREPORT (
        (csym::forcereport)
        ))
    )


;------------------------------------------------------------------------------
; pscalc: task definition of time advancing
;------------------------------------------------------------------------------

(decl (advance-time i1 i2 padvance)
      (wfn void int int bool))

(def (task pscalc)
    (def i1 int)
    (def i2 int)
    (def padvance bool)
    )

(def (task-body pscalc)
    (advance-time this.i1 this.i2 this.padvance)
    )

(def (advance-time i1 i2 padvance)
     (wfn void int int bool)
    (if (< (- i2 i1) 8)
        (begin
        (def i int)
        (for ((= i i1) (< i i2) (inc i))
            (def p bodyptr (+ bodytab i))
            (csym::ADDMULVS (csym::Vel p) (csym::Acc p) (* 0.5 dtime))
            (if padvance
                (begin
                (csym::ADDMULVS (csym::Pos p) (csym::Vel p) dtime)
                ))
            )
        )
        (begin
            (do-two
                (advance-time i1 (+ i1 (/ (- i2 i1) 2)) padvance)
                (advance-time (+ i1 (/ (- i2 i1) 2)) i2 padvance)
            (pscalc
                (:put
                (= this.i1 (+ i1 (/ (- i2 i1) 2)))
                (= this.i2 i2)
                (= this.padvance padvance)
                )
                (:get
                )
            ))
        ))
    )


;------------------------------------------------------------------------------
; stepsystem
;------------------------------------------------------------------------------

(def (stepsystem)
     (wfn void)
    (%ifdef USEFREQ (
        (def dtime real (/ 1.0 freq))
        ))
    (def p bodyptr)
    (def tp (array (struct timeval) 2))

    (csym::gettimeofday tp 0)
    (%ifdef* DISTRIBUTED
        (for ((= p bodytab) (< p (+ bodytab nbody)) (inc p))
            (csym::ADDMULVS (csym::Vel p) (csym::Acc p) (* 0.5 dtime))
            (csym::ADDMULVS (csym::Pos p) (csym::Vel p) dtime)
            )
     %else
        (advance-time 0 nbody TRUE)
        )
    (csym::gettimeofday (+ tp 1) 0)
    (+= pscalctime (csym::elapsed_time tp))

    (treeforce)

    (csym::gettimeofday tp 0)
    (%ifdef* DISTRIBUTED
        (for ((= p bodytab) (< p (+ bodytab nbody)) (inc p))
            (csym::ADDMULVS (csym::Vel p) (csym::Acc p) (* 0.5 dtime))
            )
     %else
        (advance-time 0 nbody FALSE)
        )
    (csym::gettimeofday (+ tp 1) 0)
    (+= pscalctime (csym::elapsed_time tp))

    (inc nstep)
    (= tnow (+ tnow dtime))
    )


;------------------------------------------------------------------------------
; including other tcell files
;------------------------------------------------------------------------------

(%ifndef DISTRIBUTED ((%include "treeload.tcell")))

(%ifdef DISTRIBUTED (
    (%include "treegrav-distributed.tcell")
    )(
    (%include "treegrav-shared.tcell")
    ))

